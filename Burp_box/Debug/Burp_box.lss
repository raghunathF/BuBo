
Burp_box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028e4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a4  20000000  000028e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000150  200000a4  00002988  000200a4  2**2
                  ALLOC
  3 .stack        00000404  200001f4  00002ad8  000200a4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00042eab  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005e8c  00000000  00000000  00062fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008c80  00000000  00000000  00068e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000830  00000000  00000000  00071adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c30  00000000  00000000  0007230c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019196  00000000  00000000  00072f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001486a  00000000  00000000  0008c0d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006dd87  00000000  00000000  000a093c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000012e8  00000000  00000000  0010e6c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 05 00 20 a5 25 00 00 a1 25 00 00 a1 25 00 00     ... .%...%...%..
	...
      2c:	a1 25 00 00 00 00 00 00 00 00 00 00 a1 25 00 00     .%...........%..
      3c:	a1 25 00 00 a1 25 00 00 a1 25 00 00 a1 25 00 00     .%...%...%...%..
      4c:	a1 25 00 00 7d 03 00 00 a1 25 00 00 a1 25 00 00     .%..}....%...%..
      5c:	00 00 00 00 d5 01 00 00 1d 12 00 00 2d 12 00 00     ............-...
      6c:	00 00 00 00 11 18 00 00 b9 18 00 00 c9 18 00 00     ................
      7c:	a1 25 00 00 a1 25 00 00 a1 25 00 00 a1 25 00 00     .%...%...%...%..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	200000a4 	.word	0x200000a4
      ac:	00000000 	.word	0x00000000
      b0:	000028e4 	.word	0x000028e4

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	200000a8 	.word	0x200000a8
      e0:	000028e4 	.word	0x000028e4
      e4:	000028e4 	.word	0x000028e4
      e8:	00000000 	.word	0x00000000

000000ec <events_create_hook>:
extern struct _events_module _events_inst;

enum status_code events_create_hook(struct events_hook *hook, events_interrupt_hook func)
{
	/* Initialize the hook struct members */
	hook->next      = NULL;
      ec:	2300      	movs	r3, #0
      ee:	6083      	str	r3, [r0, #8]
	hook->resource  = NULL;
      f0:	6003      	str	r3, [r0, #0]
	hook->hook_func = func;
      f2:	6041      	str	r1, [r0, #4]

	return STATUS_OK;
}
      f4:	2000      	movs	r0, #0
      f6:	4770      	bx	lr

000000f8 <events_add_hook>:
enum status_code events_add_hook(struct events_resource *resource, struct events_hook *hook)
{
	struct events_hook *tmp_hook = NULL;

	/* Associate the hook with the resource */
	hook->resource = resource;
      f8:	6008      	str	r0, [r1, #0]

	/* Check if this is the first hook in the list */
	if (_events_inst.hook_list == NULL) {
      fa:	4b0a      	ldr	r3, [pc, #40]	; (124 <events_add_hook+0x2c>)
      fc:	691a      	ldr	r2, [r3, #16]
      fe:	2a00      	cmp	r2, #0
     100:	d102      	bne.n	108 <events_add_hook+0x10>
		_events_inst.hook_list = hook;
     102:	6119      	str	r1, [r3, #16]
     104:	e004      	b.n	110 <events_add_hook+0x18>
	} else {
		tmp_hook = _events_inst.hook_list;

		/* Find the first free place in the list */
		while (tmp_hook->next != NULL) {
			tmp_hook = tmp_hook->next;
     106:	001a      	movs	r2, r3
		while (tmp_hook->next != NULL) {
     108:	6893      	ldr	r3, [r2, #8]
     10a:	2b00      	cmp	r3, #0
     10c:	d1fb      	bne.n	106 <events_add_hook+0xe>
		}

		/* Put the hook into the next free place in the list */
		tmp_hook->next = hook;
     10e:	6091      	str	r1, [r2, #8]
 *
 */
static inline bool system_interrupt_is_enabled(
		const enum system_interrupt_vector vector)
{
	return (bool)((NVIC->ISER[0] >> (uint32_t)vector) & 0x00000001);
     110:	4b05      	ldr	r3, [pc, #20]	; (128 <events_add_hook+0x30>)
     112:	681b      	ldr	r3, [r3, #0]
	}

	/* Check if interrupts from the EVSYS module is enabled in the interrupt controller */
	if (!system_interrupt_is_enabled(SYSTEM_INTERRUPT_MODULE_EVSYS)) {
     114:	05db      	lsls	r3, r3, #23
     116:	d403      	bmi.n	120 <events_add_hook+0x28>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     118:	2280      	movs	r2, #128	; 0x80
     11a:	0052      	lsls	r2, r2, #1
     11c:	4b02      	ldr	r3, [pc, #8]	; (128 <events_add_hook+0x30>)
     11e:	601a      	str	r2, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EVSYS);
	}

	return STATUS_OK;
}
     120:	2000      	movs	r0, #0
     122:	4770      	bx	lr
     124:	20000000 	.word	0x20000000
     128:	e000e100 	.word	0xe000e100

0000012c <events_enable_interrupt_source>:

	return STATUS_OK;
}

enum status_code events_enable_interrupt_source(struct events_resource *resource, enum events_interrupt_source source)
{
     12c:	b510      	push	{r4, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	if (source == EVENTS_INTERRUPT_DETECT) {
     12e:	2901      	cmp	r1, #1
     130:	d004      	beq.n	13c <events_enable_interrupt_source+0x10>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
     132:	2317      	movs	r3, #23
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     134:	2900      	cmp	r1, #0
     136:	d009      	beq.n	14c <events_enable_interrupt_source+0x20>
	}

	return STATUS_OK;
}
     138:	0018      	movs	r0, r3
     13a:	bd10      	pop	{r4, pc}
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
     13c:	7800      	ldrb	r0, [r0, #0]
     13e:	3107      	adds	r1, #7
     140:	4b06      	ldr	r3, [pc, #24]	; (15c <events_enable_interrupt_source+0x30>)
     142:	4798      	blx	r3
     144:	4b06      	ldr	r3, [pc, #24]	; (160 <events_enable_interrupt_source+0x34>)
     146:	6158      	str	r0, [r3, #20]
	return STATUS_OK;
     148:	2300      	movs	r3, #0
     14a:	e7f5      	b.n	138 <events_enable_interrupt_source+0xc>
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
     14c:	7800      	ldrb	r0, [r0, #0]
     14e:	4b03      	ldr	r3, [pc, #12]	; (15c <events_enable_interrupt_source+0x30>)
     150:	4798      	blx	r3
     152:	4b03      	ldr	r3, [pc, #12]	; (160 <events_enable_interrupt_source+0x34>)
     154:	6158      	str	r0, [r3, #20]
	return STATUS_OK;
     156:	2300      	movs	r3, #0
     158:	e7ee      	b.n	138 <events_enable_interrupt_source+0xc>
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	00000211 	.word	0x00000211
     160:	42000400 	.word	0x42000400

00000164 <events_is_interrupt_set>:
	return STATUS_OK;
}


bool events_is_interrupt_set(struct events_resource *resource, enum events_interrupt_source source)
{
     164:	b510      	push	{r4, lr}
     166:	0003      	movs	r3, r0
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
     168:	2901      	cmp	r1, #1
     16a:	d003      	beq.n	174 <events_is_interrupt_set+0x10>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return false;
     16c:	2000      	movs	r0, #0
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     16e:	2900      	cmp	r1, #0
     170:	d006      	beq.n	180 <events_is_interrupt_set+0x1c>
	}

	return (bool)(_events_inst.interrupt_flag_buffer & bitpos);
}
     172:	bd10      	pop	{r4, pc}
		bitpos = _events_find_bit_position(resource->channel,
     174:	7800      	ldrb	r0, [r0, #0]
     176:	3107      	adds	r1, #7
     178:	4b07      	ldr	r3, [pc, #28]	; (198 <events_is_interrupt_set+0x34>)
     17a:	4798      	blx	r3
     17c:	0003      	movs	r3, r0
     17e:	e003      	b.n	188 <events_is_interrupt_set+0x24>
		bitpos = _events_find_bit_position(resource->channel,
     180:	7818      	ldrb	r0, [r3, #0]
     182:	4b05      	ldr	r3, [pc, #20]	; (198 <events_is_interrupt_set+0x34>)
     184:	4798      	blx	r3
     186:	0003      	movs	r3, r0
	return (bool)(_events_inst.interrupt_flag_buffer & bitpos);
     188:	4a04      	ldr	r2, [pc, #16]	; (19c <events_is_interrupt_set+0x38>)
     18a:	6890      	ldr	r0, [r2, #8]
     18c:	4018      	ands	r0, r3
     18e:	1e43      	subs	r3, r0, #1
     190:	4198      	sbcs	r0, r3
     192:	b2c0      	uxtb	r0, r0
     194:	e7ed      	b.n	172 <events_is_interrupt_set+0xe>
     196:	46c0      	nop			; (mov r8, r8)
     198:	00000211 	.word	0x00000211
     19c:	20000000 	.word	0x20000000

000001a0 <events_ack_interrupt>:

enum status_code events_ack_interrupt(struct events_resource *resource, enum events_interrupt_source source)
{
     1a0:	b510      	push	{r4, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
     1a2:	2901      	cmp	r1, #1
     1a4:	d004      	beq.n	1b0 <events_ack_interrupt+0x10>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
     1a6:	2317      	movs	r3, #23
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     1a8:	2900      	cmp	r1, #0
     1aa:	d006      	beq.n	1ba <events_ack_interrupt+0x1a>
	}

	_events_inst.interrupt_flag_ack_buffer |= bitpos;

	return STATUS_OK;
}
     1ac:	0018      	movs	r0, r3
     1ae:	bd10      	pop	{r4, pc}
		bitpos = _events_find_bit_position(resource->channel,
     1b0:	7800      	ldrb	r0, [r0, #0]
     1b2:	3107      	adds	r1, #7
     1b4:	4b05      	ldr	r3, [pc, #20]	; (1cc <events_ack_interrupt+0x2c>)
     1b6:	4798      	blx	r3
     1b8:	e002      	b.n	1c0 <events_ack_interrupt+0x20>
		bitpos = _events_find_bit_position(resource->channel,
     1ba:	7800      	ldrb	r0, [r0, #0]
     1bc:	4b03      	ldr	r3, [pc, #12]	; (1cc <events_ack_interrupt+0x2c>)
     1be:	4798      	blx	r3
	_events_inst.interrupt_flag_ack_buffer |= bitpos;
     1c0:	4b03      	ldr	r3, [pc, #12]	; (1d0 <events_ack_interrupt+0x30>)
     1c2:	68da      	ldr	r2, [r3, #12]
     1c4:	4310      	orrs	r0, r2
     1c6:	60d8      	str	r0, [r3, #12]
	return STATUS_OK;
     1c8:	2300      	movs	r3, #0
     1ca:	e7ef      	b.n	1ac <events_ack_interrupt+0xc>
     1cc:	00000211 	.word	0x00000211
     1d0:	20000000 	.word	0x20000000

000001d4 <EVSYS_Handler>:

void EVSYS_Handler(void)
{
     1d4:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     1d6:	4b0b      	ldr	r3, [pc, #44]	; (204 <EVSYS_Handler+0x30>)
     1d8:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     1da:	490b      	ldr	r1, [pc, #44]	; (208 <EVSYS_Handler+0x34>)
     1dc:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     1de:	6898      	ldr	r0, [r3, #8]
     1e0:	4302      	orrs	r2, r0
     1e2:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     1e4:	4b09      	ldr	r3, [pc, #36]	; (20c <EVSYS_Handler+0x38>)
     1e6:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     1e8:	2c00      	cmp	r4, #0
     1ea:	d005      	beq.n	1f8 <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
     1ec:	6820      	ldr	r0, [r4, #0]
     1ee:	6863      	ldr	r3, [r4, #4]
     1f0:	4798      	blx	r3
		current_hook = current_hook->next;
     1f2:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     1f4:	2c00      	cmp	r4, #0
     1f6:	d1f9      	bne.n	1ec <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     1f8:	4b02      	ldr	r3, [pc, #8]	; (204 <EVSYS_Handler+0x30>)
     1fa:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     1fc:	689a      	ldr	r2, [r3, #8]
     1fe:	438a      	bics	r2, r1
     200:	609a      	str	r2, [r3, #8]
}
     202:	bd10      	pop	{r4, pc}
     204:	20000000 	.word	0x20000000
     208:	42000400 	.word	0x42000400
     20c:	0f0fffff 	.word	0x0f0fffff

00000210 <_events_find_bit_position>:
 */
uint32_t _events_find_bit_position(uint8_t channel, uint8_t start_offset)
{
	uint32_t pos;

	if (channel < _EVENTS_START_OFFSET_BUSY_BITS) {
     210:	2807      	cmp	r0, #7
     212:	d904      	bls.n	21e <_events_find_bit_position+0xe>
		pos = 0x01UL << (start_offset + channel);
	} else {
		pos = 0x01UL << (start_offset + channel + _EVENTS_START_OFFSET_BUSY_BITS);
     214:	1809      	adds	r1, r1, r0
     216:	3108      	adds	r1, #8
     218:	2001      	movs	r0, #1
     21a:	4088      	lsls	r0, r1
	}

	return pos;
}
     21c:	4770      	bx	lr
		pos = 0x01UL << (start_offset + channel);
     21e:	1809      	adds	r1, r1, r0
     220:	2001      	movs	r0, #1
     222:	4088      	lsls	r0, r1
     224:	e7fa      	b.n	21c <_events_find_bit_position+0xc>
	...

00000228 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     228:	4a06      	ldr	r2, [pc, #24]	; (244 <_system_events_init+0x1c>)
     22a:	6a13      	ldr	r3, [r2, #32]
     22c:	2102      	movs	r1, #2
     22e:	430b      	orrs	r3, r1
     230:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     232:	2201      	movs	r2, #1
     234:	4b04      	ldr	r3, [pc, #16]	; (248 <_system_events_init+0x20>)
     236:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     238:	0019      	movs	r1, r3
     23a:	780b      	ldrb	r3, [r1, #0]
     23c:	4213      	tst	r3, r2
     23e:	d1fc      	bne.n	23a <_system_events_init+0x12>
	}
}
     240:	4770      	bx	lr
     242:	46c0      	nop			; (mov r8, r8)
     244:	40000400 	.word	0x40000400
     248:	42000400 	.word	0x42000400

0000024c <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
     24c:	2301      	movs	r3, #1
     24e:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
     250:	2300      	movs	r3, #0
     252:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
     254:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
     256:	70c3      	strb	r3, [r0, #3]
}
     258:	4770      	bx	lr
	...

0000025c <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
     25c:	b5f0      	push	{r4, r5, r6, r7, lr}
     25e:	b083      	sub	sp, #12
     260:	0005      	movs	r5, r0
     262:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     264:	4b24      	ldr	r3, [pc, #144]	; (2f8 <events_allocate+0x9c>)
     266:	4798      	blx	r3
	tmp = _events_inst.allocated_channels;
     268:	4b24      	ldr	r3, [pc, #144]	; (2fc <events_allocate+0xa0>)
     26a:	681b      	ldr	r3, [r3, #0]
		if(!(tmp & 0x00000001)) {
     26c:	07da      	lsls	r2, r3, #31
     26e:	d50e      	bpl.n	28e <events_allocate+0x32>
		tmp = tmp >> 1;
     270:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     272:	2401      	movs	r4, #1
		if(!(tmp & 0x00000001)) {
     274:	2201      	movs	r2, #1
     276:	421a      	tst	r2, r3
     278:	d00a      	beq.n	290 <events_allocate+0x34>
		tmp = tmp >> 1;
     27a:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     27c:	3401      	adds	r4, #1
     27e:	b2e4      	uxtb	r4, r4
     280:	2c06      	cmp	r4, #6
     282:	d1f8      	bne.n	276 <events_allocate+0x1a>
	cpu_irq_leave_critical();
     284:	4b1e      	ldr	r3, [pc, #120]	; (300 <events_allocate+0xa4>)
     286:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
     288:	2014      	movs	r0, #20
			     EVSYS_CHANNEL_PATH(config->path)         |
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);


	return STATUS_OK;
}
     28a:	b003      	add	sp, #12
     28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     28e:	2400      	movs	r4, #0
			_events_inst.allocated_channels |= 1 << count;
     290:	4a1a      	ldr	r2, [pc, #104]	; (2fc <events_allocate+0xa0>)
     292:	6811      	ldr	r1, [r2, #0]
     294:	2301      	movs	r3, #1
     296:	40a3      	lsls	r3, r4
     298:	430b      	orrs	r3, r1
     29a:	6013      	str	r3, [r2, #0]
			_events_inst.free_channels--;
     29c:	7913      	ldrb	r3, [r2, #4]
     29e:	3b01      	subs	r3, #1
     2a0:	7113      	strb	r3, [r2, #4]
     2a2:	4b17      	ldr	r3, [pc, #92]	; (300 <events_allocate+0xa4>)
     2a4:	4798      	blx	r3
		return STATUS_ERR_NOT_FOUND;
     2a6:	2014      	movs	r0, #20
	if(new_channel == EVENTS_INVALID_CHANNEL) {
     2a8:	2cff      	cmp	r4, #255	; 0xff
     2aa:	d0ee      	beq.n	28a <events_allocate+0x2e>
	resource->channel = new_channel;
     2ac:	702c      	strb	r4, [r5, #0]
	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
     2ae:	7873      	ldrb	r3, [r6, #1]
     2b0:	2b02      	cmp	r3, #2
     2b2:	d00a      	beq.n	2ca <events_allocate+0x6e>
		gclk_chan_conf.source_generator =
     2b4:	a901      	add	r1, sp, #4
     2b6:	78f3      	ldrb	r3, [r6, #3]
     2b8:	700b      	strb	r3, [r1, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
     2ba:	1de7      	adds	r7, r4, #7
     2bc:	b2ff      	uxtb	r7, r7
     2be:	0038      	movs	r0, r7
     2c0:	4b10      	ldr	r3, [pc, #64]	; (304 <events_allocate+0xa8>)
     2c2:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
     2c4:	0038      	movs	r0, r7
     2c6:	4b10      	ldr	r3, [pc, #64]	; (308 <events_allocate+0xac>)
     2c8:	4798      	blx	r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
     2ca:	78b3      	ldrb	r3, [r6, #2]
     2cc:	041b      	lsls	r3, r3, #16
     2ce:	22fc      	movs	r2, #252	; 0xfc
     2d0:	0392      	lsls	r2, r2, #14
     2d2:	4013      	ands	r3, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
     2d4:	7872      	ldrb	r2, [r6, #1]
     2d6:	0612      	lsls	r2, r2, #24
     2d8:	21c0      	movs	r1, #192	; 0xc0
     2da:	0489      	lsls	r1, r1, #18
     2dc:	400a      	ands	r2, r1
     2de:	4313      	orrs	r3, r2
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
     2e0:	7832      	ldrb	r2, [r6, #0]
     2e2:	0692      	lsls	r2, r2, #26
     2e4:	21c0      	movs	r1, #192	; 0xc0
     2e6:	0509      	lsls	r1, r1, #20
     2e8:	400a      	ands	r2, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
     2ea:	4313      	orrs	r3, r2
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
     2ec:	2207      	movs	r2, #7
     2ee:	4014      	ands	r4, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
     2f0:	431c      	orrs	r4, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
     2f2:	606c      	str	r4, [r5, #4]
	return STATUS_OK;
     2f4:	2000      	movs	r0, #0
     2f6:	e7c8      	b.n	28a <events_allocate+0x2e>
     2f8:	00001f95 	.word	0x00001f95
     2fc:	20000000 	.word	0x20000000
     300:	00001fd5 	.word	0x00001fd5
     304:	00002449 	.word	0x00002449
     308:	000023bd 	.word	0x000023bd

0000030c <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
     30c:	7803      	ldrb	r3, [r0, #0]
     30e:	3301      	adds	r3, #1
     310:	021b      	lsls	r3, r3, #8
     312:	22f0      	movs	r2, #240	; 0xf0
     314:	0112      	lsls	r2, r2, #4
     316:	4013      	ands	r3, r2
			  EVSYS_USER_USER(user_id);
     318:	221f      	movs	r2, #31
     31a:	4011      	ands	r1, r2
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
     31c:	430b      	orrs	r3, r1
     31e:	4a03      	ldr	r2, [pc, #12]	; (32c <events_attach_user+0x20>)
     320:	8113      	strh	r3, [r2, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
     322:	6843      	ldr	r3, [r0, #4]
     324:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
}
     326:	2000      	movs	r0, #0
     328:	4770      	bx	lr
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	42000400 	.word	0x42000400

00000330 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     330:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     332:	2a00      	cmp	r2, #0
     334:	d001      	beq.n	33a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     336:	0018      	movs	r0, r3
     338:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     33a:	008b      	lsls	r3, r1, #2
     33c:	4a06      	ldr	r2, [pc, #24]	; (358 <extint_register_callback+0x28>)
     33e:	589b      	ldr	r3, [r3, r2]
     340:	2b00      	cmp	r3, #0
     342:	d003      	beq.n	34c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     344:	4283      	cmp	r3, r0
     346:	d005      	beq.n	354 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     348:	231d      	movs	r3, #29
     34a:	e7f4      	b.n	336 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     34c:	0089      	lsls	r1, r1, #2
     34e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     350:	2300      	movs	r3, #0
     352:	e7f0      	b.n	336 <extint_register_callback+0x6>
		return STATUS_OK;
     354:	2300      	movs	r3, #0
     356:	e7ee      	b.n	336 <extint_register_callback+0x6>
     358:	20000124 	.word	0x20000124

0000035c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     35c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     35e:	2900      	cmp	r1, #0
     360:	d001      	beq.n	366 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     362:	0018      	movs	r0, r3
     364:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     366:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     368:	281f      	cmp	r0, #31
     36a:	d800      	bhi.n	36e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     36c:	4a02      	ldr	r2, [pc, #8]	; (378 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     36e:	2301      	movs	r3, #1
     370:	4083      	lsls	r3, r0
     372:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     374:	2300      	movs	r3, #0
     376:	e7f4      	b.n	362 <extint_chan_enable_callback+0x6>
     378:	40001800 	.word	0x40001800

0000037c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     37c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     37e:	2200      	movs	r2, #0
     380:	4b10      	ldr	r3, [pc, #64]	; (3c4 <EIC_Handler+0x48>)
     382:	701a      	strb	r2, [r3, #0]
     384:	2300      	movs	r3, #0
     386:	4a10      	ldr	r2, [pc, #64]	; (3c8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     388:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			//extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     38a:	4e10      	ldr	r6, [pc, #64]	; (3cc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     38c:	4c0d      	ldr	r4, [pc, #52]	; (3c4 <EIC_Handler+0x48>)
     38e:	e00a      	b.n	3a6 <EIC_Handler+0x2a>
		return eics[eic_index];
     390:	4a0d      	ldr	r2, [pc, #52]	; (3c8 <EIC_Handler+0x4c>)
     392:	e008      	b.n	3a6 <EIC_Handler+0x2a>
     394:	7823      	ldrb	r3, [r4, #0]
     396:	3301      	adds	r3, #1
     398:	b2db      	uxtb	r3, r3
     39a:	7023      	strb	r3, [r4, #0]
     39c:	2b0f      	cmp	r3, #15
     39e:	d80f      	bhi.n	3c0 <EIC_Handler+0x44>
		return NULL;
     3a0:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     3a2:	2b1f      	cmp	r3, #31
     3a4:	d9f4      	bls.n	390 <EIC_Handler+0x14>

	return (eic_module->INTFLAG.reg & eic_mask);
     3a6:	6911      	ldr	r1, [r2, #16]
	uint32_t eic_mask   = (1UL << (channel % 32));
     3a8:	0028      	movs	r0, r5
     3aa:	4018      	ands	r0, r3
     3ac:	2201      	movs	r2, #1
     3ae:	4082      	lsls	r2, r0
		if (extint_chan_is_detected(_current_channel)) {
     3b0:	4211      	tst	r1, r2
     3b2:	d0ef      	beq.n	394 <EIC_Handler+0x18>
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     3b4:	009b      	lsls	r3, r3, #2
     3b6:	599b      	ldr	r3, [r3, r6]
     3b8:	2b00      	cmp	r3, #0
     3ba:	d0eb      	beq.n	394 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     3bc:	4798      	blx	r3
     3be:	e7e9      	b.n	394 <EIC_Handler+0x18>
			}
		}
	}
}
     3c0:	bd70      	pop	{r4, r5, r6, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	20000123 	.word	0x20000123
     3c8:	40001800 	.word	0x40001800
     3cc:	20000124 	.word	0x20000124

000003d0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     3d0:	4a04      	ldr	r2, [pc, #16]	; (3e4 <_extint_enable+0x14>)
     3d2:	7813      	ldrb	r3, [r2, #0]
     3d4:	2102      	movs	r1, #2
     3d6:	430b      	orrs	r3, r1
     3d8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3da:	7853      	ldrb	r3, [r2, #1]
     3dc:	b25b      	sxtb	r3, r3
     3de:	2b00      	cmp	r3, #0
     3e0:	dbfb      	blt.n	3da <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3e2:	4770      	bx	lr
     3e4:	40001800 	.word	0x40001800

000003e8 <_system_extint_init>:
{
     3e8:	b500      	push	{lr}
     3ea:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     3ec:	4a12      	ldr	r2, [pc, #72]	; (438 <STACK_SIZE+0x38>)
     3ee:	6993      	ldr	r3, [r2, #24]
     3f0:	2140      	movs	r1, #64	; 0x40
     3f2:	430b      	orrs	r3, r1
     3f4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3f6:	a901      	add	r1, sp, #4
     3f8:	2300      	movs	r3, #0
     3fa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3fc:	2005      	movs	r0, #5
     3fe:	4b0f      	ldr	r3, [pc, #60]	; (43c <STACK_SIZE+0x3c>)
     400:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     402:	2005      	movs	r0, #5
     404:	4b0e      	ldr	r3, [pc, #56]	; (440 <STACK_SIZE+0x40>)
     406:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     408:	4a0e      	ldr	r2, [pc, #56]	; (444 <STACK_SIZE+0x44>)
     40a:	7813      	ldrb	r3, [r2, #0]
     40c:	2101      	movs	r1, #1
     40e:	430b      	orrs	r3, r1
     410:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     412:	7853      	ldrb	r3, [r2, #1]
     414:	b25b      	sxtb	r3, r3
     416:	2b00      	cmp	r3, #0
     418:	dbfb      	blt.n	412 <STACK_SIZE+0x12>
     41a:	4b0b      	ldr	r3, [pc, #44]	; (448 <STACK_SIZE+0x48>)
     41c:	0019      	movs	r1, r3
     41e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     420:	2200      	movs	r2, #0
     422:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     424:	4299      	cmp	r1, r3
     426:	d1fc      	bne.n	422 <STACK_SIZE+0x22>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     428:	2210      	movs	r2, #16
     42a:	4b08      	ldr	r3, [pc, #32]	; (44c <STACK_SIZE+0x4c>)
     42c:	601a      	str	r2, [r3, #0]
	_extint_enable();
     42e:	4b08      	ldr	r3, [pc, #32]	; (450 <STACK_SIZE+0x50>)
     430:	4798      	blx	r3
}
     432:	b003      	add	sp, #12
     434:	bd00      	pop	{pc}
     436:	46c0      	nop			; (mov r8, r8)
     438:	40000400 	.word	0x40000400
     43c:	00002449 	.word	0x00002449
     440:	000023bd 	.word	0x000023bd
     444:	40001800 	.word	0x40001800
     448:	20000124 	.word	0x20000124
     44c:	e000e100 	.word	0xe000e100
     450:	000003d1 	.word	0x000003d1

00000454 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     454:	2300      	movs	r3, #0
     456:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     458:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     45a:	2201      	movs	r2, #1
     45c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     45e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     460:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     462:	3302      	adds	r3, #2
     464:	72c3      	strb	r3, [r0, #11]
}
     466:	4770      	bx	lr

00000468 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     468:	b5f0      	push	{r4, r5, r6, r7, lr}
     46a:	b083      	sub	sp, #12
     46c:	0005      	movs	r5, r0
     46e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     470:	a901      	add	r1, sp, #4
     472:	2300      	movs	r3, #0
     474:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     476:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     478:	7923      	ldrb	r3, [r4, #4]
     47a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     47c:	7a23      	ldrb	r3, [r4, #8]
     47e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     480:	7820      	ldrb	r0, [r4, #0]
     482:	4b15      	ldr	r3, [pc, #84]	; (4d8 <extint_chan_set_config+0x70>)
     484:	4798      	blx	r3
		return NULL;
     486:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     488:	2d1f      	cmp	r5, #31
     48a:	d800      	bhi.n	48e <extint_chan_set_config+0x26>
		return eics[eic_index];
     48c:	4813      	ldr	r0, [pc, #76]	; (4dc <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     48e:	2207      	movs	r2, #7
     490:	402a      	ands	r2, r5
     492:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     494:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     496:	7aa3      	ldrb	r3, [r4, #10]
     498:	2b00      	cmp	r3, #0
     49a:	d001      	beq.n	4a0 <extint_chan_set_config+0x38>
     49c:	2308      	movs	r3, #8
     49e:	431f      	orrs	r7, r3
     4a0:	08eb      	lsrs	r3, r5, #3
     4a2:	009b      	lsls	r3, r3, #2
     4a4:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     4a6:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     4a8:	260f      	movs	r6, #15
     4aa:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     4ac:	43b1      	bics	r1, r6
			(new_config << config_pos);
     4ae:	4097      	lsls	r7, r2
     4b0:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     4b2:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     4b4:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     4b6:	7a63      	ldrb	r3, [r4, #9]
     4b8:	2b00      	cmp	r3, #0
     4ba:	d106      	bne.n	4ca <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     4bc:	6943      	ldr	r3, [r0, #20]
     4be:	2201      	movs	r2, #1
     4c0:	40aa      	lsls	r2, r5
     4c2:	4393      	bics	r3, r2
     4c4:	6143      	str	r3, [r0, #20]
	}
}
     4c6:	b003      	add	sp, #12
     4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     4ca:	6942      	ldr	r2, [r0, #20]
     4cc:	2301      	movs	r3, #1
     4ce:	40ab      	lsls	r3, r5
     4d0:	4313      	orrs	r3, r2
     4d2:	6143      	str	r3, [r0, #20]
     4d4:	e7f7      	b.n	4c6 <extint_chan_set_config+0x5e>
     4d6:	46c0      	nop			; (mov r8, r8)
     4d8:	00002541 	.word	0x00002541
     4dc:	40001800 	.word	0x40001800

000004e0 <extint_enable_events>:
 *
 *  \param[in] events    Struct containing flags of events to enable
 */
void extint_enable_events(
		struct extint_events *const events)
{
     4e0:	b510      	push	{r4, lr}
     4e2:	2300      	movs	r3, #0
     4e4:	2100      	movs	r1, #0
		uint32_t event_mask = 0;

		/* Create an enable mask for the current EIC module */
		for (uint32_t j = 0; j < 32; j++) {
			if (events->generate_event_on_detect[(32 * i) + j]) {
				event_mask |= (1UL << j);
     4e6:	2401      	movs	r4, #1
     4e8:	e002      	b.n	4f0 <extint_enable_events+0x10>
		for (uint32_t j = 0; j < 32; j++) {
     4ea:	3301      	adds	r3, #1
     4ec:	2b20      	cmp	r3, #32
     4ee:	d006      	beq.n	4fe <extint_enable_events+0x1e>
			if (events->generate_event_on_detect[(32 * i) + j]) {
     4f0:	5cc2      	ldrb	r2, [r0, r3]
     4f2:	2a00      	cmp	r2, #0
     4f4:	d0f9      	beq.n	4ea <extint_enable_events+0xa>
				event_mask |= (1UL << j);
     4f6:	0022      	movs	r2, r4
     4f8:	409a      	lsls	r2, r3
     4fa:	4311      	orrs	r1, r2
     4fc:	e7f5      	b.n	4ea <extint_enable_events+0xa>
			}
		}

		/* Enable the masked events */
		eics[i]->EVCTRL.reg |= event_mask;
     4fe:	4b02      	ldr	r3, [pc, #8]	; (508 <extint_enable_events+0x28>)
     500:	685a      	ldr	r2, [r3, #4]
     502:	4311      	orrs	r1, r2
     504:	6059      	str	r1, [r3, #4]
	}
}
     506:	bd10      	pop	{r4, pc}
     508:	40001800 	.word	0x40001800

0000050c <enable_buttons>:
#define EXTINT_FLAG_CLEAR    0x4000180BUL
#define MASK_FLAG_BUTTONS    0x000000E0UL
#define DEBOUNCE_DELAY       125

void enable_buttons()
{
     50c:	b510      	push	{r4, lr}
	extint_chan_enable_callback(PLAY_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     50e:	2100      	movs	r1, #0
     510:	2004      	movs	r0, #4
     512:	4c03      	ldr	r4, [pc, #12]	; (520 <enable_buttons+0x14>)
     514:	47a0      	blx	r4
	/*
	extint_chan_enable_callback(RECORD_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	*/
	extint_chan_enable_callback(NEXT_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     516:	2100      	movs	r1, #0
     518:	2001      	movs	r0, #1
     51a:	47a0      	blx	r4
	
}
     51c:	bd10      	pop	{r4, pc}
     51e:	46c0      	nop			; (mov r8, r8)
     520:	0000035d 	.word	0x0000035d

00000524 <config_extint_channel_burp_box>:
	extint_chan_disable_callback(NEXT_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	
}

void config_extint_channel_burp_box()
{
     524:	b5f0      	push	{r4, r5, r6, r7, lr}
     526:	b085      	sub	sp, #20
	struct extint_chan_conf config_extint_chan;
	
	//--Play
	extint_chan_get_config_defaults(&config_extint_chan);
     528:	ac01      	add	r4, sp, #4
     52a:	0020      	movs	r0, r4
     52c:	4f0d      	ldr	r7, [pc, #52]	; (564 <config_extint_channel_burp_box+0x40>)
     52e:	47b8      	blx	r7
	config_extint_chan.gpio_pin           = PLAY_BUTTON_EIC;
     530:	2304      	movs	r3, #4
     532:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = PLAY_BUTTON_MUX;
     534:	2380      	movs	r3, #128	; 0x80
     536:	02db      	lsls	r3, r3, #11
     538:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
     53a:	2502      	movs	r5, #2
     53c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     53e:	72e5      	strb	r5, [r4, #11]
	extint_chan_set_config(PLAY_BUTTON_EIC_LINE, &config_extint_chan);
     540:	0021      	movs	r1, r4
     542:	2004      	movs	r0, #4
     544:	4e08      	ldr	r6, [pc, #32]	; (568 <config_extint_channel_burp_box+0x44>)
     546:	47b0      	blx	r6
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
	extint_chan_set_config(RECORD_BUTTON_EIC_LINE, &config_extint_chan);
	*/
	//--Next
	extint_chan_get_config_defaults(&config_extint_chan);
     548:	0020      	movs	r0, r4
     54a:	47b8      	blx	r7
	config_extint_chan.gpio_pin           = NEXT_BUTTON_EIC;
     54c:	230f      	movs	r3, #15
     54e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = NEXT_BUTTON_MUX;
     550:	23f0      	movs	r3, #240	; 0xf0
     552:	031b      	lsls	r3, r3, #12
     554:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
     556:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     558:	72e5      	strb	r5, [r4, #11]
	extint_chan_set_config(NEXT_BUTTON_EIC_LINE, &config_extint_chan);
     55a:	0021      	movs	r1, r4
     55c:	2001      	movs	r0, #1
     55e:	47b0      	blx	r6
	
}
     560:	b005      	add	sp, #20
     562:	bdf0      	pop	{r4, r5, r6, r7, pc}
     564:	00000455 	.word	0x00000455
     568:	00000469 	.word	0x00000469

0000056c <read_interrupt_flag_status>:
	uint8_t  write_clear_flags = BUTTONS_INTERRUPT_MASK;
	*write_clear_interrupts_flags = write_clear_flags;
}

uint8_t  read_interrupt_flag_status()
{
     56c:	b082      	sub	sp, #8
	volatile uint8_t read_status_1 = 0;
     56e:	466b      	mov	r3, sp
     570:	2200      	movs	r2, #0
     572:	71da      	strb	r2, [r3, #7]
	volatile uint8_t* check_interrupt_flag_status = NULL;
	check_interrupt_flag_status =  EXTINT_FLAG_STATUS;
	read_status_1 = *check_interrupt_flag_status;
     574:	4a03      	ldr	r2, [pc, #12]	; (584 <read_interrupt_flag_status+0x18>)
     576:	7812      	ldrb	r2, [r2, #0]
     578:	b2d2      	uxtb	r2, r2
     57a:	71da      	strb	r2, [r3, #7]
	//read_status = (read_status & MASK_FLAG_BUTTONS);
	return read_status_1;	
     57c:	79d8      	ldrb	r0, [r3, #7]
     57e:	b2c0      	uxtb	r0, r0
}
     580:	b002      	add	sp, #8
     582:	4770      	bx	lr
     584:	40001810 	.word	0x40001810

00000588 <play_pressed_callback>:

void play_pressed_callback()
{
     588:	b510      	push	{r4, lr}
	//check what all interrupt flags are high
	uint8_t read_status = 0;
	//delay_cycles_ms(DEBOUNCE_DELAY);
	read_status = read_interrupt_flag_status();
     58a:	4b0d      	ldr	r3, [pc, #52]	; (5c0 <play_pressed_callback+0x38>)
     58c:	4798      	blx	r3
	read_status = read_status & BUTTONS_INTERRUPT_MASK; //0x12
     58e:	2312      	movs	r3, #18
     590:	4018      	ands	r0, r3
	switch(read_status)
     592:	2810      	cmp	r0, #16
     594:	d005      	beq.n	5a2 <play_pressed_callback+0x1a>
     596:	2812      	cmp	r0, #18
     598:	d00d      	beq.n	5b6 <play_pressed_callback+0x2e>
		case ALL_BUTTONS_CLICKED:
			//global variable update
			input_buttons = N_P_R_PRESS;
			break;
		default:
			input_buttons = NO_BUTTONS_PRESSED;
     59a:	2200      	movs	r2, #0
     59c:	4b09      	ldr	r3, [pc, #36]	; (5c4 <play_pressed_callback+0x3c>)
     59e:	701a      	strb	r2, [r3, #0]
			break;
     5a0:	e002      	b.n	5a8 <play_pressed_callback+0x20>
			input_buttons = P_PRESS;
     5a2:	2203      	movs	r2, #3
     5a4:	4b07      	ldr	r3, [pc, #28]	; (5c4 <play_pressed_callback+0x3c>)
     5a6:	701a      	strb	r2, [r3, #0]
	}

	interrupt_occured = true;
     5a8:	2201      	movs	r2, #1
     5aa:	4b07      	ldr	r3, [pc, #28]	; (5c8 <play_pressed_callback+0x40>)
     5ac:	701a      	strb	r2, [r3, #0]
	*write_clear_interrupts_flags = write_clear_flags;
     5ae:	3211      	adds	r2, #17
     5b0:	4b06      	ldr	r3, [pc, #24]	; (5cc <play_pressed_callback+0x44>)
     5b2:	701a      	strb	r2, [r3, #0]
	//Clear the interrupt flags
	clear_interrupts_flags();
}
     5b4:	bd10      	pop	{r4, pc}
			input_buttons = N_P_R_PRESS;
     5b6:	2207      	movs	r2, #7
     5b8:	4b02      	ldr	r3, [pc, #8]	; (5c4 <play_pressed_callback+0x3c>)
     5ba:	701a      	strb	r2, [r3, #0]
			break;
     5bc:	e7f4      	b.n	5a8 <play_pressed_callback+0x20>
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	0000056d 	.word	0x0000056d
     5c4:	20000120 	.word	0x20000120
     5c8:	20000121 	.word	0x20000121
     5cc:	40001810 	.word	0x40001810

000005d0 <next_pressed_callback>:
	//Clear the interrupt flags
	clear_interrupts_flags();
}
*/
void next_pressed_callback()
{
     5d0:	b510      	push	{r4, lr}
	//check what all interrupt flags are high
	uint8_t read_status = 0;
	//delay_cycles_ms(DEBOUNCE_DELAY);
	read_status = read_interrupt_flag_status();
     5d2:	4b0d      	ldr	r3, [pc, #52]	; (608 <next_pressed_callback+0x38>)
     5d4:	4798      	blx	r3
	read_status = read_status & BUTTONS_INTERRUPT_MASK;
     5d6:	2312      	movs	r3, #18
     5d8:	4018      	ands	r0, r3
	
	switch(read_status)
     5da:	2802      	cmp	r0, #2
     5dc:	d005      	beq.n	5ea <next_pressed_callback+0x1a>
     5de:	2812      	cmp	r0, #18
     5e0:	d00d      	beq.n	5fe <next_pressed_callback+0x2e>
		case ALL_BUTTONS_CLICKED:
				//global variable update
				input_buttons = N_P_PRESS;
			break;
		default:
			input_buttons = NO_BUTTONS_PRESSED;
     5e2:	2200      	movs	r2, #0
     5e4:	4b09      	ldr	r3, [pc, #36]	; (60c <next_pressed_callback+0x3c>)
     5e6:	701a      	strb	r2, [r3, #0]
			break;
     5e8:	e002      	b.n	5f0 <next_pressed_callback+0x20>
			input_buttons = N_PRESS;
     5ea:	2201      	movs	r2, #1
     5ec:	4b07      	ldr	r3, [pc, #28]	; (60c <next_pressed_callback+0x3c>)
     5ee:	701a      	strb	r2, [r3, #0]
	}

	interrupt_occured = true;
     5f0:	2201      	movs	r2, #1
     5f2:	4b07      	ldr	r3, [pc, #28]	; (610 <next_pressed_callback+0x40>)
     5f4:	701a      	strb	r2, [r3, #0]
	*write_clear_interrupts_flags = write_clear_flags;
     5f6:	3211      	adds	r2, #17
     5f8:	4b06      	ldr	r3, [pc, #24]	; (614 <next_pressed_callback+0x44>)
     5fa:	701a      	strb	r2, [r3, #0]
	//Clear the interrupt flags
	clear_interrupts_flags();
}
     5fc:	bd10      	pop	{r4, pc}
				input_buttons = N_P_PRESS;
     5fe:	2204      	movs	r2, #4
     600:	4b02      	ldr	r3, [pc, #8]	; (60c <next_pressed_callback+0x3c>)
     602:	701a      	strb	r2, [r3, #0]
			break;
     604:	e7f4      	b.n	5f0 <next_pressed_callback+0x20>
     606:	46c0      	nop			; (mov r8, r8)
     608:	0000056d 	.word	0x0000056d
     60c:	20000120 	.word	0x20000120
     610:	20000121 	.word	0x20000121
     614:	40001810 	.word	0x40001810

00000618 <config_extint_callbacks_burp_box>:

void config_extint_callbacks_burp_box()
{
     618:	b510      	push	{r4, lr}
	extint_register_callback(play_pressed_callback, PLAY_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     61a:	2200      	movs	r2, #0
     61c:	2104      	movs	r1, #4
     61e:	4804      	ldr	r0, [pc, #16]	; (630 <config_extint_callbacks_burp_box+0x18>)
     620:	4c04      	ldr	r4, [pc, #16]	; (634 <config_extint_callbacks_burp_box+0x1c>)
     622:	47a0      	blx	r4
	/*
	extint_register_callback(record_pressed_callback, RECORD_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
	*/
	extint_register_callback(next_pressed_callback, NEXT_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     624:	2200      	movs	r2, #0
     626:	2101      	movs	r1, #1
     628:	4803      	ldr	r0, [pc, #12]	; (638 <config_extint_callbacks_burp_box+0x20>)
     62a:	47a0      	blx	r4

}
     62c:	bd10      	pop	{r4, pc}
     62e:	46c0      	nop			; (mov r8, r8)
     630:	00000589 	.word	0x00000589
     634:	00000331 	.word	0x00000331
     638:	000005d1 	.word	0x000005d1

0000063c <init_buttons>:
	port_pin_set_config(RECORD_BUTTON, &config_port_pin);
	port_pin_set_config(NEXT_BUTTON, &config_port_pin);
	port_pin_set_config(PLAY_BUTTON, &config_port_pin);
}
void init_buttons()
{
     63c:	b510      	push	{r4, lr}
	//config_buttons_inputs();
	config_extint_channel_burp_box();
     63e:	4b03      	ldr	r3, [pc, #12]	; (64c <init_buttons+0x10>)
     640:	4798      	blx	r3
	config_extint_callbacks_burp_box();
     642:	4b03      	ldr	r3, [pc, #12]	; (650 <init_buttons+0x14>)
     644:	4798      	blx	r3
	enable_buttons();
     646:	4b03      	ldr	r3, [pc, #12]	; (654 <init_buttons+0x18>)
     648:	4798      	blx	r3
     64a:	bd10      	pop	{r4, pc}
     64c:	00000525 	.word	0x00000525
     650:	00000619 	.word	0x00000619
     654:	0000050d 	.word	0x0000050d

00000658 <event_counter>:




void event_counter(struct events_resource *resource)
{
     658:	b510      	push	{r4, lr}
     65a:	0004      	movs	r4, r0
	
	
	if(events_is_interrupt_set(resource, EVENTS_INTERRUPT_DETECT))
     65c:	2101      	movs	r1, #1
     65e:	4b09      	ldr	r3, [pc, #36]	; (684 <event_counter+0x2c>)
     660:	4798      	blx	r3
     662:	2800      	cmp	r0, #0
     664:	d104      	bne.n	670 <event_counter+0x18>
		raw_capture_update = true;
		//raw_timer_capture_calib =  raw_timer_capture_calib
		
		
	 }
	events_ack_interrupt(resource, EVENTS_INTERRUPT_DETECT);
     666:	2101      	movs	r1, #1
     668:	0020      	movs	r0, r4
     66a:	4b07      	ldr	r3, [pc, #28]	; (688 <event_counter+0x30>)
     66c:	4798      	blx	r3
		
}
     66e:	bd10      	pop	{r4, pc}
		raw_timer_capture = tc_get_capture_value(&tc_servo_capture , TC_COMPARE_CAPTURE_CHANNEL_0 );
     670:	2100      	movs	r1, #0
     672:	4806      	ldr	r0, [pc, #24]	; (68c <event_counter+0x34>)
     674:	4b06      	ldr	r3, [pc, #24]	; (690 <event_counter+0x38>)
     676:	4798      	blx	r3
     678:	4b06      	ldr	r3, [pc, #24]	; (694 <event_counter+0x3c>)
     67a:	6018      	str	r0, [r3, #0]
		raw_capture_update = true;
     67c:	2201      	movs	r2, #1
     67e:	4b06      	ldr	r3, [pc, #24]	; (698 <event_counter+0x40>)
     680:	701a      	strb	r2, [r3, #0]
     682:	e7f0      	b.n	666 <event_counter+0xe>
     684:	00000165 	.word	0x00000165
     688:	000001a1 	.word	0x000001a1
     68c:	20000180 	.word	0x20000180
     690:	00001b2d 	.word	0x00001b2d
     694:	200000cc 	.word	0x200000cc
     698:	200000c9 	.word	0x200000c9

0000069c <configure_event_channel>:
{
     69c:	b530      	push	{r4, r5, lr}
     69e:	b083      	sub	sp, #12
     6a0:	0005      	movs	r5, r0
	events_get_config_defaults(&config);
     6a2:	ac01      	add	r4, sp, #4
     6a4:	0020      	movs	r0, r4
     6a6:	4b07      	ldr	r3, [pc, #28]	; (6c4 <configure_event_channel+0x28>)
     6a8:	4798      	blx	r3
	config.generator      = CONF_EVENT_GENERATOR;
     6aa:	230e      	movs	r3, #14
     6ac:	70a3      	strb	r3, [r4, #2]
	config.edge_detect    = EVENTS_EDGE_DETECT_BOTH;
     6ae:	3b0b      	subs	r3, #11
     6b0:	7023      	strb	r3, [r4, #0]
	config.path           = EVENTS_PATH_SYNCHRONOUS;
     6b2:	2300      	movs	r3, #0
     6b4:	7063      	strb	r3, [r4, #1]
	config.clock_source   = GCLK_GENERATOR_0;
     6b6:	70e3      	strb	r3, [r4, #3]
	events_allocate(resource, &config);
     6b8:	0021      	movs	r1, r4
     6ba:	0028      	movs	r0, r5
     6bc:	4b02      	ldr	r3, [pc, #8]	; (6c8 <configure_event_channel+0x2c>)
     6be:	4798      	blx	r3
}
     6c0:	b003      	add	sp, #12
     6c2:	bd30      	pop	{r4, r5, pc}
     6c4:	0000024d 	.word	0x0000024d
     6c8:	0000025d 	.word	0x0000025d

000006cc <configure_exint>:
{
     6cc:	b510      	push	{r4, lr}
     6ce:	b08c      	sub	sp, #48	; 0x30
	extint_chan_get_config_defaults(&config_extint_chan);
     6d0:	ac01      	add	r4, sp, #4
     6d2:	0020      	movs	r0, r4
     6d4:	4b0a      	ldr	r3, [pc, #40]	; (700 <configure_exint+0x34>)
     6d6:	4798      	blx	r3
	config_extint_chan.gpio_pin           = SERVO_PIN_EIC;
     6d8:	2302      	movs	r3, #2
     6da:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = SERVO_PIN_MUX;
     6dc:	2280      	movs	r2, #128	; 0x80
     6de:	0292      	lsls	r2, r2, #10
     6e0:	6062      	str	r2, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
     6e2:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
     6e4:	3301      	adds	r3, #1
     6e6:	72e3      	strb	r3, [r4, #11]
	config_events.generate_event_on_detect[2] = true;
     6e8:	a804      	add	r0, sp, #16
     6ea:	3b02      	subs	r3, #2
     6ec:	7083      	strb	r3, [r0, #2]
	extint_enable_events(&config_events);
     6ee:	4b05      	ldr	r3, [pc, #20]	; (704 <configure_exint+0x38>)
     6f0:	4798      	blx	r3
	extint_chan_set_config(SERVO_EIC_LINE, &config_extint_chan);
     6f2:	0021      	movs	r1, r4
     6f4:	2002      	movs	r0, #2
     6f6:	4b04      	ldr	r3, [pc, #16]	; (708 <configure_exint+0x3c>)
     6f8:	4798      	blx	r3
}
     6fa:	b00c      	add	sp, #48	; 0x30
     6fc:	bd10      	pop	{r4, pc}
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	00000455 	.word	0x00000455
     704:	000004e1 	.word	0x000004e1
     708:	00000469 	.word	0x00000469

0000070c <configure_timer_servo_pulse>:
{
     70c:	b510      	push	{r4, lr}
     70e:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     710:	aa01      	add	r2, sp, #4
     712:	2300      	movs	r3, #0
     714:	2100      	movs	r1, #0
     716:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     718:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     71a:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     71c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     71e:	2000      	movs	r0, #0
     720:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     722:	7291      	strb	r1, [r2, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     724:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     726:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     728:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     72a:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     72c:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     72e:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     730:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     732:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     734:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     736:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     738:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.enable_capture_on_channel[0] = true;
     73a:	3301      	adds	r3, #1
     73c:	72d3      	strb	r3, [r2, #11]
	config_tc.enable_capture_on_channel[1] = true;
     73e:	7313      	strb	r3, [r2, #12]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV16; //64
     740:	2380      	movs	r3, #128	; 0x80
     742:	00db      	lsls	r3, r3, #3
     744:	8093      	strh	r3, [r2, #4]
	tc_init(&tc_servo_capture, SERVO_TC_2, &config_tc);
     746:	4c15      	ldr	r4, [pc, #84]	; (79c <configure_timer_servo_pulse+0x90>)
     748:	4915      	ldr	r1, [pc, #84]	; (7a0 <configure_timer_servo_pulse+0x94>)
     74a:	0020      	movs	r0, r4
     74c:	4b15      	ldr	r3, [pc, #84]	; (7a4 <configure_timer_servo_pulse+0x98>)
     74e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     750:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     752:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     754:	b25b      	sxtb	r3, r3
     756:	2b00      	cmp	r3, #0
     758:	dbfb      	blt.n	752 <configure_timer_servo_pulse+0x46>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     75a:	8813      	ldrh	r3, [r2, #0]
     75c:	2102      	movs	r1, #2
     75e:	430b      	orrs	r3, r1
     760:	8013      	strh	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     762:	4b0e      	ldr	r3, [pc, #56]	; (79c <configure_timer_servo_pulse+0x90>)
     764:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     766:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     768:	b25b      	sxtb	r3, r3
     76a:	2b00      	cmp	r3, #0
     76c:	dbfb      	blt.n	766 <configure_timer_servo_pulse+0x5a>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     76e:	233b      	movs	r3, #59	; 0x3b
     770:	7313      	strb	r3, [r2, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
     772:	7393      	strb	r3, [r2, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     774:	8813      	ldrh	r3, [r2, #0]
     776:	2102      	movs	r1, #2
     778:	438b      	bics	r3, r1
     77a:	8013      	strh	r3, [r2, #0]
	Tc *const tc_module = module_inst->hw;
     77c:	4b07      	ldr	r3, [pc, #28]	; (79c <configure_timer_servo_pulse+0x90>)
     77e:	681a      	ldr	r2, [r3, #0]
	tc_module->COUNT8.EVCTRL.reg |= event_mask | events->event_action;
     780:	8953      	ldrh	r3, [r2, #10]
     782:	3133      	adds	r1, #51	; 0x33
     784:	430b      	orrs	r3, r1
     786:	8153      	strh	r3, [r2, #10]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     788:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     78a:	b25b      	sxtb	r3, r3
     78c:	2b00      	cmp	r3, #0
     78e:	dbfb      	blt.n	788 <configure_timer_servo_pulse+0x7c>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     790:	8813      	ldrh	r3, [r2, #0]
     792:	2102      	movs	r1, #2
     794:	430b      	orrs	r3, r1
     796:	8013      	strh	r3, [r2, #0]
}
     798:	b00e      	add	sp, #56	; 0x38
     79a:	bd10      	pop	{r4, pc}
     79c:	20000180 	.word	0x20000180
     7a0:	42001c00 	.word	0x42001c00
     7a4:	000018fd 	.word	0x000018fd

000007a8 <find_command>:
{
     7a8:	2391      	movs	r3, #145	; 0x91
     7aa:	005b      	lsls	r3, r3, #1
	for(i=0;i<= TOTAL_DIVISIONS;i++)
     7ac:	2200      	movs	r2, #0
     7ae:	e003      	b.n	7b8 <find_command+0x10>
     7b0:	3201      	adds	r2, #1
     7b2:	3332      	adds	r3, #50	; 0x32
     7b4:	2a13      	cmp	r2, #19
     7b6:	d007      	beq.n	7c8 <find_command+0x20>
		if((calib_input > temp-10)&&(calib_input < temp+10))
     7b8:	4283      	cmp	r3, r0
     7ba:	d2f9      	bcs.n	7b0 <find_command+0x8>
     7bc:	0019      	movs	r1, r3
     7be:	3114      	adds	r1, #20
     7c0:	4281      	cmp	r1, r0
     7c2:	d9f5      	bls.n	7b0 <find_command+0x8>
			command = i;
     7c4:	b2d0      	uxtb	r0, r2
     7c6:	e000      	b.n	7ca <find_command+0x22>
		command = UNDEFINED_COMMAND;
     7c8:	2014      	movs	r0, #20
}
     7ca:	4770      	bx	lr

000007cc <get_servo_command>:

uint16_t get_servo_command()
{
     7cc:	b510      	push	{r4, lr}
     7ce:	b082      	sub	sp, #8
	volatile static bool init_filter = false;
	volatile static bool waiting_update_value = true;
	volatile static uint32_t timer_calib = 0 ;
	
	volatile static uint32_t raw_timer_capture_even = 0;
	volatile uint32_t raw_timer_capture_odd = 0;
     7d0:	2300      	movs	r3, #0
     7d2:	9301      	str	r3, [sp, #4]
	volatile uint32_t raw_timer_capture_calib = 0;
     7d4:	9300      	str	r3, [sp, #0]
	
	uint16_t command_output = 20;
	
	if(raw_capture_update == true)
     7d6:	4b5b      	ldr	r3, [pc, #364]	; (944 <get_servo_command+0x178>)
     7d8:	781b      	ldrb	r3, [r3, #0]
	uint16_t command_output = 20;
     7da:	2014      	movs	r0, #20
	if(raw_capture_update == true)
     7dc:	2b00      	cmp	r3, #0
     7de:	d101      	bne.n	7e4 <get_servo_command+0x18>
				}
			}
		}
	}
	return command_output;
 }
     7e0:	b002      	add	sp, #8
     7e2:	bd10      	pop	{r4, pc}
		raw_capture_update = false;
     7e4:	2200      	movs	r2, #0
     7e6:	4b57      	ldr	r3, [pc, #348]	; (944 <get_servo_command+0x178>)
     7e8:	701a      	strb	r2, [r3, #0]
		if(calibration_init == false)
     7ea:	4b57      	ldr	r3, [pc, #348]	; (948 <get_servo_command+0x17c>)
     7ec:	781b      	ldrb	r3, [r3, #0]
     7ee:	2b00      	cmp	r3, #0
     7f0:	d145      	bne.n	87e <get_servo_command+0xb2>
			if(event_count%2 == 0)
     7f2:	4b56      	ldr	r3, [pc, #344]	; (94c <get_servo_command+0x180>)
     7f4:	681b      	ldr	r3, [r3, #0]
     7f6:	07db      	lsls	r3, r3, #31
     7f8:	d427      	bmi.n	84a <get_servo_command+0x7e>
				raw_timer_capture_even = raw_timer_capture;
     7fa:	4b55      	ldr	r3, [pc, #340]	; (950 <get_servo_command+0x184>)
     7fc:	681a      	ldr	r2, [r3, #0]
     7fe:	4b55      	ldr	r3, [pc, #340]	; (954 <get_servo_command+0x188>)
     800:	601a      	str	r2, [r3, #0]
			event_count++;
     802:	4a52      	ldr	r2, [pc, #328]	; (94c <get_servo_command+0x180>)
     804:	6813      	ldr	r3, [r2, #0]
     806:	3301      	adds	r3, #1
     808:	6013      	str	r3, [r2, #0]
	uint16_t command_output = 20;
     80a:	2014      	movs	r0, #20
			if(event_count == 100)
     80c:	2b64      	cmp	r3, #100	; 0x64
     80e:	d1e7      	bne.n	7e0 <get_servo_command+0x14>
				event_count = 0;
     810:	2200      	movs	r2, #0
     812:	4b4e      	ldr	r3, [pc, #312]	; (94c <get_servo_command+0x180>)
     814:	601a      	str	r2, [r3, #0]
				timer_calib = ((10000 * 1000)/ timeperiod_capture_filter) ;
     816:	4b50      	ldr	r3, [pc, #320]	; (958 <get_servo_command+0x18c>)
     818:	6819      	ldr	r1, [r3, #0]
     81a:	4850      	ldr	r0, [pc, #320]	; (95c <get_servo_command+0x190>)
     81c:	4b50      	ldr	r3, [pc, #320]	; (960 <get_servo_command+0x194>)
     81e:	4798      	blx	r3
     820:	4b50      	ldr	r3, [pc, #320]	; (964 <get_servo_command+0x198>)
     822:	6018      	str	r0, [r3, #0]
				if(((timer_calib > VALID_MIN) & (timer_calib < VALID_MAX)) == true)
     824:	681a      	ldr	r2, [r3, #0]
     826:	6819      	ldr	r1, [r3, #0]
     828:	23e1      	movs	r3, #225	; 0xe1
     82a:	009b      	lsls	r3, r3, #2
     82c:	4293      	cmp	r3, r2
     82e:	d300      	bcc.n	832 <get_servo_command+0x66>
     830:	e084      	b.n	93c <get_servo_command+0x170>
     832:	2300      	movs	r3, #0
     834:	4a4c      	ldr	r2, [pc, #304]	; (968 <get_servo_command+0x19c>)
     836:	428a      	cmp	r2, r1
     838:	415b      	adcs	r3, r3
     83a:	b2db      	uxtb	r3, r3
     83c:	2b00      	cmp	r3, #0
     83e:	d07d      	beq.n	93c <get_servo_command+0x170>
					calibration_init = true;
     840:	2201      	movs	r2, #1
     842:	4b41      	ldr	r3, [pc, #260]	; (948 <get_servo_command+0x17c>)
     844:	701a      	strb	r2, [r3, #0]
	uint16_t command_output = 20;
     846:	2014      	movs	r0, #20
     848:	e7ca      	b.n	7e0 <get_servo_command+0x14>
				raw_timer_capture     = raw_timer_capture + raw_timer_capture_even;
     84a:	4b42      	ldr	r3, [pc, #264]	; (954 <get_servo_command+0x188>)
     84c:	681b      	ldr	r3, [r3, #0]
     84e:	4a40      	ldr	r2, [pc, #256]	; (950 <get_servo_command+0x184>)
     850:	6811      	ldr	r1, [r2, #0]
     852:	468c      	mov	ip, r1
     854:	4463      	add	r3, ip
     856:	6013      	str	r3, [r2, #0]
				if(init_filter == false)
     858:	4a44      	ldr	r2, [pc, #272]	; (96c <get_servo_command+0x1a0>)
     85a:	7812      	ldrb	r2, [r2, #0]
     85c:	2a00      	cmp	r2, #0
     85e:	d104      	bne.n	86a <get_servo_command+0x9e>
					timeperiod_capture_filter = raw_timer_capture;
     860:	4a3d      	ldr	r2, [pc, #244]	; (958 <get_servo_command+0x18c>)
     862:	6013      	str	r3, [r2, #0]
					init_filter = true;
     864:	2101      	movs	r1, #1
     866:	4a41      	ldr	r2, [pc, #260]	; (96c <get_servo_command+0x1a0>)
     868:	7011      	strb	r1, [r2, #0]
				timeperiod_capture_filter = (timeperiod_capture_filter*9 + raw_timer_capture)/10;
     86a:	4c3b      	ldr	r4, [pc, #236]	; (958 <get_servo_command+0x18c>)
     86c:	6822      	ldr	r2, [r4, #0]
     86e:	00d0      	lsls	r0, r2, #3
     870:	1880      	adds	r0, r0, r2
     872:	18c0      	adds	r0, r0, r3
     874:	210a      	movs	r1, #10
     876:	4b3a      	ldr	r3, [pc, #232]	; (960 <get_servo_command+0x194>)
     878:	4798      	blx	r3
     87a:	6020      	str	r0, [r4, #0]
     87c:	e7c1      	b.n	802 <get_servo_command+0x36>
			raw_capture_update = false;
     87e:	2200      	movs	r2, #0
     880:	4b30      	ldr	r3, [pc, #192]	; (944 <get_servo_command+0x178>)
     882:	701a      	strb	r2, [r3, #0]
			if((raw_timer_capture > MIN_VALID_RAW_PULSE)&&(raw_timer_capture < MAX_VALID_RAW_PULSE ))
     884:	4b32      	ldr	r3, [pc, #200]	; (950 <get_servo_command+0x184>)
     886:	681b      	ldr	r3, [r3, #0]
     888:	0019      	movs	r1, r3
     88a:	391a      	subs	r1, #26
     88c:	39ff      	subs	r1, #255	; 0xff
     88e:	4a38      	ldr	r2, [pc, #224]	; (970 <get_servo_command+0x1a4>)
	uint16_t command_output = 20;
     890:	2014      	movs	r0, #20
			if((raw_timer_capture > MIN_VALID_RAW_PULSE)&&(raw_timer_capture < MAX_VALID_RAW_PULSE ))
     892:	4291      	cmp	r1, r2
     894:	d8a4      	bhi.n	7e0 <get_servo_command+0x14>
				raw_timer_capture_calib = ((raw_timer_capture * timer_calib)/1000 );
     896:	4a33      	ldr	r2, [pc, #204]	; (964 <get_servo_command+0x198>)
     898:	6810      	ldr	r0, [r2, #0]
     89a:	4358      	muls	r0, r3
     89c:	21fa      	movs	r1, #250	; 0xfa
     89e:	0089      	lsls	r1, r1, #2
     8a0:	4b2f      	ldr	r3, [pc, #188]	; (960 <get_servo_command+0x194>)
     8a2:	4798      	blx	r3
     8a4:	9000      	str	r0, [sp, #0]
				servo_command_present = find_command(raw_timer_capture_calib);
     8a6:	9800      	ldr	r0, [sp, #0]
     8a8:	4b32      	ldr	r3, [pc, #200]	; (974 <get_servo_command+0x1a8>)
     8aa:	4798      	blx	r3
     8ac:	4b32      	ldr	r3, [pc, #200]	; (978 <get_servo_command+0x1ac>)
     8ae:	7018      	strb	r0, [r3, #0]
				if(waiting_update_value)
     8b0:	4b32      	ldr	r3, [pc, #200]	; (97c <get_servo_command+0x1b0>)
     8b2:	781b      	ldrb	r3, [r3, #0]
     8b4:	2b00      	cmp	r3, #0
     8b6:	d010      	beq.n	8da <get_servo_command+0x10e>
					if(servo_command_present != servo_command_previous)
     8b8:	4b2f      	ldr	r3, [pc, #188]	; (978 <get_servo_command+0x1ac>)
     8ba:	781b      	ldrb	r3, [r3, #0]
     8bc:	4a30      	ldr	r2, [pc, #192]	; (980 <get_servo_command+0x1b4>)
     8be:	7812      	ldrb	r2, [r2, #0]
     8c0:	b2db      	uxtb	r3, r3
     8c2:	4293      	cmp	r3, r2
     8c4:	d03c      	beq.n	940 <get_servo_command+0x174>
						waiting_update_value = false;
     8c6:	2200      	movs	r2, #0
     8c8:	4b2c      	ldr	r3, [pc, #176]	; (97c <get_servo_command+0x1b0>)
     8ca:	701a      	strb	r2, [r3, #0]
						servo_command_previous_temp = servo_command_present;
     8cc:	4b2a      	ldr	r3, [pc, #168]	; (978 <get_servo_command+0x1ac>)
     8ce:	781b      	ldrb	r3, [r3, #0]
     8d0:	b2db      	uxtb	r3, r3
     8d2:	4a2c      	ldr	r2, [pc, #176]	; (984 <get_servo_command+0x1b8>)
     8d4:	7013      	strb	r3, [r2, #0]
	uint16_t command_output = 20;
     8d6:	2014      	movs	r0, #20
     8d8:	e782      	b.n	7e0 <get_servo_command+0x14>
					if(servo_command_present == servo_command_previous_temp)
     8da:	4b27      	ldr	r3, [pc, #156]	; (978 <get_servo_command+0x1ac>)
     8dc:	781b      	ldrb	r3, [r3, #0]
     8de:	4a29      	ldr	r2, [pc, #164]	; (984 <get_servo_command+0x1b8>)
     8e0:	7812      	ldrb	r2, [r2, #0]
     8e2:	b2db      	uxtb	r3, r3
     8e4:	4293      	cmp	r3, r2
     8e6:	d023      	beq.n	930 <get_servo_command+0x164>
						count_new_command = 0;
     8e8:	2200      	movs	r2, #0
     8ea:	4b27      	ldr	r3, [pc, #156]	; (988 <get_servo_command+0x1bc>)
     8ec:	801a      	strh	r2, [r3, #0]
						waiting_update_value = true;
     8ee:	3201      	adds	r2, #1
     8f0:	4b22      	ldr	r3, [pc, #136]	; (97c <get_servo_command+0x1b0>)
     8f2:	701a      	strb	r2, [r3, #0]
					if(count_new_command > 5)
     8f4:	4b24      	ldr	r3, [pc, #144]	; (988 <get_servo_command+0x1bc>)
     8f6:	881b      	ldrh	r3, [r3, #0]
     8f8:	b29b      	uxth	r3, r3
	uint16_t command_output = 20;
     8fa:	2014      	movs	r0, #20
					if(count_new_command > 5)
     8fc:	2b05      	cmp	r3, #5
     8fe:	d800      	bhi.n	902 <get_servo_command+0x136>
     900:	e76e      	b.n	7e0 <get_servo_command+0x14>
						LED_on(PLAY_LED);
     902:	380c      	subs	r0, #12
     904:	4b21      	ldr	r3, [pc, #132]	; (98c <get_servo_command+0x1c0>)
     906:	4798      	blx	r3
						delay_cycles_ms(500);
     908:	20fa      	movs	r0, #250	; 0xfa
     90a:	0040      	lsls	r0, r0, #1
     90c:	4b20      	ldr	r3, [pc, #128]	; (990 <get_servo_command+0x1c4>)
     90e:	4798      	blx	r3
						LED_off(PLAY_LED);
     910:	2008      	movs	r0, #8
     912:	4b20      	ldr	r3, [pc, #128]	; (994 <get_servo_command+0x1c8>)
     914:	4798      	blx	r3
						count_new_command = 0;
     916:	2200      	movs	r2, #0
     918:	4b1b      	ldr	r3, [pc, #108]	; (988 <get_servo_command+0x1bc>)
     91a:	801a      	strh	r2, [r3, #0]
						servo_command_previous = servo_command_present;
     91c:	4a16      	ldr	r2, [pc, #88]	; (978 <get_servo_command+0x1ac>)
     91e:	7813      	ldrb	r3, [r2, #0]
     920:	b2db      	uxtb	r3, r3
     922:	4917      	ldr	r1, [pc, #92]	; (980 <get_servo_command+0x1b4>)
     924:	700b      	strb	r3, [r1, #0]
						command_output = servo_command_present;
     926:	7810      	ldrb	r0, [r2, #0]
						waiting_update_value = true;
     928:	2201      	movs	r2, #1
     92a:	4b14      	ldr	r3, [pc, #80]	; (97c <get_servo_command+0x1b0>)
     92c:	701a      	strb	r2, [r3, #0]
     92e:	e757      	b.n	7e0 <get_servo_command+0x14>
						count_new_command++;
     930:	4a15      	ldr	r2, [pc, #84]	; (988 <get_servo_command+0x1bc>)
     932:	8813      	ldrh	r3, [r2, #0]
     934:	3301      	adds	r3, #1
     936:	b29b      	uxth	r3, r3
     938:	8013      	strh	r3, [r2, #0]
     93a:	e7db      	b.n	8f4 <get_servo_command+0x128>
	uint16_t command_output = 20;
     93c:	2014      	movs	r0, #20
     93e:	e74f      	b.n	7e0 <get_servo_command+0x14>
     940:	2014      	movs	r0, #20
     942:	e74d      	b.n	7e0 <get_servo_command+0x14>
     944:	200000c9 	.word	0x200000c9
     948:	200000c0 	.word	0x200000c0
     94c:	200000c4 	.word	0x200000c4
     950:	200000cc 	.word	0x200000cc
     954:	200000d0 	.word	0x200000d0
     958:	200000d8 	.word	0x200000d8
     95c:	00989680 	.word	0x00989680
     960:	000026c1 	.word	0x000026c1
     964:	200000dc 	.word	0x200000dc
     968:	0000044b 	.word	0x0000044b
     96c:	200000c8 	.word	0x200000c8
     970:	000003aa 	.word	0x000003aa
     974:	000007a9 	.word	0x000007a9
     978:	200000d4 	.word	0x200000d4
     97c:	20000015 	.word	0x20000015
     980:	20000014 	.word	0x20000014
     984:	200000d5 	.word	0x200000d5
     988:	200000c2 	.word	0x200000c2
     98c:	00001d3d 	.word	0x00001d3d
     990:	0000105d 	.word	0x0000105d
     994:	00001d61 	.word	0x00001d61

00000998 <init_servo_capture>:
	configure_event_user(&servo_pulse_event);
	configure_event_interrupt(&servo_pulse_event, &hook);
}

void init_servo_capture()
{
     998:	b510      	push	{r4, lr}
     99a:	b088      	sub	sp, #32
	struct extint_chan_conf config_extint_chan;
	struct events_hook      hook;
	struct events_resource  servo_pulse_event;
	configure_event_channel(&servo_pulse_event);
     99c:	4668      	mov	r0, sp
     99e:	4b0d      	ldr	r3, [pc, #52]	; (9d4 <init_servo_capture+0x3c>)
     9a0:	4798      	blx	r3
	events_attach_user(resource, CONF_EVENT_USER);
     9a2:	210b      	movs	r1, #11
     9a4:	4668      	mov	r0, sp
     9a6:	4b0c      	ldr	r3, [pc, #48]	; (9d8 <init_servo_capture+0x40>)
     9a8:	4798      	blx	r3
	events_create_hook(hook, event_counter);
     9aa:	490c      	ldr	r1, [pc, #48]	; (9dc <init_servo_capture+0x44>)
     9ac:	a802      	add	r0, sp, #8
     9ae:	4b0c      	ldr	r3, [pc, #48]	; (9e0 <init_servo_capture+0x48>)
     9b0:	4798      	blx	r3
	events_add_hook(resource, hook);
     9b2:	a902      	add	r1, sp, #8
     9b4:	4668      	mov	r0, sp
     9b6:	4b0b      	ldr	r3, [pc, #44]	; (9e4 <init_servo_capture+0x4c>)
     9b8:	4798      	blx	r3
	events_enable_interrupt_source(resource, EVENTS_INTERRUPT_DETECT);
     9ba:	2101      	movs	r1, #1
     9bc:	4668      	mov	r0, sp
     9be:	4b0a      	ldr	r3, [pc, #40]	; (9e8 <init_servo_capture+0x50>)
     9c0:	4798      	blx	r3
	configure_event_user(&servo_pulse_event);
	//delay_cycles_ms(100);
	configure_event_interrupt(&servo_pulse_event, &hook);
	//delay_cycles_ms(100);
	//configure_events();
	configure_timer_servo_pulse();
     9c2:	4b0a      	ldr	r3, [pc, #40]	; (9ec <init_servo_capture+0x54>)
     9c4:	4798      	blx	r3
	//delay_cycles_ms(100);
	configure_exint(&config_extint_chan);
     9c6:	a805      	add	r0, sp, #20
     9c8:	4b09      	ldr	r3, [pc, #36]	; (9f0 <init_servo_capture+0x58>)
     9ca:	4798      	blx	r3
	//delay_cycles_ms(100);
	while(1)
	{
		main_control_loop_1();
     9cc:	4c09      	ldr	r4, [pc, #36]	; (9f4 <init_servo_capture+0x5c>)
     9ce:	47a0      	blx	r4
     9d0:	e7fd      	b.n	9ce <init_servo_capture+0x36>
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	0000069d 	.word	0x0000069d
     9d8:	0000030d 	.word	0x0000030d
     9dc:	00000659 	.word	0x00000659
     9e0:	000000ed 	.word	0x000000ed
     9e4:	000000f9 	.word	0x000000f9
     9e8:	0000012d 	.word	0x0000012d
     9ec:	0000070d 	.word	0x0000070d
     9f0:	000006cd 	.word	0x000006cd
     9f4:	00000a95 	.word	0x00000a95

000009f8 <change_volume>:
	}
	spi_write_stop();
}

void change_volume(uint8_t volume)
{
     9f8:	b510      	push	{r4, lr}
     9fa:	0004      	movs	r4, r0
	spi_write_stop();
     9fc:	4b0e      	ldr	r3, [pc, #56]	; (a38 <change_volume+0x40>)
     9fe:	4798      	blx	r3
	switch (volume)
     a00:	2c05      	cmp	r4, #5
     a02:	d806      	bhi.n	a12 <change_volume+0x1a>
     a04:	00a4      	lsls	r4, r4, #2
     a06:	4b0d      	ldr	r3, [pc, #52]	; (a3c <change_volume+0x44>)
     a08:	591b      	ldr	r3, [r3, r4]
     a0a:	469f      	mov	pc, r3
	{
		case VOLUME_1:
			spi_write_apc(wr_apc_2_volume_1);
     a0c:	480c      	ldr	r0, [pc, #48]	; (a40 <change_volume+0x48>)
     a0e:	4b0d      	ldr	r3, [pc, #52]	; (a44 <change_volume+0x4c>)
     a10:	4798      	blx	r3
			spi_write_apc(wr_apc_2_volume_5);
			break;
		default:
			break;
	}
	spi_write_stop();
     a12:	4b09      	ldr	r3, [pc, #36]	; (a38 <change_volume+0x40>)
     a14:	4798      	blx	r3
}
     a16:	bd10      	pop	{r4, pc}
			spi_write_apc(wr_apc_2_volume_2);
     a18:	480b      	ldr	r0, [pc, #44]	; (a48 <change_volume+0x50>)
     a1a:	4b0a      	ldr	r3, [pc, #40]	; (a44 <change_volume+0x4c>)
     a1c:	4798      	blx	r3
			break;
     a1e:	e7f8      	b.n	a12 <change_volume+0x1a>
			spi_write_apc(wr_apc_2_volume_3);
     a20:	480a      	ldr	r0, [pc, #40]	; (a4c <change_volume+0x54>)
     a22:	4b08      	ldr	r3, [pc, #32]	; (a44 <change_volume+0x4c>)
     a24:	4798      	blx	r3
			break;
     a26:	e7f4      	b.n	a12 <change_volume+0x1a>
			spi_write_apc(wr_apc_2_volume_4);
     a28:	4809      	ldr	r0, [pc, #36]	; (a50 <change_volume+0x58>)
     a2a:	4b06      	ldr	r3, [pc, #24]	; (a44 <change_volume+0x4c>)
     a2c:	4798      	blx	r3
			break;
     a2e:	e7f0      	b.n	a12 <change_volume+0x1a>
			spi_write_apc(wr_apc_2_volume_5);
     a30:	4808      	ldr	r0, [pc, #32]	; (a54 <change_volume+0x5c>)
     a32:	4b04      	ldr	r3, [pc, #16]	; (a44 <change_volume+0x4c>)
     a34:	4798      	blx	r3
			break;
     a36:	e7ec      	b.n	a12 <change_volume+0x1a>
     a38:	00000b5d 	.word	0x00000b5d
     a3c:	00002830 	.word	0x00002830
     a40:	20000018 	.word	0x20000018
     a44:	00000b49 	.word	0x00000b49
     a48:	2000001c 	.word	0x2000001c
     a4c:	20000020 	.word	0x20000020
     a50:	20000024 	.word	0x20000024
     a54:	20000028 	.word	0x20000028

00000a58 <burp_box_set_volume_track>:
	change_input(input);
}


void burp_box_set_volume_track(uint8_t volume,uint8_t track_no)
{
     a58:	b570      	push	{r4, r5, r6, lr}
     a5a:	0005      	movs	r5, r0
     a5c:	000c      	movs	r4, r1
	if(track_pointer != track_no)
     a5e:	4b09      	ldr	r3, [pc, #36]	; (a84 <burp_box_set_volume_track+0x2c>)
     a60:	781b      	ldrb	r3, [r3, #0]
     a62:	b2db      	uxtb	r3, r3
     a64:	428b      	cmp	r3, r1
     a66:	d005      	beq.n	a74 <burp_box_set_volume_track+0x1c>
	{
		track_pointer = track_no;
     a68:	4b06      	ldr	r3, [pc, #24]	; (a84 <burp_box_set_volume_track+0x2c>)
     a6a:	7019      	strb	r1, [r3, #0]
		LED_track(track_no - 1);
     a6c:	1e48      	subs	r0, r1, #1
     a6e:	b2c0      	uxtb	r0, r0
     a70:	4b05      	ldr	r3, [pc, #20]	; (a88 <burp_box_set_volume_track+0x30>)
     a72:	4798      	blx	r3
	}
	change_volume(volume);
     a74:	0028      	movs	r0, r5
     a76:	4b05      	ldr	r3, [pc, #20]	; (a8c <burp_box_set_volume_track+0x34>)
     a78:	4798      	blx	r3
	burp_box_play(track_no);
     a7a:	0020      	movs	r0, r4
     a7c:	4b04      	ldr	r3, [pc, #16]	; (a90 <burp_box_set_volume_track+0x38>)
     a7e:	4798      	blx	r3
}
     a80:	bd70      	pop	{r4, r5, r6, pc}
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	20000122 	.word	0x20000122
     a88:	00001d85 	.word	0x00001d85
     a8c:	000009f9 	.word	0x000009f9
     a90:	00000d21 	.word	0x00000d21

00000a94 <main_control_loop_1>:
#include "spi_control.h"
#include "bsp.h"
#include "PWM_capture.h"

void main_control_loop_1()
{
     a94:	b510      	push	{r4, lr}
	uint16_t servo_input = 0;
	uint16_t overall_input = 0;
	//enum buttons_state button_input;
	
	//Servo input -- here
	servo_input  = get_servo_command();
     a96:	4b0c      	ldr	r3, [pc, #48]	; (ac8 <main_control_loop_1+0x34>)
     a98:	4798      	blx	r3
     a9a:	0004      	movs	r4, r0
	servo_input  = servo_input << 8;
	button_input  = check_input_buttons();
     a9c:	4b0b      	ldr	r3, [pc, #44]	; (acc <main_control_loop_1+0x38>)
     a9e:	4798      	blx	r3
	overall_input = input_buttons | button_input ;
     aa0:	4b0b      	ldr	r3, [pc, #44]	; (ad0 <main_control_loop_1+0x3c>)
     aa2:	781b      	ldrb	r3, [r3, #0]
     aa4:	4303      	orrs	r3, r0
     aa6:	b2db      	uxtb	r3, r3
	if(overall_input == 0 )
     aa8:	2b00      	cmp	r3, #0
     aaa:	d106      	bne.n	aba <main_control_loop_1+0x26>
	{
		overall_input = input_buttons | button_input | servo_input ;
     aac:	4b08      	ldr	r3, [pc, #32]	; (ad0 <main_control_loop_1+0x3c>)
     aae:	781b      	ldrb	r3, [r3, #0]
     ab0:	4303      	orrs	r3, r0
     ab2:	b2db      	uxtb	r3, r3
	servo_input  = servo_input << 8;
     ab4:	0224      	lsls	r4, r4, #8
		overall_input = input_buttons | button_input | servo_input ;
     ab6:	4323      	orrs	r3, r4
     ab8:	b29b      	uxth	r3, r3
	}
	input_buttons = 0;
     aba:	2100      	movs	r1, #0
     abc:	4a04      	ldr	r2, [pc, #16]	; (ad0 <main_control_loop_1+0x3c>)
     abe:	7011      	strb	r1, [r2, #0]
	spi_main_loop_1(overall_input); 
     ac0:	0018      	movs	r0, r3
     ac2:	4b04      	ldr	r3, [pc, #16]	; (ad4 <main_control_loop_1+0x40>)
     ac4:	4798      	blx	r3

}
     ac6:	bd10      	pop	{r4, pc}
     ac8:	000007cd 	.word	0x000007cd
     acc:	00001db1 	.word	0x00001db1
     ad0:	20000120 	.word	0x20000120
     ad4:	00000e59 	.word	0x00000e59

00000ad8 <spi_write_global_erase>:
#include "delay.h"
#include "bsp.h"
#include "PWM_capture_control.h"

void spi_write_global_erase()
{
     ad8:	b510      	push	{r4, lr}
	spi_transceive(wr_buffer_global_erase , rd_buffer , BUF_LENGTH);
     ada:	2202      	movs	r2, #2
     adc:	4902      	ldr	r1, [pc, #8]	; (ae8 <spi_write_global_erase+0x10>)
     ade:	4803      	ldr	r0, [pc, #12]	; (aec <spi_write_global_erase+0x14>)
     ae0:	4b03      	ldr	r3, [pc, #12]	; (af0 <spi_write_global_erase+0x18>)
     ae2:	4798      	blx	r3
}
     ae4:	bd10      	pop	{r4, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	200000e0 	.word	0x200000e0
     aec:	20000054 	.word	0x20000054
     af0:	00001f45 	.word	0x00001f45

00000af4 <spi_write_reset>:

void spi_write_reset()
{
     af4:	b510      	push	{r4, lr}
	spi_transceive(wr_buffer_reset , rd_buffer , BUF_LENGTH);
     af6:	2202      	movs	r2, #2
     af8:	4902      	ldr	r1, [pc, #8]	; (b04 <spi_write_reset+0x10>)
     afa:	4803      	ldr	r0, [pc, #12]	; (b08 <spi_write_reset+0x14>)
     afc:	4b03      	ldr	r3, [pc, #12]	; (b0c <spi_write_reset+0x18>)
     afe:	4798      	blx	r3
}
     b00:	bd10      	pop	{r4, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	200000e0 	.word	0x200000e0
     b08:	2000008c 	.word	0x2000008c
     b0c:	00001f45 	.word	0x00001f45

00000b10 <spi_write_power_on>:

void spi_write_power_on()
{
     b10:	b510      	push	{r4, lr}
	spi_transceive ( wr_buffer_power_on , rd_buffer , BUF_LENGTH);
     b12:	2202      	movs	r2, #2
     b14:	4902      	ldr	r1, [pc, #8]	; (b20 <spi_write_power_on+0x10>)
     b16:	4803      	ldr	r0, [pc, #12]	; (b24 <spi_write_power_on+0x14>)
     b18:	4b03      	ldr	r3, [pc, #12]	; (b28 <spi_write_power_on+0x18>)
     b1a:	4798      	blx	r3
}
     b1c:	bd10      	pop	{r4, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	200000e0 	.word	0x200000e0
     b24:	20000070 	.word	0x20000070
     b28:	00001f45 	.word	0x00001f45

00000b2c <spi_write_clear_int>:

void spi_write_clear_int()
{
     b2c:	b510      	push	{r4, lr}
	spi_transceive ( wr_buffer_clr_init , rd_buffer , BUF_LENGTH);
     b2e:	2202      	movs	r2, #2
     b30:	4902      	ldr	r1, [pc, #8]	; (b3c <spi_write_clear_int+0x10>)
     b32:	4803      	ldr	r0, [pc, #12]	; (b40 <spi_write_clear_int+0x14>)
     b34:	4b03      	ldr	r3, [pc, #12]	; (b44 <spi_write_clear_int+0x18>)
     b36:	4798      	blx	r3
}
     b38:	bd10      	pop	{r4, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	200000e0 	.word	0x200000e0
     b40:	20000038 	.word	0x20000038
     b44:	00001f45 	.word	0x00001f45

00000b48 <spi_write_apc>:

void spi_write_apc(uint8_t* write_apc)
{
     b48:	b510      	push	{r4, lr}
	spi_transceive( write_apc , rd_buffer_3 ,BUF_LENGTH_3);
     b4a:	2203      	movs	r2, #3
     b4c:	4901      	ldr	r1, [pc, #4]	; (b54 <spi_write_apc+0xc>)
     b4e:	4b02      	ldr	r3, [pc, #8]	; (b58 <spi_write_apc+0x10>)
     b50:	4798      	blx	r3
}
     b52:	bd10      	pop	{r4, pc}
     b54:	200000e4 	.word	0x200000e4
     b58:	00001f45 	.word	0x00001f45

00000b5c <spi_write_stop>:

void spi_write_stop()
{
     b5c:	b510      	push	{r4, lr}
	spi_transceive(wr_buffer_stop,rd_buffer, BUF_LENGTH);
     b5e:	2202      	movs	r2, #2
     b60:	4902      	ldr	r1, [pc, #8]	; (b6c <spi_write_stop+0x10>)
     b62:	4803      	ldr	r0, [pc, #12]	; (b70 <spi_write_stop+0x14>)
     b64:	4b03      	ldr	r3, [pc, #12]	; (b74 <spi_write_stop+0x18>)
     b66:	4798      	blx	r3
}
     b68:	bd10      	pop	{r4, pc}
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	200000e0 	.word	0x200000e0
     b70:	20000094 	.word	0x20000094
     b74:	00001f45 	.word	0x00001f45

00000b78 <delay_spi>:

void delay_spi()
{
     b78:	b510      	push	{r4, lr}
	delay_cycles_ms(100); //Datasheet specific
     b7a:	2064      	movs	r0, #100	; 0x64
     b7c:	4b01      	ldr	r3, [pc, #4]	; (b84 <delay_spi+0xc>)
     b7e:	4798      	blx	r3
}
     b80:	bd10      	pop	{r4, pc}
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	0000105d 	.word	0x0000105d

00000b88 <init_burp_box>:

void init_burp_box()
{
     b88:	b510      	push	{r4, lr}
	//Reset the device 
	spi_write_reset();
     b8a:	4b09      	ldr	r3, [pc, #36]	; (bb0 <init_burp_box+0x28>)
     b8c:	4798      	blx	r3
	delay_spi();
     b8e:	4c09      	ldr	r4, [pc, #36]	; (bb4 <init_burp_box+0x2c>)
     b90:	47a0      	blx	r4
	
	//Power on the device
	spi_write_power_on();
     b92:	4b09      	ldr	r3, [pc, #36]	; (bb8 <init_burp_box+0x30>)
     b94:	4798      	blx	r3
	delay_spi();
     b96:	47a0      	blx	r4
	
	//Cleat Interrupt
	spi_write_clear_int();
     b98:	4b08      	ldr	r3, [pc, #32]	; (bbc <init_burp_box+0x34>)
     b9a:	4798      	blx	r3
	delay_spi();
     b9c:	47a0      	blx	r4
	
	//Choose input
	spi_write_apc(wr_apc_2_ideal); //Volume init -- High 
     b9e:	4808      	ldr	r0, [pc, #32]	; (bc0 <init_burp_box+0x38>)
     ba0:	4b08      	ldr	r3, [pc, #32]	; (bc4 <init_burp_box+0x3c>)
     ba2:	4798      	blx	r3
	delay_spi();	
     ba4:	47a0      	blx	r4

	
	//trackpointer -- Initialized to one
	track_pointer = 1;
     ba6:	2201      	movs	r2, #1
     ba8:	4b07      	ldr	r3, [pc, #28]	; (bc8 <init_burp_box+0x40>)
     baa:	701a      	strb	r2, [r3, #0]
}
     bac:	bd10      	pop	{r4, pc}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	00000af5 	.word	0x00000af5
     bb4:	00000b79 	.word	0x00000b79
     bb8:	00000b11 	.word	0x00000b11
     bbc:	00000b2d 	.word	0x00000b2d
     bc0:	2000002c 	.word	0x2000002c
     bc4:	00000b49 	.word	0x00000b49
     bc8:	20000122 	.word	0x20000122

00000bcc <wait_burp_box>:
	}
	spi_write_stop();
}

void wait_burp_box(uint8_t operation)
{
     bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bce:	0006      	movs	r6, r0
	bool burp_box_busy = true;
	interrupt_occured = false;
     bd0:	4b17      	ldr	r3, [pc, #92]	; (c30 <wait_burp_box+0x64>)
     bd2:	2200      	movs	r2, #0
     bd4:	701a      	strb	r2, [r3, #0]
	while(burp_box_busy == true /*&& time_out != true*/ && interrupt_occured !=true )
     bd6:	781b      	ldrb	r3, [r3, #0]
     bd8:	2b00      	cmp	r3, #0
     bda:	d126      	bne.n	c2a <wait_burp_box+0x5e>
	{
		delay_cycles_ms(200);
     bdc:	4f15      	ldr	r7, [pc, #84]	; (c34 <wait_burp_box+0x68>)
		spi_transceive( wr_buffer_status_pointer , rd_buffer_3 ,BUF_LENGTH_3);
     bde:	4d16      	ldr	r5, [pc, #88]	; (c38 <wait_burp_box+0x6c>)
     be0:	4c16      	ldr	r4, [pc, #88]	; (c3c <wait_burp_box+0x70>)
     be2:	e009      	b.n	bf8 <wait_burp_box+0x2c>
		switch(operation)
		{
			case RECORD_OPERATION:
				burp_box_busy = rd_buffer_3[2] & RECORD_READY_MASK;
     be4:	4b14      	ldr	r3, [pc, #80]	; (c38 <wait_burp_box+0x6c>)
     be6:	789b      	ldrb	r3, [r3, #2]
     be8:	071b      	lsls	r3, r3, #28
     bea:	0fdb      	lsrs	r3, r3, #31
	while(burp_box_busy == true /*&& time_out != true*/ && interrupt_occured !=true )
     bec:	2b00      	cmp	r3, #0
     bee:	d01c      	beq.n	c2a <wait_burp_box+0x5e>
     bf0:	4b0f      	ldr	r3, [pc, #60]	; (c30 <wait_burp_box+0x64>)
     bf2:	781b      	ldrb	r3, [r3, #0]
     bf4:	2b00      	cmp	r3, #0
     bf6:	d118      	bne.n	c2a <wait_burp_box+0x5e>
		delay_cycles_ms(200);
     bf8:	20c8      	movs	r0, #200	; 0xc8
     bfa:	47b8      	blx	r7
		spi_transceive( wr_buffer_status_pointer , rd_buffer_3 ,BUF_LENGTH_3);
     bfc:	2203      	movs	r2, #3
     bfe:	0029      	movs	r1, r5
     c00:	0020      	movs	r0, r4
     c02:	4b0f      	ldr	r3, [pc, #60]	; (c40 <wait_burp_box+0x74>)
     c04:	4798      	blx	r3
		switch(operation)
     c06:	2e02      	cmp	r6, #2
     c08:	d005      	beq.n	c16 <wait_burp_box+0x4a>
     c0a:	2e03      	cmp	r6, #3
     c0c:	d008      	beq.n	c20 <wait_burp_box+0x54>
     c0e:	2301      	movs	r3, #1
     c10:	2e01      	cmp	r6, #1
     c12:	d1eb      	bne.n	bec <wait_burp_box+0x20>
     c14:	e7e6      	b.n	be4 <wait_burp_box+0x18>
				break;
				
			case PLAY_OPERATION:
				burp_box_busy = rd_buffer_3[2] & PLAY_READY_MASK;
     c16:	4b08      	ldr	r3, [pc, #32]	; (c38 <wait_burp_box+0x6c>)
     c18:	789b      	ldrb	r3, [r3, #2]
     c1a:	075b      	lsls	r3, r3, #29
     c1c:	0fdb      	lsrs	r3, r3, #31
				break;
     c1e:	e7e5      	b.n	bec <wait_burp_box+0x20>
			case ERASE_OPERATION:
				burp_box_busy = rd_buffer_3[2] & ERASE_READY_MASK;
     c20:	4b05      	ldr	r3, [pc, #20]	; (c38 <wait_burp_box+0x6c>)
     c22:	789b      	ldrb	r3, [r3, #2]
     c24:	079b      	lsls	r3, r3, #30
     c26:	0fdb      	lsrs	r3, r3, #31
				break;
     c28:	e7e0      	b.n	bec <wait_burp_box+0x20>
			default:
			    break;
		}
		
	}
	spi_write_stop();
     c2a:	4b06      	ldr	r3, [pc, #24]	; (c44 <wait_burp_box+0x78>)
     c2c:	4798      	blx	r3
}
     c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c30:	20000121 	.word	0x20000121
     c34:	0000105d 	.word	0x0000105d
     c38:	200000e4 	.word	0x200000e4
     c3c:	20000090 	.word	0x20000090
     c40:	00001f45 	.word	0x00001f45
     c44:	00000b5d 	.word	0x00000b5d

00000c48 <burp_box_record>:

void burp_box_record(uint8_t track_no)
{
     c48:	b510      	push	{r4, lr}
     c4a:	0004      	movs	r4, r0
	LED_on(RECORD_LED);
     c4c:	2005      	movs	r0, #5
     c4e:	4b12      	ldr	r3, [pc, #72]	; (c98 <burp_box_record+0x50>)
     c50:	4798      	blx	r3
	switch (track_no)
     c52:	2c02      	cmp	r4, #2
     c54:	d013      	beq.n	c7e <burp_box_record+0x36>
     c56:	2c03      	cmp	r4, #3
     c58:	d017      	beq.n	c8a <burp_box_record+0x42>
     c5a:	2c01      	cmp	r4, #1
     c5c:	d009      	beq.n	c72 <burp_box_record+0x2a>
			break;
	}
	
	//Wait till the operation is complete
	//wait_burp_box_2();
	wait_burp_box(RECORD_OPERATION);
     c5e:	2001      	movs	r0, #1
     c60:	4b0e      	ldr	r3, [pc, #56]	; (c9c <burp_box_record+0x54>)
     c62:	4798      	blx	r3
	spi_write_apc(wr_apc_2_ideal);
     c64:	480e      	ldr	r0, [pc, #56]	; (ca0 <burp_box_record+0x58>)
     c66:	4b0f      	ldr	r3, [pc, #60]	; (ca4 <burp_box_record+0x5c>)
     c68:	4798      	blx	r3
	LED_off(RECORD_LED);
     c6a:	2005      	movs	r0, #5
     c6c:	4b0e      	ldr	r3, [pc, #56]	; (ca8 <burp_box_record+0x60>)
     c6e:	4798      	blx	r3
}
     c70:	bd10      	pop	{r4, pc}
			spi_transceive( wr_buffer_record_set_1 , rd_buffer_6 ,BUF_LENGTH_6);
     c72:	2206      	movs	r2, #6
     c74:	490d      	ldr	r1, [pc, #52]	; (cac <burp_box_record+0x64>)
     c76:	480e      	ldr	r0, [pc, #56]	; (cb0 <burp_box_record+0x68>)
     c78:	4b0e      	ldr	r3, [pc, #56]	; (cb4 <burp_box_record+0x6c>)
     c7a:	4798      	blx	r3
			break;
     c7c:	e7ef      	b.n	c5e <burp_box_record+0x16>
			spi_transceive( wr_buffer_record_set_2 , rd_buffer_6 ,BUF_LENGTH_6);
     c7e:	2206      	movs	r2, #6
     c80:	490a      	ldr	r1, [pc, #40]	; (cac <burp_box_record+0x64>)
     c82:	480d      	ldr	r0, [pc, #52]	; (cb8 <burp_box_record+0x70>)
     c84:	4b0b      	ldr	r3, [pc, #44]	; (cb4 <burp_box_record+0x6c>)
     c86:	4798      	blx	r3
			break;
     c88:	e7e9      	b.n	c5e <burp_box_record+0x16>
			spi_transceive( wr_buffer_record_set_3 , rd_buffer_6 ,BUF_LENGTH_6);
     c8a:	2206      	movs	r2, #6
     c8c:	4907      	ldr	r1, [pc, #28]	; (cac <burp_box_record+0x64>)
     c8e:	480b      	ldr	r0, [pc, #44]	; (cbc <burp_box_record+0x74>)
     c90:	4b08      	ldr	r3, [pc, #32]	; (cb4 <burp_box_record+0x6c>)
     c92:	4798      	blx	r3
			break;
     c94:	e7e3      	b.n	c5e <burp_box_record+0x16>
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	00001d3d 	.word	0x00001d3d
     c9c:	00000bcd 	.word	0x00000bcd
     ca0:	2000002c 	.word	0x2000002c
     ca4:	00000b49 	.word	0x00000b49
     ca8:	00001d61 	.word	0x00001d61
     cac:	200000e8 	.word	0x200000e8
     cb0:	20000074 	.word	0x20000074
     cb4:	00001f45 	.word	0x00001f45
     cb8:	2000007c 	.word	0x2000007c
     cbc:	20000084 	.word	0x20000084

00000cc0 <burp_box_erase>:

void burp_box_erase(uint8_t track_no)
{
     cc0:	b510      	push	{r4, lr}
     cc2:	0004      	movs	r4, r0
	spi_write_stop();
     cc4:	4b0f      	ldr	r3, [pc, #60]	; (d04 <burp_box_erase+0x44>)
     cc6:	4798      	blx	r3
	switch(track_no)
     cc8:	2c02      	cmp	r4, #2
     cca:	d00f      	beq.n	cec <burp_box_erase+0x2c>
     ccc:	2c03      	cmp	r4, #3
     cce:	d013      	beq.n	cf8 <burp_box_erase+0x38>
     cd0:	2c01      	cmp	r4, #1
     cd2:	d005      	beq.n	ce0 <burp_box_erase+0x20>
			 
		default:
			 break;
	}
	//wait_burp_box_2();
	wait_burp_box(ERASE_OPERATION);
     cd4:	2003      	movs	r0, #3
     cd6:	4b0c      	ldr	r3, [pc, #48]	; (d08 <burp_box_erase+0x48>)
     cd8:	4798      	blx	r3
	spi_write_stop();
     cda:	4b0a      	ldr	r3, [pc, #40]	; (d04 <burp_box_erase+0x44>)
     cdc:	4798      	blx	r3
	//delay_cycles_ms(300);
}
     cde:	bd10      	pop	{r4, pc}
		     spi_transceive( wr_buffer_erase_set_1 , rd_buffer_6 ,BUF_LENGTH_6);
     ce0:	2206      	movs	r2, #6
     ce2:	490a      	ldr	r1, [pc, #40]	; (d0c <burp_box_erase+0x4c>)
     ce4:	480a      	ldr	r0, [pc, #40]	; (d10 <burp_box_erase+0x50>)
     ce6:	4b0b      	ldr	r3, [pc, #44]	; (d14 <burp_box_erase+0x54>)
     ce8:	4798      	blx	r3
			 break;
     cea:	e7f3      	b.n	cd4 <burp_box_erase+0x14>
			 spi_transceive( wr_buffer_erase_set_2 , rd_buffer_6 ,BUF_LENGTH_6);
     cec:	2206      	movs	r2, #6
     cee:	4907      	ldr	r1, [pc, #28]	; (d0c <burp_box_erase+0x4c>)
     cf0:	4809      	ldr	r0, [pc, #36]	; (d18 <burp_box_erase+0x58>)
     cf2:	4b08      	ldr	r3, [pc, #32]	; (d14 <burp_box_erase+0x54>)
     cf4:	4798      	blx	r3
			 break;
     cf6:	e7ed      	b.n	cd4 <burp_box_erase+0x14>
			spi_transceive( wr_buffer_erase_set_3 , rd_buffer_6 ,BUF_LENGTH_6);
     cf8:	2206      	movs	r2, #6
     cfa:	4904      	ldr	r1, [pc, #16]	; (d0c <burp_box_erase+0x4c>)
     cfc:	4807      	ldr	r0, [pc, #28]	; (d1c <burp_box_erase+0x5c>)
     cfe:	4b05      	ldr	r3, [pc, #20]	; (d14 <burp_box_erase+0x54>)
     d00:	4798      	blx	r3
			 break;
     d02:	e7e7      	b.n	cd4 <burp_box_erase+0x14>
     d04:	00000b5d 	.word	0x00000b5d
     d08:	00000bcd 	.word	0x00000bcd
     d0c:	200000e8 	.word	0x200000e8
     d10:	2000003c 	.word	0x2000003c
     d14:	00001f45 	.word	0x00001f45
     d18:	20000044 	.word	0x20000044
     d1c:	2000004c 	.word	0x2000004c

00000d20 <burp_box_play>:

void burp_box_play(uint8_t track_no)
{
     d20:	b510      	push	{r4, lr}
     d22:	0004      	movs	r4, r0
	//time_out = false;
	//Clear interrupts
	LED_on(PLAY_LED);
     d24:	2008      	movs	r0, #8
     d26:	4b11      	ldr	r3, [pc, #68]	; (d6c <burp_box_play+0x4c>)
     d28:	4798      	blx	r3
	spi_write_clear_int();
     d2a:	4b11      	ldr	r3, [pc, #68]	; (d70 <burp_box_play+0x50>)
     d2c:	4798      	blx	r3
	switch (track_no)
     d2e:	2c02      	cmp	r4, #2
     d30:	d010      	beq.n	d54 <burp_box_play+0x34>
     d32:	2c03      	cmp	r4, #3
     d34:	d014      	beq.n	d60 <burp_box_play+0x40>
     d36:	2c01      	cmp	r4, #1
     d38:	d006      	beq.n	d48 <burp_box_play+0x28>
			break;
	}
	
	//Wait till the operation is complete
	//LED_on(PLAY_LED);
	wait_burp_box(PLAY_OPERATION);
     d3a:	2002      	movs	r0, #2
     d3c:	4b0d      	ldr	r3, [pc, #52]	; (d74 <burp_box_play+0x54>)
     d3e:	4798      	blx	r3
	LED_off(PLAY_LED);
     d40:	2008      	movs	r0, #8
     d42:	4b0d      	ldr	r3, [pc, #52]	; (d78 <burp_box_play+0x58>)
     d44:	4798      	blx	r3
}
     d46:	bd10      	pop	{r4, pc}
			spi_transceive( wr_buffer_play_set_1 , rd_buffer_6 ,BUF_LENGTH_6);
     d48:	2206      	movs	r2, #6
     d4a:	490c      	ldr	r1, [pc, #48]	; (d7c <burp_box_play+0x5c>)
     d4c:	480c      	ldr	r0, [pc, #48]	; (d80 <burp_box_play+0x60>)
     d4e:	4b0d      	ldr	r3, [pc, #52]	; (d84 <burp_box_play+0x64>)
     d50:	4798      	blx	r3
			break;
     d52:	e7f2      	b.n	d3a <burp_box_play+0x1a>
			spi_transceive( wr_buffer_play_set_2 , rd_buffer_6 ,BUF_LENGTH_6);
     d54:	2206      	movs	r2, #6
     d56:	4909      	ldr	r1, [pc, #36]	; (d7c <burp_box_play+0x5c>)
     d58:	480b      	ldr	r0, [pc, #44]	; (d88 <burp_box_play+0x68>)
     d5a:	4b0a      	ldr	r3, [pc, #40]	; (d84 <burp_box_play+0x64>)
     d5c:	4798      	blx	r3
			break;
     d5e:	e7ec      	b.n	d3a <burp_box_play+0x1a>
			spi_transceive( wr_buffer_play_set_3 , rd_buffer_6 ,BUF_LENGTH_6);
     d60:	2206      	movs	r2, #6
     d62:	4906      	ldr	r1, [pc, #24]	; (d7c <burp_box_play+0x5c>)
     d64:	4809      	ldr	r0, [pc, #36]	; (d8c <burp_box_play+0x6c>)
     d66:	4b07      	ldr	r3, [pc, #28]	; (d84 <burp_box_play+0x64>)
     d68:	4798      	blx	r3
			break;
     d6a:	e7e6      	b.n	d3a <burp_box_play+0x1a>
     d6c:	00001d3d 	.word	0x00001d3d
     d70:	00000b2d 	.word	0x00000b2d
     d74:	00000bcd 	.word	0x00000bcd
     d78:	00001d61 	.word	0x00001d61
     d7c:	200000e8 	.word	0x200000e8
     d80:	20000058 	.word	0x20000058
     d84:	00001f45 	.word	0x00001f45
     d88:	20000060 	.word	0x20000060
     d8c:	20000068 	.word	0x20000068

00000d90 <global_erase_LED_flashing>:



void global_erase_LED_flashing()
{
     d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d92:	46ce      	mov	lr, r9
     d94:	4647      	mov	r7, r8
     d96:	b580      	push	{r7, lr}
     d98:	2303      	movs	r3, #3
     d9a:	4699      	mov	r9, r3
	
	for(j=0;j<LOOP_2;j++)
	{
		for(i=LOOP_1_START;i<LOOP_1_END;i = i+2)
		{
			LED_off(PLAY_LED);
     d9c:	4b12      	ldr	r3, [pc, #72]	; (de8 <global_erase_LED_flashing+0x58>)
     d9e:	4698      	mov	r8, r3
			LED_off(RECORD_LED);
			delay_cycles_us(i);
     da0:	4f12      	ldr	r7, [pc, #72]	; (dec <global_erase_LED_flashing+0x5c>)
			LED_on(RECORD_LED);
     da2:	4e13      	ldr	r6, [pc, #76]	; (df0 <global_erase_LED_flashing+0x60>)
{
     da4:	24c8      	movs	r4, #200	; 0xc8
			LED_off(PLAY_LED);
     da6:	2008      	movs	r0, #8
     da8:	47c0      	blx	r8
			LED_off(RECORD_LED);
     daa:	2005      	movs	r0, #5
     dac:	47c0      	blx	r8
			delay_cycles_us(i);
     dae:	0020      	movs	r0, r4
     db0:	47b8      	blx	r7
			LED_on(RECORD_LED);
     db2:	2005      	movs	r0, #5
     db4:	47b0      	blx	r6
			LED_on(PLAY_LED);
     db6:	2008      	movs	r0, #8
     db8:	47b0      	blx	r6
			delay_cycles_us(LOOP_1_END-i);
     dba:	25c8      	movs	r5, #200	; 0xc8
     dbc:	00ad      	lsls	r5, r5, #2
     dbe:	1b28      	subs	r0, r5, r4
     dc0:	47b8      	blx	r7
		for(i=LOOP_1_START;i<LOOP_1_END;i = i+2)
     dc2:	3402      	adds	r4, #2
     dc4:	42ac      	cmp	r4, r5
     dc6:	d1ee      	bne.n	da6 <global_erase_LED_flashing+0x16>
     dc8:	2301      	movs	r3, #1
     dca:	425b      	negs	r3, r3
     dcc:	469c      	mov	ip, r3
     dce:	44e1      	add	r9, ip
	for(j=0;j<LOOP_2;j++)
     dd0:	464b      	mov	r3, r9
     dd2:	2b00      	cmp	r3, #0
     dd4:	d1e6      	bne.n	da4 <global_erase_LED_flashing+0x14>
		}
	}
	LED_off(PLAY_LED);
     dd6:	2008      	movs	r0, #8
     dd8:	4c03      	ldr	r4, [pc, #12]	; (de8 <global_erase_LED_flashing+0x58>)
     dda:	47a0      	blx	r4
	LED_off(RECORD_LED);
     ddc:	2005      	movs	r0, #5
     dde:	47a0      	blx	r4
}
     de0:	bc0c      	pop	{r2, r3}
     de2:	4690      	mov	r8, r2
     de4:	4699      	mov	r9, r3
     de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     de8:	00001d61 	.word	0x00001d61
     dec:	00001031 	.word	0x00001031
     df0:	00001d3d 	.word	0x00001d3d

00000df4 <burp_box_global_erase>:


void burp_box_global_erase()
{
     df4:	b570      	push	{r4, r5, r6, lr}
	bool burp_box_busy = true;
	LED_on(PLAY_LED);
     df6:	2008      	movs	r0, #8
     df8:	4c0e      	ldr	r4, [pc, #56]	; (e34 <burp_box_global_erase+0x40>)
     dfa:	47a0      	blx	r4
	LED_on(RECORD_LED);
     dfc:	2005      	movs	r0, #5
     dfe:	47a0      	blx	r4
	
	spi_write_global_erase();
     e00:	4b0d      	ldr	r3, [pc, #52]	; (e38 <burp_box_global_erase+0x44>)
     e02:	4798      	blx	r3
	
	while(burp_box_busy == true)
	{
		delay_cycles_ms(200);
     e04:	4e0d      	ldr	r6, [pc, #52]	; (e3c <burp_box_global_erase+0x48>)
		spi_transceive( wr_buffer_status_pointer , rd_buffer_3 ,BUF_LENGTH_3);
     e06:	4c0e      	ldr	r4, [pc, #56]	; (e40 <burp_box_global_erase+0x4c>)
     e08:	4d0e      	ldr	r5, [pc, #56]	; (e44 <burp_box_global_erase+0x50>)
		delay_cycles_ms(200);
     e0a:	20c8      	movs	r0, #200	; 0xc8
     e0c:	47b0      	blx	r6
		spi_transceive( wr_buffer_status_pointer , rd_buffer_3 ,BUF_LENGTH_3);
     e0e:	2203      	movs	r2, #3
     e10:	0021      	movs	r1, r4
     e12:	0028      	movs	r0, r5
     e14:	4b0c      	ldr	r3, [pc, #48]	; (e48 <burp_box_global_erase+0x54>)
     e16:	4798      	blx	r3
	while(burp_box_busy == true)
     e18:	78a3      	ldrb	r3, [r4, #2]
     e1a:	079b      	lsls	r3, r3, #30
     e1c:	d4f5      	bmi.n	e0a <burp_box_global_erase+0x16>
		burp_box_busy = rd_buffer_3[2] & ERASE_READY_MASK;
	}
	
	spi_write_stop();
     e1e:	4b0b      	ldr	r3, [pc, #44]	; (e4c <burp_box_global_erase+0x58>)
     e20:	4798      	blx	r3
	
	LED_off(PLAY_LED);
     e22:	2008      	movs	r0, #8
     e24:	4c0a      	ldr	r4, [pc, #40]	; (e50 <burp_box_global_erase+0x5c>)
     e26:	47a0      	blx	r4
	LED_off(RECORD_LED);
     e28:	2005      	movs	r0, #5
     e2a:	47a0      	blx	r4
	//2 Seconds
	global_erase_LED_flashing();
     e2c:	4b09      	ldr	r3, [pc, #36]	; (e54 <burp_box_global_erase+0x60>)
     e2e:	4798      	blx	r3
}
     e30:	bd70      	pop	{r4, r5, r6, pc}
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	00001d3d 	.word	0x00001d3d
     e38:	00000ad9 	.word	0x00000ad9
     e3c:	0000105d 	.word	0x0000105d
     e40:	200000e4 	.word	0x200000e4
     e44:	20000090 	.word	0x20000090
     e48:	00001f45 	.word	0x00001f45
     e4c:	00000b5d 	.word	0x00000b5d
     e50:	00001d61 	.word	0x00001d61
     e54:	00000d91 	.word	0x00000d91

00000e58 <spi_main_loop_1>:

void spi_main_loop_1(uint16_t input_buttons_servo)
{
     e58:	b570      	push	{r4, r5, r6, lr}
	switch (input_buttons_servo)
     e5a:	23c0      	movs	r3, #192	; 0xc0
     e5c:	009b      	lsls	r3, r3, #2
     e5e:	4298      	cmp	r0, r3
     e60:	d100      	bne.n	e64 <spi_main_loop_1+0xc>
     e62:	e08e      	b.n	f82 <spi_main_loop_1+0x12a>
     e64:	d836      	bhi.n	ed4 <spi_main_loop_1+0x7c>
     e66:	2803      	cmp	r0, #3
     e68:	d057      	beq.n	f1a <spi_main_loop_1+0xc2>
     e6a:	d91d      	bls.n	ea8 <spi_main_loop_1+0x50>
     e6c:	2380      	movs	r3, #128	; 0x80
     e6e:	005b      	lsls	r3, r3, #1
     e70:	4298      	cmp	r0, r3
     e72:	d100      	bne.n	e76 <spi_main_loop_1+0x1e>
     e74:	e07b      	b.n	f6e <spi_main_loop_1+0x116>
     e76:	3301      	adds	r3, #1
     e78:	33ff      	adds	r3, #255	; 0xff
     e7a:	4298      	cmp	r0, r3
     e7c:	d100      	bne.n	e80 <spi_main_loop_1+0x28>
     e7e:	e07b      	b.n	f78 <spi_main_loop_1+0x120>
     e80:	2804      	cmp	r0, #4
     e82:	d15b      	bne.n	f3c <spi_main_loop_1+0xe4>
			}
			LED_track(track_pointer-1);
			interrupt_occured = false;
			break;
		case N_P_PRESSED:
			spi_write_stop();
     e84:	4b4b      	ldr	r3, [pc, #300]	; (fb4 <spi_main_loop_1+0x15c>)
     e86:	4798      	blx	r3
			track_pointer = TRACK_NO_1;
     e88:	4c4b      	ldr	r4, [pc, #300]	; (fb8 <spi_main_loop_1+0x160>)
     e8a:	2301      	movs	r3, #1
     e8c:	7023      	strb	r3, [r4, #0]
			burp_box_global_erase();
     e8e:	4b4b      	ldr	r3, [pc, #300]	; (fbc <spi_main_loop_1+0x164>)
     e90:	4798      	blx	r3
			global_erase_LED_flashing();
     e92:	4b4b      	ldr	r3, [pc, #300]	; (fc0 <spi_main_loop_1+0x168>)
     e94:	4798      	blx	r3
			LED_track(track_pointer-1);
     e96:	7820      	ldrb	r0, [r4, #0]
     e98:	3801      	subs	r0, #1
     e9a:	b2c0      	uxtb	r0, r0
     e9c:	4b49      	ldr	r3, [pc, #292]	; (fc4 <spi_main_loop_1+0x16c>)
     e9e:	4798      	blx	r3
			interrupt_occured = false;
     ea0:	2200      	movs	r2, #0
     ea2:	4b49      	ldr	r3, [pc, #292]	; (fc8 <spi_main_loop_1+0x170>)
     ea4:	701a      	strb	r2, [r3, #0]
			break;
     ea6:	e049      	b.n	f3c <spi_main_loop_1+0xe4>
	switch (input_buttons_servo)
     ea8:	2801      	cmp	r0, #1
     eaa:	d048      	beq.n	f3e <spi_main_loop_1+0xe6>
     eac:	2802      	cmp	r0, #2
     eae:	d145      	bne.n	f3c <spi_main_loop_1+0xe4>
			burp_box_erase(track_pointer);
     eb0:	4d41      	ldr	r5, [pc, #260]	; (fb8 <spi_main_loop_1+0x160>)
     eb2:	7828      	ldrb	r0, [r5, #0]
     eb4:	b2c0      	uxtb	r0, r0
     eb6:	4b45      	ldr	r3, [pc, #276]	; (fcc <spi_main_loop_1+0x174>)
     eb8:	4798      	blx	r3
			spi_write_apc(wr_apc_2_record_mic);
     eba:	4845      	ldr	r0, [pc, #276]	; (fd0 <spi_main_loop_1+0x178>)
     ebc:	4c45      	ldr	r4, [pc, #276]	; (fd4 <spi_main_loop_1+0x17c>)
     ebe:	47a0      	blx	r4
			burp_box_record(track_pointer);
     ec0:	7828      	ldrb	r0, [r5, #0]
     ec2:	b2c0      	uxtb	r0, r0
     ec4:	4b44      	ldr	r3, [pc, #272]	; (fd8 <spi_main_loop_1+0x180>)
     ec6:	4798      	blx	r3
			spi_write_apc(wr_apc_2_ideal);
     ec8:	4844      	ldr	r0, [pc, #272]	; (fdc <spi_main_loop_1+0x184>)
     eca:	47a0      	blx	r4
			interrupt_occured = false;
     ecc:	2200      	movs	r2, #0
     ece:	4b3e      	ldr	r3, [pc, #248]	; (fc8 <spi_main_loop_1+0x170>)
     ed0:	701a      	strb	r2, [r3, #0]
			break;
     ed2:	e033      	b.n	f3c <spi_main_loop_1+0xe4>
	switch (input_buttons_servo)
     ed4:	23c0      	movs	r3, #192	; 0xc0
     ed6:	00db      	lsls	r3, r3, #3
     ed8:	4298      	cmp	r0, r3
     eda:	d05c      	beq.n	f96 <spi_main_loop_1+0x13e>
     edc:	d910      	bls.n	f00 <spi_main_loop_1+0xa8>
     ede:	2380      	movs	r3, #128	; 0x80
     ee0:	011b      	lsls	r3, r3, #4
     ee2:	4298      	cmp	r0, r3
     ee4:	d05c      	beq.n	fa0 <spi_main_loop_1+0x148>
     ee6:	3301      	adds	r3, #1
     ee8:	33ff      	adds	r3, #255	; 0xff
     eea:	4298      	cmp	r0, r3
     eec:	d05d      	beq.n	faa <spi_main_loop_1+0x152>
     eee:	23e0      	movs	r3, #224	; 0xe0
     ef0:	00db      	lsls	r3, r3, #3
     ef2:	4298      	cmp	r0, r3
     ef4:	d122      	bne.n	f3c <spi_main_loop_1+0xe4>
			break;
		case TRACK_2_VOLUME_3:
			burp_box_set_volume_track(VOLUME_5,TRACK_2);
			break;
		case TRACK_3_VOLUME_1:
			burp_box_set_volume_track(VOLUME_1,TRACK_3);
     ef6:	2103      	movs	r1, #3
     ef8:	2001      	movs	r0, #1
     efa:	4b39      	ldr	r3, [pc, #228]	; (fe0 <spi_main_loop_1+0x188>)
     efc:	4798      	blx	r3
			break;
     efe:	e01d      	b.n	f3c <spi_main_loop_1+0xe4>
	switch (input_buttons_servo)
     f00:	2380      	movs	r3, #128	; 0x80
     f02:	00db      	lsls	r3, r3, #3
     f04:	4298      	cmp	r0, r3
     f06:	d041      	beq.n	f8c <spi_main_loop_1+0x134>
     f08:	3301      	adds	r3, #1
     f0a:	33ff      	adds	r3, #255	; 0xff
     f0c:	4298      	cmp	r0, r3
     f0e:	d115      	bne.n	f3c <spi_main_loop_1+0xe4>
			burp_box_set_volume_track(VOLUME_3,TRACK_2);
     f10:	2102      	movs	r1, #2
     f12:	2003      	movs	r0, #3
     f14:	4b32      	ldr	r3, [pc, #200]	; (fe0 <spi_main_loop_1+0x188>)
     f16:	4798      	blx	r3
			break;
     f18:	e010      	b.n	f3c <spi_main_loop_1+0xe4>
			spi_write_stop();
     f1a:	4b26      	ldr	r3, [pc, #152]	; (fb4 <spi_main_loop_1+0x15c>)
     f1c:	4798      	blx	r3
			spi_write_apc(wr_apc_2_play_memory);
     f1e:	4831      	ldr	r0, [pc, #196]	; (fe4 <spi_main_loop_1+0x18c>)
     f20:	4c2c      	ldr	r4, [pc, #176]	; (fd4 <spi_main_loop_1+0x17c>)
     f22:	47a0      	blx	r4
			spi_write_clear_int();
     f24:	4b30      	ldr	r3, [pc, #192]	; (fe8 <spi_main_loop_1+0x190>)
     f26:	4798      	blx	r3
			burp_box_play(track_pointer);
     f28:	4b23      	ldr	r3, [pc, #140]	; (fb8 <spi_main_loop_1+0x160>)
     f2a:	7818      	ldrb	r0, [r3, #0]
     f2c:	b2c0      	uxtb	r0, r0
     f2e:	4b2f      	ldr	r3, [pc, #188]	; (fec <spi_main_loop_1+0x194>)
     f30:	4798      	blx	r3
			spi_write_apc(wr_apc_2_ideal);
     f32:	482a      	ldr	r0, [pc, #168]	; (fdc <spi_main_loop_1+0x184>)
     f34:	47a0      	blx	r4
			interrupt_occured = false;
     f36:	2200      	movs	r2, #0
     f38:	4b23      	ldr	r3, [pc, #140]	; (fc8 <spi_main_loop_1+0x170>)
     f3a:	701a      	strb	r2, [r3, #0]
			break;
		
		default:
			break;
	}
}
     f3c:	bd70      	pop	{r4, r5, r6, pc}
			spi_write_stop();
     f3e:	4b1d      	ldr	r3, [pc, #116]	; (fb4 <spi_main_loop_1+0x15c>)
     f40:	4798      	blx	r3
			track_pointer++;
     f42:	4a1d      	ldr	r2, [pc, #116]	; (fb8 <spi_main_loop_1+0x160>)
     f44:	7813      	ldrb	r3, [r2, #0]
     f46:	3301      	adds	r3, #1
     f48:	b2db      	uxtb	r3, r3
     f4a:	7013      	strb	r3, [r2, #0]
			if(track_pointer > 3)
     f4c:	7813      	ldrb	r3, [r2, #0]
     f4e:	b2db      	uxtb	r3, r3
     f50:	2b03      	cmp	r3, #3
     f52:	d902      	bls.n	f5a <spi_main_loop_1+0x102>
				track_pointer = 1;
     f54:	2201      	movs	r2, #1
     f56:	4b18      	ldr	r3, [pc, #96]	; (fb8 <spi_main_loop_1+0x160>)
     f58:	701a      	strb	r2, [r3, #0]
			LED_track(track_pointer-1);
     f5a:	4b17      	ldr	r3, [pc, #92]	; (fb8 <spi_main_loop_1+0x160>)
     f5c:	7818      	ldrb	r0, [r3, #0]
     f5e:	3801      	subs	r0, #1
     f60:	b2c0      	uxtb	r0, r0
     f62:	4b18      	ldr	r3, [pc, #96]	; (fc4 <spi_main_loop_1+0x16c>)
     f64:	4798      	blx	r3
			interrupt_occured = false;
     f66:	2200      	movs	r2, #0
     f68:	4b17      	ldr	r3, [pc, #92]	; (fc8 <spi_main_loop_1+0x170>)
     f6a:	701a      	strb	r2, [r3, #0]
			break;
     f6c:	e7e6      	b.n	f3c <spi_main_loop_1+0xe4>
			burp_box_set_volume_track(VOLUME_1,TRACK_1);
     f6e:	2101      	movs	r1, #1
     f70:	2001      	movs	r0, #1
     f72:	4b1b      	ldr	r3, [pc, #108]	; (fe0 <spi_main_loop_1+0x188>)
     f74:	4798      	blx	r3
			break;
     f76:	e7e1      	b.n	f3c <spi_main_loop_1+0xe4>
			burp_box_set_volume_track(VOLUME_3,TRACK_1);
     f78:	2101      	movs	r1, #1
     f7a:	2003      	movs	r0, #3
     f7c:	4b18      	ldr	r3, [pc, #96]	; (fe0 <spi_main_loop_1+0x188>)
     f7e:	4798      	blx	r3
			break;
     f80:	e7dc      	b.n	f3c <spi_main_loop_1+0xe4>
			burp_box_set_volume_track(VOLUME_5,TRACK_1);
     f82:	2101      	movs	r1, #1
     f84:	2005      	movs	r0, #5
     f86:	4b16      	ldr	r3, [pc, #88]	; (fe0 <spi_main_loop_1+0x188>)
     f88:	4798      	blx	r3
			break;
     f8a:	e7d7      	b.n	f3c <spi_main_loop_1+0xe4>
			burp_box_set_volume_track(VOLUME_1,TRACK_2);
     f8c:	2102      	movs	r1, #2
     f8e:	2001      	movs	r0, #1
     f90:	4b13      	ldr	r3, [pc, #76]	; (fe0 <spi_main_loop_1+0x188>)
     f92:	4798      	blx	r3
			break;
     f94:	e7d2      	b.n	f3c <spi_main_loop_1+0xe4>
			burp_box_set_volume_track(VOLUME_5,TRACK_2);
     f96:	2102      	movs	r1, #2
     f98:	2005      	movs	r0, #5
     f9a:	4b11      	ldr	r3, [pc, #68]	; (fe0 <spi_main_loop_1+0x188>)
     f9c:	4798      	blx	r3
			break;
     f9e:	e7cd      	b.n	f3c <spi_main_loop_1+0xe4>
			burp_box_set_volume_track(VOLUME_3,TRACK_3);
     fa0:	2103      	movs	r1, #3
     fa2:	2003      	movs	r0, #3
     fa4:	4b0e      	ldr	r3, [pc, #56]	; (fe0 <spi_main_loop_1+0x188>)
     fa6:	4798      	blx	r3
			break;
     fa8:	e7c8      	b.n	f3c <spi_main_loop_1+0xe4>
			burp_box_set_volume_track(VOLUME_5,TRACK_3);
     faa:	2103      	movs	r1, #3
     fac:	2005      	movs	r0, #5
     fae:	4b0c      	ldr	r3, [pc, #48]	; (fe0 <spi_main_loop_1+0x188>)
     fb0:	4798      	blx	r3
}
     fb2:	e7c3      	b.n	f3c <spi_main_loop_1+0xe4>
     fb4:	00000b5d 	.word	0x00000b5d
     fb8:	20000122 	.word	0x20000122
     fbc:	00000df5 	.word	0x00000df5
     fc0:	00000d91 	.word	0x00000d91
     fc4:	00001d85 	.word	0x00001d85
     fc8:	20000121 	.word	0x20000121
     fcc:	00000cc1 	.word	0x00000cc1
     fd0:	20000034 	.word	0x20000034
     fd4:	00000b49 	.word	0x00000b49
     fd8:	00000c49 	.word	0x00000c49
     fdc:	2000002c 	.word	0x2000002c
     fe0:	00000a59 	.word	0x00000a59
     fe4:	20000030 	.word	0x20000030
     fe8:	00000b2d 	.word	0x00000b2d
     fec:	00000d21 	.word	0x00000d21

00000ff0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     ff0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     ff2:	2000      	movs	r0, #0
     ff4:	4b08      	ldr	r3, [pc, #32]	; (1018 <delay_init+0x28>)
     ff6:	4798      	blx	r3
     ff8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     ffa:	4c08      	ldr	r4, [pc, #32]	; (101c <delay_init+0x2c>)
     ffc:	21fa      	movs	r1, #250	; 0xfa
     ffe:	0089      	lsls	r1, r1, #2
    1000:	47a0      	blx	r4
    1002:	4b07      	ldr	r3, [pc, #28]	; (1020 <delay_init+0x30>)
    1004:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1006:	4907      	ldr	r1, [pc, #28]	; (1024 <delay_init+0x34>)
    1008:	0028      	movs	r0, r5
    100a:	47a0      	blx	r4
    100c:	4b06      	ldr	r3, [pc, #24]	; (1028 <delay_init+0x38>)
    100e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1010:	2205      	movs	r2, #5
    1012:	4b06      	ldr	r3, [pc, #24]	; (102c <delay_init+0x3c>)
    1014:	601a      	str	r2, [r3, #0]
}
    1016:	bd70      	pop	{r4, r5, r6, pc}
    1018:	00002331 	.word	0x00002331
    101c:	000026c1 	.word	0x000026c1
    1020:	20000098 	.word	0x20000098
    1024:	000f4240 	.word	0x000f4240
    1028:	2000009c 	.word	0x2000009c
    102c:	e000e010 	.word	0xe000e010

00001030 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    1030:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    1032:	4b08      	ldr	r3, [pc, #32]	; (1054 <delay_cycles_us+0x24>)
    1034:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1036:	4a08      	ldr	r2, [pc, #32]	; (1058 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    1038:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    103a:	2180      	movs	r1, #128	; 0x80
    103c:	0249      	lsls	r1, r1, #9
	while (n--) {
    103e:	3801      	subs	r0, #1
    1040:	d307      	bcc.n	1052 <delay_cycles_us+0x22>
	if (n > 0) {
    1042:	2c00      	cmp	r4, #0
    1044:	d0fb      	beq.n	103e <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    1046:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1048:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    104a:	6813      	ldr	r3, [r2, #0]
    104c:	420b      	tst	r3, r1
    104e:	d0fc      	beq.n	104a <delay_cycles_us+0x1a>
    1050:	e7f5      	b.n	103e <delay_cycles_us+0xe>
	}
}
    1052:	bd30      	pop	{r4, r5, pc}
    1054:	2000009c 	.word	0x2000009c
    1058:	e000e010 	.word	0xe000e010

0000105c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    105c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    105e:	4b08      	ldr	r3, [pc, #32]	; (1080 <delay_cycles_ms+0x24>)
    1060:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    1062:	4a08      	ldr	r2, [pc, #32]	; (1084 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1064:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1066:	2180      	movs	r1, #128	; 0x80
    1068:	0249      	lsls	r1, r1, #9
	while (n--) {
    106a:	3801      	subs	r0, #1
    106c:	d307      	bcc.n	107e <delay_cycles_ms+0x22>
	if (n > 0) {
    106e:	2c00      	cmp	r4, #0
    1070:	d0fb      	beq.n	106a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1072:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1074:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1076:	6813      	ldr	r3, [r2, #0]
    1078:	420b      	tst	r3, r1
    107a:	d0fc      	beq.n	1076 <delay_cycles_ms+0x1a>
    107c:	e7f5      	b.n	106a <delay_cycles_ms+0xe>
	}
}
    107e:	bd30      	pop	{r4, r5, pc}
    1080:	20000098 	.word	0x20000098
    1084:	e000e010 	.word	0xe000e010

00001088 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1088:	b500      	push	{lr}
    108a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    108c:	ab01      	add	r3, sp, #4
    108e:	2280      	movs	r2, #128	; 0x80
    1090:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1092:	780a      	ldrb	r2, [r1, #0]
    1094:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1096:	784a      	ldrb	r2, [r1, #1]
    1098:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    109a:	788a      	ldrb	r2, [r1, #2]
    109c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    109e:	0019      	movs	r1, r3
    10a0:	4b01      	ldr	r3, [pc, #4]	; (10a8 <port_pin_set_config+0x20>)
    10a2:	4798      	blx	r3
}
    10a4:	b003      	add	sp, #12
    10a6:	bd00      	pop	{pc}
    10a8:	00002541 	.word	0x00002541

000010ac <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    10ac:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    10ae:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    10b0:	2340      	movs	r3, #64	; 0x40
    10b2:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    10b4:	4281      	cmp	r1, r0
    10b6:	d202      	bcs.n	10be <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    10b8:	0018      	movs	r0, r3
    10ba:	bd10      	pop	{r4, pc}
		baud_calculated++;
    10bc:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    10be:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    10c0:	1c63      	adds	r3, r4, #1
    10c2:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    10c4:	4288      	cmp	r0, r1
    10c6:	d9f9      	bls.n	10bc <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    10c8:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    10ca:	2cff      	cmp	r4, #255	; 0xff
    10cc:	d8f4      	bhi.n	10b8 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    10ce:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    10d0:	2300      	movs	r3, #0
    10d2:	e7f1      	b.n	10b8 <_sercom_get_sync_baud_val+0xc>

000010d4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    10d4:	b510      	push	{r4, lr}
    10d6:	b082      	sub	sp, #8
    10d8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    10da:	4b0e      	ldr	r3, [pc, #56]	; (1114 <sercom_set_gclk_generator+0x40>)
    10dc:	781b      	ldrb	r3, [r3, #0]
    10de:	2b00      	cmp	r3, #0
    10e0:	d007      	beq.n	10f2 <sercom_set_gclk_generator+0x1e>
    10e2:	2900      	cmp	r1, #0
    10e4:	d105      	bne.n	10f2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    10e6:	4b0b      	ldr	r3, [pc, #44]	; (1114 <sercom_set_gclk_generator+0x40>)
    10e8:	785b      	ldrb	r3, [r3, #1]
    10ea:	4283      	cmp	r3, r0
    10ec:	d010      	beq.n	1110 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    10ee:	201d      	movs	r0, #29
    10f0:	e00c      	b.n	110c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    10f2:	a901      	add	r1, sp, #4
    10f4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    10f6:	200d      	movs	r0, #13
    10f8:	4b07      	ldr	r3, [pc, #28]	; (1118 <sercom_set_gclk_generator+0x44>)
    10fa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    10fc:	200d      	movs	r0, #13
    10fe:	4b07      	ldr	r3, [pc, #28]	; (111c <sercom_set_gclk_generator+0x48>)
    1100:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1102:	4b04      	ldr	r3, [pc, #16]	; (1114 <sercom_set_gclk_generator+0x40>)
    1104:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1106:	2201      	movs	r2, #1
    1108:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    110a:	2000      	movs	r0, #0
}
    110c:	b002      	add	sp, #8
    110e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1110:	2000      	movs	r0, #0
    1112:	e7fb      	b.n	110c <sercom_set_gclk_generator+0x38>
    1114:	200000f0 	.word	0x200000f0
    1118:	00002449 	.word	0x00002449
    111c:	000023bd 	.word	0x000023bd

00001120 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1120:	4b15      	ldr	r3, [pc, #84]	; (1178 <_sercom_get_default_pad+0x58>)
    1122:	4298      	cmp	r0, r3
    1124:	d004      	beq.n	1130 <_sercom_get_default_pad+0x10>
    1126:	4b15      	ldr	r3, [pc, #84]	; (117c <_sercom_get_default_pad+0x5c>)
    1128:	4298      	cmp	r0, r3
    112a:	d011      	beq.n	1150 <_sercom_get_default_pad+0x30>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    112c:	2000      	movs	r0, #0
}
    112e:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1130:	2901      	cmp	r1, #1
    1132:	d007      	beq.n	1144 <_sercom_get_default_pad+0x24>
    1134:	2900      	cmp	r1, #0
    1136:	d01b      	beq.n	1170 <_sercom_get_default_pad+0x50>
    1138:	2902      	cmp	r1, #2
    113a:	d005      	beq.n	1148 <_sercom_get_default_pad+0x28>
    113c:	2903      	cmp	r1, #3
    113e:	d005      	beq.n	114c <_sercom_get_default_pad+0x2c>
	return 0;
    1140:	2000      	movs	r0, #0
    1142:	e7f4      	b.n	112e <_sercom_get_default_pad+0xe>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1144:	480e      	ldr	r0, [pc, #56]	; (1180 <_sercom_get_default_pad+0x60>)
    1146:	e7f2      	b.n	112e <_sercom_get_default_pad+0xe>
    1148:	480e      	ldr	r0, [pc, #56]	; (1184 <_sercom_get_default_pad+0x64>)
    114a:	e7f0      	b.n	112e <_sercom_get_default_pad+0xe>
    114c:	480e      	ldr	r0, [pc, #56]	; (1188 <_sercom_get_default_pad+0x68>)
    114e:	e7ee      	b.n	112e <_sercom_get_default_pad+0xe>
    1150:	2901      	cmp	r1, #1
    1152:	d007      	beq.n	1164 <_sercom_get_default_pad+0x44>
    1154:	2900      	cmp	r1, #0
    1156:	d00d      	beq.n	1174 <_sercom_get_default_pad+0x54>
    1158:	2902      	cmp	r1, #2
    115a:	d005      	beq.n	1168 <_sercom_get_default_pad+0x48>
    115c:	2903      	cmp	r1, #3
    115e:	d005      	beq.n	116c <_sercom_get_default_pad+0x4c>
	return 0;
    1160:	2000      	movs	r0, #0
    1162:	e7e4      	b.n	112e <_sercom_get_default_pad+0xe>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1164:	4809      	ldr	r0, [pc, #36]	; (118c <_sercom_get_default_pad+0x6c>)
    1166:	e7e2      	b.n	112e <_sercom_get_default_pad+0xe>
    1168:	4809      	ldr	r0, [pc, #36]	; (1190 <_sercom_get_default_pad+0x70>)
    116a:	e7e0      	b.n	112e <_sercom_get_default_pad+0xe>
    116c:	4809      	ldr	r0, [pc, #36]	; (1194 <_sercom_get_default_pad+0x74>)
    116e:	e7de      	b.n	112e <_sercom_get_default_pad+0xe>
    1170:	4809      	ldr	r0, [pc, #36]	; (1198 <_sercom_get_default_pad+0x78>)
    1172:	e7dc      	b.n	112e <_sercom_get_default_pad+0xe>
    1174:	4809      	ldr	r0, [pc, #36]	; (119c <_sercom_get_default_pad+0x7c>)
    1176:	e7da      	b.n	112e <_sercom_get_default_pad+0xe>
    1178:	42000800 	.word	0x42000800
    117c:	42000c00 	.word	0x42000c00
    1180:	00050003 	.word	0x00050003
    1184:	00080003 	.word	0x00080003
    1188:	00090003 	.word	0x00090003
    118c:	001f0002 	.word	0x001f0002
    1190:	00180002 	.word	0x00180002
    1194:	00190002 	.word	0x00190002
    1198:	00040003 	.word	0x00040003
    119c:	001e0002 	.word	0x001e0002

000011a0 <_sercom_get_sercom_inst_index>:
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    11a0:	4b06      	ldr	r3, [pc, #24]	; (11bc <_sercom_get_sercom_inst_index+0x1c>)
    11a2:	4298      	cmp	r0, r3
    11a4:	d008      	beq.n	11b8 <_sercom_get_sercom_inst_index+0x18>
    11a6:	4a06      	ldr	r2, [pc, #24]	; (11c0 <_sercom_get_sercom_inst_index+0x20>)
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    11a8:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    11aa:	4290      	cmp	r0, r2
    11ac:	d001      	beq.n	11b2 <_sercom_get_sercom_inst_index+0x12>
}
    11ae:	0018      	movs	r0, r3
    11b0:	4770      	bx	lr
    11b2:	3301      	adds	r3, #1
			return i;
    11b4:	b2db      	uxtb	r3, r3
    11b6:	e7fa      	b.n	11ae <_sercom_get_sercom_inst_index+0xe>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11b8:	2300      	movs	r3, #0
    11ba:	e7fb      	b.n	11b4 <_sercom_get_sercom_inst_index+0x14>
    11bc:	42000800 	.word	0x42000800
    11c0:	42000c00 	.word	0x42000c00

000011c4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    11c4:	4770      	bx	lr
	...

000011c8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    11c8:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    11ca:	4b09      	ldr	r3, [pc, #36]	; (11f0 <_sercom_set_handler+0x28>)
    11cc:	781b      	ldrb	r3, [r3, #0]
    11ce:	2b00      	cmp	r3, #0
    11d0:	d10a      	bne.n	11e8 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11d2:	4c08      	ldr	r4, [pc, #32]	; (11f4 <_sercom_set_handler+0x2c>)
    11d4:	4d08      	ldr	r5, [pc, #32]	; (11f8 <_sercom_set_handler+0x30>)
    11d6:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    11d8:	4b08      	ldr	r3, [pc, #32]	; (11fc <_sercom_set_handler+0x34>)
    11da:	2200      	movs	r2, #0
    11dc:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11de:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    11e0:	605a      	str	r2, [r3, #4]
		}

		_handler_table_initialized = true;
    11e2:	3201      	adds	r2, #1
    11e4:	4b02      	ldr	r3, [pc, #8]	; (11f0 <_sercom_set_handler+0x28>)
    11e6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    11e8:	0080      	lsls	r0, r0, #2
    11ea:	4b02      	ldr	r3, [pc, #8]	; (11f4 <_sercom_set_handler+0x2c>)
    11ec:	50c1      	str	r1, [r0, r3]
}
    11ee:	bd30      	pop	{r4, r5, pc}
    11f0:	200000f2 	.word	0x200000f2
    11f4:	200000f4 	.word	0x200000f4
    11f8:	000011c5 	.word	0x000011c5
    11fc:	200001dc 	.word	0x200001dc

00001200 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1200:	b510      	push	{r4, lr}
    1202:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1204:	ac01      	add	r4, sp, #4
    1206:	2309      	movs	r3, #9
    1208:	7023      	strb	r3, [r4, #0]
    120a:	3301      	adds	r3, #1
    120c:	7063      	strb	r3, [r4, #1]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    120e:	4b02      	ldr	r3, [pc, #8]	; (1218 <_sercom_get_interrupt_vector+0x18>)
    1210:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1212:	5620      	ldrsb	r0, [r4, r0]
}
    1214:	b002      	add	sp, #8
    1216:	bd10      	pop	{r4, pc}
    1218:	000011a1 	.word	0x000011a1

0000121c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    121c:	b510      	push	{r4, lr}
    121e:	4b02      	ldr	r3, [pc, #8]	; (1228 <SERCOM0_Handler+0xc>)
    1220:	681b      	ldr	r3, [r3, #0]
    1222:	2000      	movs	r0, #0
    1224:	4798      	blx	r3
    1226:	bd10      	pop	{r4, pc}
    1228:	200000f4 	.word	0x200000f4

0000122c <SERCOM1_Handler>:
    122c:	b510      	push	{r4, lr}
    122e:	4b02      	ldr	r3, [pc, #8]	; (1238 <SERCOM1_Handler+0xc>)
    1230:	685b      	ldr	r3, [r3, #4]
    1232:	2001      	movs	r0, #1
    1234:	4798      	blx	r3
    1236:	bd10      	pop	{r4, pc}
    1238:	200000f4 	.word	0x200000f4

0000123c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    123c:	b5f0      	push	{r4, r5, r6, r7, lr}
    123e:	b08b      	sub	sp, #44	; 0x2c
    1240:	0005      	movs	r5, r0
    1242:	000c      	movs	r4, r1
    1244:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1246:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1248:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    124a:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    124c:	079b      	lsls	r3, r3, #30
    124e:	d501      	bpl.n	1254 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1250:	b00b      	add	sp, #44	; 0x2c
    1252:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1254:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1256:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1258:	07db      	lsls	r3, r3, #31
    125a:	d4f9      	bmi.n	1250 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    125c:	0008      	movs	r0, r1
    125e:	4b6f      	ldr	r3, [pc, #444]	; (141c <spi_init+0x1e0>)
    1260:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    1262:	4a6f      	ldr	r2, [pc, #444]	; (1420 <spi_init+0x1e4>)
    1264:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1266:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1268:	2301      	movs	r3, #1
    126a:	40bb      	lsls	r3, r7
    126c:	430b      	orrs	r3, r1
    126e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1270:	a909      	add	r1, sp, #36	; 0x24
    1272:	2724      	movs	r7, #36	; 0x24
    1274:	5df3      	ldrb	r3, [r6, r7]
    1276:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1278:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    127a:	b2c3      	uxtb	r3, r0
    127c:	9301      	str	r3, [sp, #4]
    127e:	0018      	movs	r0, r3
    1280:	4b68      	ldr	r3, [pc, #416]	; (1424 <spi_init+0x1e8>)
    1282:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1284:	9801      	ldr	r0, [sp, #4]
    1286:	4b68      	ldr	r3, [pc, #416]	; (1428 <spi_init+0x1ec>)
    1288:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    128a:	5df0      	ldrb	r0, [r6, r7]
    128c:	2100      	movs	r1, #0
    128e:	4b67      	ldr	r3, [pc, #412]	; (142c <spi_init+0x1f0>)
    1290:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1292:	7833      	ldrb	r3, [r6, #0]
    1294:	2b01      	cmp	r3, #1
    1296:	d03f      	beq.n	1318 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    1298:	7833      	ldrb	r3, [r6, #0]
    129a:	2b00      	cmp	r3, #0
    129c:	d103      	bne.n	12a6 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    129e:	6823      	ldr	r3, [r4, #0]
    12a0:	2208      	movs	r2, #8
    12a2:	4313      	orrs	r3, r2
    12a4:	6023      	str	r3, [r4, #0]
    12a6:	002b      	movs	r3, r5
    12a8:	330c      	adds	r3, #12
    12aa:	0029      	movs	r1, r5
    12ac:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    12ae:	2200      	movs	r2, #0
    12b0:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    12b2:	428b      	cmp	r3, r1
    12b4:	d1fc      	bne.n	12b0 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    12b6:	2300      	movs	r3, #0
    12b8:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    12ba:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    12bc:	2400      	movs	r4, #0
    12be:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    12c0:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    12c2:	3336      	adds	r3, #54	; 0x36
    12c4:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    12c6:	3301      	adds	r3, #1
    12c8:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    12ca:	3301      	adds	r3, #1
    12cc:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    12ce:	3b35      	subs	r3, #53	; 0x35
    12d0:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    12d2:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    12d4:	6828      	ldr	r0, [r5, #0]
    12d6:	4b51      	ldr	r3, [pc, #324]	; (141c <spi_init+0x1e0>)
    12d8:	4798      	blx	r3
    12da:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    12dc:	4954      	ldr	r1, [pc, #336]	; (1430 <spi_init+0x1f4>)
    12de:	4b55      	ldr	r3, [pc, #340]	; (1434 <spi_init+0x1f8>)
    12e0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    12e2:	00bf      	lsls	r7, r7, #2
    12e4:	4b54      	ldr	r3, [pc, #336]	; (1438 <spi_init+0x1fc>)
    12e6:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    12e8:	682f      	ldr	r7, [r5, #0]
    12ea:	ab04      	add	r3, sp, #16
    12ec:	2280      	movs	r2, #128	; 0x80
    12ee:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12f0:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12f2:	3a7f      	subs	r2, #127	; 0x7f
    12f4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    12f6:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    12f8:	7833      	ldrb	r3, [r6, #0]
    12fa:	2b00      	cmp	r3, #0
    12fc:	d102      	bne.n	1304 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    12fe:	2200      	movs	r2, #0
    1300:	ab04      	add	r3, sp, #16
    1302:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1304:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1306:	9305      	str	r3, [sp, #20]
    1308:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    130a:	9306      	str	r3, [sp, #24]
    130c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    130e:	9307      	str	r3, [sp, #28]
    1310:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1312:	9308      	str	r3, [sp, #32]
    1314:	2400      	movs	r4, #0
    1316:	e00b      	b.n	1330 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1318:	6823      	ldr	r3, [r4, #0]
    131a:	220c      	movs	r2, #12
    131c:	4313      	orrs	r3, r2
    131e:	6023      	str	r3, [r4, #0]
    1320:	e7ba      	b.n	1298 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1322:	0038      	movs	r0, r7
    1324:	4b45      	ldr	r3, [pc, #276]	; (143c <spi_init+0x200>)
    1326:	4798      	blx	r3
    1328:	e00a      	b.n	1340 <spi_init+0x104>
    132a:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    132c:	2c04      	cmp	r4, #4
    132e:	d010      	beq.n	1352 <spi_init+0x116>
    1330:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1332:	00a3      	lsls	r3, r4, #2
    1334:	aa02      	add	r2, sp, #8
    1336:	200c      	movs	r0, #12
    1338:	1812      	adds	r2, r2, r0
    133a:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    133c:	2800      	cmp	r0, #0
    133e:	d0f0      	beq.n	1322 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    1340:	1c43      	adds	r3, r0, #1
    1342:	d0f2      	beq.n	132a <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1344:	a904      	add	r1, sp, #16
    1346:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1348:	0c00      	lsrs	r0, r0, #16
    134a:	b2c0      	uxtb	r0, r0
    134c:	4b3c      	ldr	r3, [pc, #240]	; (1440 <spi_init+0x204>)
    134e:	4798      	blx	r3
    1350:	e7eb      	b.n	132a <spi_init+0xee>
	module->mode             = config->mode;
    1352:	7833      	ldrb	r3, [r6, #0]
    1354:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1356:	7c33      	ldrb	r3, [r6, #16]
    1358:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    135a:	7cb3      	ldrb	r3, [r6, #18]
    135c:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    135e:	7d33      	ldrb	r3, [r6, #20]
    1360:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1362:	2200      	movs	r2, #0
    1364:	ab02      	add	r3, sp, #8
    1366:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1368:	7833      	ldrb	r3, [r6, #0]
    136a:	2b01      	cmp	r3, #1
    136c:	d012      	beq.n	1394 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    136e:	7833      	ldrb	r3, [r6, #0]
    1370:	2b00      	cmp	r3, #0
    1372:	d126      	bne.n	13c2 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    1374:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    1376:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    1378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    137a:	7ff1      	ldrb	r1, [r6, #31]
    137c:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    137e:	7fb4      	ldrb	r4, [r6, #30]
    1380:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    1382:	4319      	orrs	r1, r3
    1384:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    1386:	2320      	movs	r3, #32
    1388:	5cf3      	ldrb	r3, [r6, r3]
    138a:	2b00      	cmp	r3, #0
    138c:	d01b      	beq.n	13c6 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    138e:	2340      	movs	r3, #64	; 0x40
    1390:	431a      	orrs	r2, r3
    1392:	e018      	b.n	13c6 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1394:	6828      	ldr	r0, [r5, #0]
    1396:	4b21      	ldr	r3, [pc, #132]	; (141c <spi_init+0x1e0>)
    1398:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    139a:	300e      	adds	r0, #14
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    139c:	b2c0      	uxtb	r0, r0
    139e:	4b29      	ldr	r3, [pc, #164]	; (1444 <spi_init+0x208>)
    13a0:	4798      	blx	r3
    13a2:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    13a4:	ab02      	add	r3, sp, #8
    13a6:	1d9a      	adds	r2, r3, #6
    13a8:	69b0      	ldr	r0, [r6, #24]
    13aa:	4b27      	ldr	r3, [pc, #156]	; (1448 <spi_init+0x20c>)
    13ac:	4798      	blx	r3
    13ae:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    13b0:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    13b2:	2b00      	cmp	r3, #0
    13b4:	d000      	beq.n	13b8 <spi_init+0x17c>
    13b6:	e74b      	b.n	1250 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    13b8:	ab02      	add	r3, sp, #8
    13ba:	3306      	adds	r3, #6
    13bc:	781b      	ldrb	r3, [r3, #0]
    13be:	733b      	strb	r3, [r7, #12]
    13c0:	e7d5      	b.n	136e <spi_init+0x132>
	uint32_t ctrlb = 0;
    13c2:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    13c4:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    13c6:	6873      	ldr	r3, [r6, #4]
    13c8:	68b1      	ldr	r1, [r6, #8]
    13ca:	430b      	orrs	r3, r1
    13cc:	68f1      	ldr	r1, [r6, #12]
    13ce:	430b      	orrs	r3, r1
    13d0:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    13d2:	7c31      	ldrb	r1, [r6, #16]
    13d4:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    13d6:	7c71      	ldrb	r1, [r6, #17]
    13d8:	2900      	cmp	r1, #0
    13da:	d103      	bne.n	13e4 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    13dc:	491b      	ldr	r1, [pc, #108]	; (144c <spi_init+0x210>)
    13de:	7889      	ldrb	r1, [r1, #2]
    13e0:	0789      	lsls	r1, r1, #30
    13e2:	d501      	bpl.n	13e8 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    13e4:	2180      	movs	r1, #128	; 0x80
    13e6:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    13e8:	7cb1      	ldrb	r1, [r6, #18]
    13ea:	2900      	cmp	r1, #0
    13ec:	d002      	beq.n	13f4 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    13ee:	2180      	movs	r1, #128	; 0x80
    13f0:	0289      	lsls	r1, r1, #10
    13f2:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    13f4:	7cf1      	ldrb	r1, [r6, #19]
    13f6:	2900      	cmp	r1, #0
    13f8:	d002      	beq.n	1400 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    13fa:	2180      	movs	r1, #128	; 0x80
    13fc:	0089      	lsls	r1, r1, #2
    13fe:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    1400:	7d31      	ldrb	r1, [r6, #20]
    1402:	2900      	cmp	r1, #0
    1404:	d002      	beq.n	140c <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1406:	2180      	movs	r1, #128	; 0x80
    1408:	0189      	lsls	r1, r1, #6
    140a:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    140c:	6839      	ldr	r1, [r7, #0]
    140e:	430b      	orrs	r3, r1
    1410:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1412:	687b      	ldr	r3, [r7, #4]
    1414:	431a      	orrs	r2, r3
    1416:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    1418:	2000      	movs	r0, #0
    141a:	e719      	b.n	1250 <spi_init+0x14>
    141c:	000011a1 	.word	0x000011a1
    1420:	40000400 	.word	0x40000400
    1424:	00002449 	.word	0x00002449
    1428:	000023bd 	.word	0x000023bd
    142c:	000010d5 	.word	0x000010d5
    1430:	000015a1 	.word	0x000015a1
    1434:	000011c9 	.word	0x000011c9
    1438:	200001dc 	.word	0x200001dc
    143c:	00001121 	.word	0x00001121
    1440:	00002541 	.word	0x00002541
    1444:	00002465 	.word	0x00002465
    1448:	000010ad 	.word	0x000010ad
    144c:	41002000 	.word	0x41002000

00001450 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{ 
    1450:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1452:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1454:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    1456:	2c01      	cmp	r4, #1
    1458:	d001      	beq.n	145e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    145a:	0018      	movs	r0, r3
    145c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    145e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1460:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1462:	2c00      	cmp	r4, #0
    1464:	d1f9      	bne.n	145a <spi_select_slave+0xa>
		if (select) {
    1466:	2a00      	cmp	r2, #0
    1468:	d058      	beq.n	151c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    146a:	784b      	ldrb	r3, [r1, #1]
    146c:	2b00      	cmp	r3, #0
    146e:	d044      	beq.n	14fa <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1470:	6803      	ldr	r3, [r0, #0]
    1472:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1474:	07db      	lsls	r3, r3, #31
    1476:	d410      	bmi.n	149a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1478:	780a      	ldrb	r2, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    147a:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    147c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    147e:	2900      	cmp	r1, #0
    1480:	d104      	bne.n	148c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1482:	0953      	lsrs	r3, r2, #5
    1484:	01db      	lsls	r3, r3, #7
    1486:	492e      	ldr	r1, [pc, #184]	; (1540 <spi_select_slave+0xf0>)
    1488:	468c      	mov	ip, r1
    148a:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    148c:	211f      	movs	r1, #31
    148e:	4011      	ands	r1, r2
    1490:	2201      	movs	r2, #1
    1492:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1494:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1496:	2305      	movs	r3, #5
    1498:	e7df      	b.n	145a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    149a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    149c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    149e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    14a0:	2c00      	cmp	r4, #0
    14a2:	d104      	bne.n	14ae <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    14a4:	0953      	lsrs	r3, r2, #5
    14a6:	01db      	lsls	r3, r3, #7
    14a8:	4c25      	ldr	r4, [pc, #148]	; (1540 <spi_select_slave+0xf0>)
    14aa:	46a4      	mov	ip, r4
    14ac:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14ae:	241f      	movs	r4, #31
    14b0:	4014      	ands	r4, r2
    14b2:	2201      	movs	r2, #1
    14b4:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    14b6:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14b8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14ba:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    14bc:	07d2      	lsls	r2, r2, #31
    14be:	d501      	bpl.n	14c4 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    14c0:	788a      	ldrb	r2, [r1, #2]
    14c2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    14c4:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    14c6:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    14c8:	2a00      	cmp	r2, #0
    14ca:	d1c6      	bne.n	145a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    14cc:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    14ce:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    14d0:	7e13      	ldrb	r3, [r2, #24]
    14d2:	420b      	tst	r3, r1
    14d4:	d0fc      	beq.n	14d0 <spi_select_slave+0x80>
    14d6:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    14d8:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    14da:	0749      	lsls	r1, r1, #29
    14dc:	d5bd      	bpl.n	145a <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    14de:	8b53      	ldrh	r3, [r2, #26]
    14e0:	075b      	lsls	r3, r3, #29
    14e2:	d501      	bpl.n	14e8 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    14e4:	2304      	movs	r3, #4
    14e6:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14e8:	7983      	ldrb	r3, [r0, #6]
    14ea:	2b01      	cmp	r3, #1
    14ec:	d002      	beq.n	14f4 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    14ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14f0:	2300      	movs	r3, #0
    14f2:	e7b2      	b.n	145a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    14f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14f6:	2300      	movs	r3, #0
    14f8:	e7af      	b.n	145a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    14fa:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    14fc:	09d1      	lsrs	r1, r2, #7
		return NULL;
    14fe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1500:	2900      	cmp	r1, #0
    1502:	d104      	bne.n	150e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1504:	0953      	lsrs	r3, r2, #5
    1506:	01db      	lsls	r3, r3, #7
    1508:	490d      	ldr	r1, [pc, #52]	; (1540 <spi_select_slave+0xf0>)
    150a:	468c      	mov	ip, r1
    150c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    150e:	211f      	movs	r1, #31
    1510:	4011      	ands	r1, r2
    1512:	2201      	movs	r2, #1
    1514:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1516:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1518:	2300      	movs	r3, #0
    151a:	e79e      	b.n	145a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    151c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    151e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1520:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1522:	2900      	cmp	r1, #0
    1524:	d104      	bne.n	1530 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    1526:	0953      	lsrs	r3, r2, #5
    1528:	01db      	lsls	r3, r3, #7
    152a:	4905      	ldr	r1, [pc, #20]	; (1540 <spi_select_slave+0xf0>)
    152c:	468c      	mov	ip, r1
    152e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1530:	211f      	movs	r1, #31
    1532:	4011      	ands	r1, r2
    1534:	2201      	movs	r2, #1
    1536:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1538:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    153a:	2300      	movs	r3, #0
    153c:	e78d      	b.n	145a <spi_select_slave+0xa>
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	41004400 	.word	0x41004400

00001544 <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1544:	1c93      	adds	r3, r2, #2
    1546:	009b      	lsls	r3, r3, #2
    1548:	18c3      	adds	r3, r0, r3
    154a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    154c:	2136      	movs	r1, #54	; 0x36
    154e:	2301      	movs	r3, #1
    1550:	4093      	lsls	r3, r2
    1552:	001a      	movs	r2, r3
    1554:	5c43      	ldrb	r3, [r0, r1]
    1556:	4313      	orrs	r3, r2
    1558:	5443      	strb	r3, [r0, r1]
}
    155a:	4770      	bx	lr

0000155c <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    155c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    155e:	2417      	movs	r4, #23
	if (length == 0) {
    1560:	2b00      	cmp	r3, #0
    1562:	d101      	bne.n	1568 <spi_transceive_buffer_job+0xc>

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);

	return STATUS_OK;
}
    1564:	0020      	movs	r0, r4
    1566:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
    1568:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
    156a:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
    156c:	2d00      	cmp	r5, #0
    156e:	d0f9      	beq.n	1564 <spi_transceive_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
    1570:	341c      	adds	r4, #28
    1572:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
    1574:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1576:	2d05      	cmp	r5, #5
    1578:	d0f4      	beq.n	1564 <spi_transceive_buffer_job+0x8>
	module->remaining_tx_buffer_length = length;
    157a:	8683      	strh	r3, [r0, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
    157c:	8603      	strh	r3, [r0, #48]	; 0x30
	module->rx_buffer_ptr = rx_data;
    157e:	6282      	str	r2, [r0, #40]	; 0x28
	module->tx_buffer_ptr = tx_data;
    1580:	62c1      	str	r1, [r0, #44]	; 0x2c
	module->status = STATUS_BUSY;
    1582:	2205      	movs	r2, #5
    1584:	2338      	movs	r3, #56	; 0x38
    1586:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_BOTH;
    1588:	3b36      	subs	r3, #54	; 0x36
    158a:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
    158c:	6803      	ldr	r3, [r0, #0]
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    158e:	759a      	strb	r2, [r3, #22]
	if (module->mode == SPI_MODE_SLAVE) {
    1590:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    1592:	2400      	movs	r4, #0
	if (module->mode == SPI_MODE_SLAVE) {
    1594:	2a00      	cmp	r2, #0
    1596:	d1e5      	bne.n	1564 <spi_transceive_buffer_job+0x8>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1598:	3202      	adds	r2, #2
    159a:	761a      	strb	r2, [r3, #24]
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    159c:	759a      	strb	r2, [r3, #22]
    159e:	e7e1      	b.n	1564 <spi_transceive_buffer_job+0x8>

000015a0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    15a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    15a2:	0080      	lsls	r0, r0, #2
    15a4:	4b85      	ldr	r3, [pc, #532]	; (17bc <_spi_interrupt_handler+0x21c>)
    15a6:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    15a8:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    15aa:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    15ac:	5ce3      	ldrb	r3, [r4, r3]
    15ae:	2236      	movs	r2, #54	; 0x36
    15b0:	5ca7      	ldrb	r7, [r4, r2]
    15b2:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    15b4:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    15b6:	7db5      	ldrb	r5, [r6, #22]
    15b8:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    15ba:	07eb      	lsls	r3, r5, #31
    15bc:	d52e      	bpl.n	161c <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    15be:	7963      	ldrb	r3, [r4, #5]
    15c0:	2b01      	cmp	r3, #1
    15c2:	d025      	beq.n	1610 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    15c4:	2b00      	cmp	r3, #0
    15c6:	d129      	bne.n	161c <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    15c8:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    15ca:	2b00      	cmp	r3, #0
    15cc:	d026      	beq.n	161c <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    15ce:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    15d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    15d2:	7813      	ldrb	r3, [r2, #0]
    15d4:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    15d6:	1c50      	adds	r0, r2, #1
    15d8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    15da:	79a0      	ldrb	r0, [r4, #6]
    15dc:	2801      	cmp	r0, #1
    15de:	d100      	bne.n	15e2 <_spi_interrupt_handler+0x42>
    15e0:	e069      	b.n	16b6 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    15e2:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    15e4:	05db      	lsls	r3, r3, #23
    15e6:	0ddb      	lsrs	r3, r3, #23
    15e8:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    15ea:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    15ec:	3b01      	subs	r3, #1
    15ee:	b29b      	uxth	r3, r3
    15f0:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    15f2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    15f4:	b29b      	uxth	r3, r3
    15f6:	2b00      	cmp	r3, #0
    15f8:	d110      	bne.n	161c <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    15fa:	3301      	adds	r3, #1
    15fc:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    15fe:	7a63      	ldrb	r3, [r4, #9]
    1600:	2b01      	cmp	r3, #1
    1602:	d10b      	bne.n	161c <_spi_interrupt_handler+0x7c>
    1604:	79e3      	ldrb	r3, [r4, #7]
    1606:	2b00      	cmp	r3, #0
    1608:	d108      	bne.n	161c <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    160a:	3302      	adds	r3, #2
    160c:	75b3      	strb	r3, [r6, #22]
    160e:	e005      	b.n	161c <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    1610:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1612:	2b00      	cmp	r3, #0
    1614:	d03e      	beq.n	1694 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    1616:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1618:	2b00      	cmp	r3, #0
    161a:	d1d8      	bne.n	15ce <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    161c:	076b      	lsls	r3, r5, #29
    161e:	d511      	bpl.n	1644 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1620:	8b73      	ldrh	r3, [r6, #26]
    1622:	075b      	lsls	r3, r3, #29
    1624:	d551      	bpl.n	16ca <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1626:	7a63      	ldrb	r3, [r4, #9]
    1628:	2b01      	cmp	r3, #1
    162a:	d008      	beq.n	163e <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    162c:	221e      	movs	r2, #30
    162e:	2338      	movs	r3, #56	; 0x38
    1630:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1632:	3b35      	subs	r3, #53	; 0x35
    1634:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1636:	3302      	adds	r3, #2
    1638:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    163a:	073b      	lsls	r3, r7, #28
    163c:	d441      	bmi.n	16c2 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    163e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1640:	2304      	movs	r3, #4
    1642:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1644:	07ab      	lsls	r3, r5, #30
    1646:	d515      	bpl.n	1674 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1648:	7963      	ldrb	r3, [r4, #5]
    164a:	2b00      	cmp	r3, #0
    164c:	d10e      	bne.n	166c <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    164e:	3307      	adds	r3, #7
    1650:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1652:	3b05      	subs	r3, #5
    1654:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1656:	3301      	adds	r3, #1
    1658:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    165a:	2300      	movs	r3, #0
    165c:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    165e:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1660:	3338      	adds	r3, #56	; 0x38
    1662:	2200      	movs	r2, #0
    1664:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    1666:	06fb      	lsls	r3, r7, #27
    1668:	d500      	bpl.n	166c <_spi_interrupt_handler+0xcc>
    166a:	e07f      	b.n	176c <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    166c:	7963      	ldrb	r3, [r4, #5]
    166e:	2b01      	cmp	r3, #1
    1670:	d100      	bne.n	1674 <_spi_interrupt_handler+0xd4>
    1672:	e07f      	b.n	1774 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1674:	072b      	lsls	r3, r5, #28
    1676:	d508      	bpl.n	168a <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    1678:	7963      	ldrb	r3, [r4, #5]
    167a:	2b00      	cmp	r3, #0
    167c:	d105      	bne.n	168a <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    167e:	3308      	adds	r3, #8
    1680:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1682:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1684:	06bb      	lsls	r3, r7, #26
    1686:	d500      	bpl.n	168a <_spi_interrupt_handler+0xea>
    1688:	e08a      	b.n	17a0 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    168a:	b26d      	sxtb	r5, r5
    168c:	2d00      	cmp	r5, #0
    168e:	da00      	bge.n	1692 <_spi_interrupt_handler+0xf2>
    1690:	e08a      	b.n	17a8 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    1694:	4b4a      	ldr	r3, [pc, #296]	; (17c0 <_spi_interrupt_handler+0x220>)
    1696:	881b      	ldrh	r3, [r3, #0]
    1698:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    169a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    169c:	3b01      	subs	r3, #1
    169e:	b29b      	uxth	r3, r3
    16a0:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    16a2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    16a4:	b29b      	uxth	r3, r3
    16a6:	2b00      	cmp	r3, #0
    16a8:	d101      	bne.n	16ae <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    16aa:	3301      	adds	r3, #1
    16ac:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    16ae:	7963      	ldrb	r3, [r4, #5]
		if (0
    16b0:	2b01      	cmp	r3, #1
    16b2:	d0b0      	beq.n	1616 <_spi_interrupt_handler+0x76>
    16b4:	e786      	b.n	15c4 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    16b6:	7850      	ldrb	r0, [r2, #1]
    16b8:	0200      	lsls	r0, r0, #8
    16ba:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    16bc:	3202      	adds	r2, #2
    16be:	62e2      	str	r2, [r4, #44]	; 0x2c
    16c0:	e790      	b.n	15e4 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    16c2:	0020      	movs	r0, r4
    16c4:	69a3      	ldr	r3, [r4, #24]
    16c6:	4798      	blx	r3
    16c8:	e7b9      	b.n	163e <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    16ca:	7a63      	ldrb	r3, [r4, #9]
    16cc:	2b01      	cmp	r3, #1
    16ce:	d027      	beq.n	1720 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    16d0:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    16d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16d4:	05db      	lsls	r3, r3, #23
    16d6:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    16d8:	b2da      	uxtb	r2, r3
    16da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    16dc:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    16de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    16e0:	1c51      	adds	r1, r2, #1
    16e2:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    16e4:	79a1      	ldrb	r1, [r4, #6]
    16e6:	2901      	cmp	r1, #1
    16e8:	d033      	beq.n	1752 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    16ea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    16ec:	3b01      	subs	r3, #1
    16ee:	b29b      	uxth	r3, r3
    16f0:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    16f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    16f4:	b29b      	uxth	r3, r3
    16f6:	2b00      	cmp	r3, #0
    16f8:	d1a4      	bne.n	1644 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    16fa:	2200      	movs	r2, #0
    16fc:	3338      	adds	r3, #56	; 0x38
    16fe:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1700:	3b34      	subs	r3, #52	; 0x34
    1702:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1704:	7a63      	ldrb	r3, [r4, #9]
    1706:	2b02      	cmp	r3, #2
    1708:	d029      	beq.n	175e <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    170a:	7a63      	ldrb	r3, [r4, #9]
    170c:	2b00      	cmp	r3, #0
    170e:	d000      	beq.n	1712 <_spi_interrupt_handler+0x172>
    1710:	e798      	b.n	1644 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1712:	07bb      	lsls	r3, r7, #30
    1714:	d400      	bmi.n	1718 <_spi_interrupt_handler+0x178>
    1716:	e795      	b.n	1644 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1718:	0020      	movs	r0, r4
    171a:	6923      	ldr	r3, [r4, #16]
    171c:	4798      	blx	r3
    171e:	e791      	b.n	1644 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1720:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    1722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1724:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1726:	3b01      	subs	r3, #1
    1728:	b29b      	uxth	r3, r3
    172a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    172c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    172e:	b29b      	uxth	r3, r3
    1730:	2b00      	cmp	r3, #0
    1732:	d000      	beq.n	1736 <_spi_interrupt_handler+0x196>
    1734:	e786      	b.n	1644 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1736:	3304      	adds	r3, #4
    1738:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    173a:	2200      	movs	r2, #0
    173c:	3334      	adds	r3, #52	; 0x34
    173e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1740:	3b35      	subs	r3, #53	; 0x35
    1742:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1744:	07fb      	lsls	r3, r7, #31
    1746:	d400      	bmi.n	174a <_spi_interrupt_handler+0x1aa>
    1748:	e77c      	b.n	1644 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    174a:	0020      	movs	r0, r4
    174c:	68e3      	ldr	r3, [r4, #12]
    174e:	4798      	blx	r3
    1750:	e778      	b.n	1644 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1752:	0a1b      	lsrs	r3, r3, #8
    1754:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1758:	3301      	adds	r3, #1
    175a:	62a3      	str	r3, [r4, #40]	; 0x28
    175c:	e7c5      	b.n	16ea <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    175e:	077b      	lsls	r3, r7, #29
    1760:	d400      	bmi.n	1764 <_spi_interrupt_handler+0x1c4>
    1762:	e76f      	b.n	1644 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1764:	0020      	movs	r0, r4
    1766:	6963      	ldr	r3, [r4, #20]
    1768:	4798      	blx	r3
    176a:	e76b      	b.n	1644 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    176c:	0020      	movs	r0, r4
    176e:	69e3      	ldr	r3, [r4, #28]
    1770:	4798      	blx	r3
    1772:	e77b      	b.n	166c <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1774:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1776:	2b01      	cmp	r3, #1
    1778:	d000      	beq.n	177c <_spi_interrupt_handler+0x1dc>
    177a:	e786      	b.n	168a <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    177c:	79e3      	ldrb	r3, [r4, #7]
    177e:	2b00      	cmp	r3, #0
    1780:	d000      	beq.n	1784 <_spi_interrupt_handler+0x1e4>
    1782:	e782      	b.n	168a <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1784:	3302      	adds	r3, #2
    1786:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1788:	3301      	adds	r3, #1
    178a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    178c:	2200      	movs	r2, #0
    178e:	3335      	adds	r3, #53	; 0x35
    1790:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1792:	07fb      	lsls	r3, r7, #31
    1794:	d400      	bmi.n	1798 <_spi_interrupt_handler+0x1f8>
    1796:	e76d      	b.n	1674 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1798:	0020      	movs	r0, r4
    179a:	68e3      	ldr	r3, [r4, #12]
    179c:	4798      	blx	r3
    179e:	e769      	b.n	1674 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    17a0:	0020      	movs	r0, r4
    17a2:	6a23      	ldr	r3, [r4, #32]
    17a4:	4798      	blx	r3
    17a6:	e770      	b.n	168a <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    17a8:	2380      	movs	r3, #128	; 0x80
    17aa:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    17ac:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    17ae:	067b      	lsls	r3, r7, #25
    17b0:	d400      	bmi.n	17b4 <_spi_interrupt_handler+0x214>
    17b2:	e76e      	b.n	1692 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    17b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    17b6:	0020      	movs	r0, r4
    17b8:	4798      	blx	r3
}
    17ba:	e76a      	b.n	1692 <_spi_interrupt_handler+0xf2>
    17bc:	200001dc 	.word	0x200001dc
    17c0:	200001e4 	.word	0x200001e4

000017c4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    17c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17c6:	46c6      	mov	lr, r8
    17c8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    17ca:	0080      	lsls	r0, r0, #2
    17cc:	4b0e      	ldr	r3, [pc, #56]	; (1808 <_tcc_interrupt_handler+0x44>)
    17ce:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    17d0:	683b      	ldr	r3, [r7, #0]
    17d2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    17d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    17d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    17d8:	4013      	ands	r3, r2
    17da:	401e      	ands	r6, r3
    17dc:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    17de:	4b0b      	ldr	r3, [pc, #44]	; (180c <_tcc_interrupt_handler+0x48>)
    17e0:	4698      	mov	r8, r3
    17e2:	e002      	b.n	17ea <_tcc_interrupt_handler+0x26>
    17e4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    17e6:	2c30      	cmp	r4, #48	; 0x30
    17e8:	d00a      	beq.n	1800 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    17ea:	4643      	mov	r3, r8
    17ec:	58e5      	ldr	r5, [r4, r3]
    17ee:	4235      	tst	r5, r6
    17f0:	d0f8      	beq.n	17e4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    17f2:	193b      	adds	r3, r7, r4
    17f4:	685b      	ldr	r3, [r3, #4]
    17f6:	0038      	movs	r0, r7
    17f8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    17fa:	683b      	ldr	r3, [r7, #0]
    17fc:	62dd      	str	r5, [r3, #44]	; 0x2c
    17fe:	e7f1      	b.n	17e4 <_tcc_interrupt_handler+0x20>
		}
	}
}
    1800:	bc04      	pop	{r2}
    1802:	4690      	mov	r8, r2
    1804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1806:	46c0      	nop			; (mov r8, r8)
    1808:	200001e8 	.word	0x200001e8
    180c:	00002848 	.word	0x00002848

00001810 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1810:	b510      	push	{r4, lr}
    1812:	2000      	movs	r0, #0
    1814:	4b01      	ldr	r3, [pc, #4]	; (181c <TCC0_Handler+0xc>)
    1816:	4798      	blx	r3
    1818:	bd10      	pop	{r4, pc}
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	000017c5 	.word	0x000017c5

00001820 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1820:	1c93      	adds	r3, r2, #2
    1822:	009b      	lsls	r3, r3, #2
    1824:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1826:	2a02      	cmp	r2, #2
    1828:	d009      	beq.n	183e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    182a:	2a03      	cmp	r2, #3
    182c:	d00c      	beq.n	1848 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    182e:	2301      	movs	r3, #1
    1830:	4093      	lsls	r3, r2
    1832:	001a      	movs	r2, r3
    1834:	7e03      	ldrb	r3, [r0, #24]
    1836:	4313      	orrs	r3, r2
    1838:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    183a:	2000      	movs	r0, #0
    183c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    183e:	7e03      	ldrb	r3, [r0, #24]
    1840:	2210      	movs	r2, #16
    1842:	4313      	orrs	r3, r2
    1844:	7603      	strb	r3, [r0, #24]
    1846:	e7f8      	b.n	183a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1848:	7e03      	ldrb	r3, [r0, #24]
    184a:	2220      	movs	r2, #32
    184c:	4313      	orrs	r3, r2
    184e:	7603      	strb	r3, [r0, #24]
    1850:	e7f3      	b.n	183a <tc_register_callback+0x1a>
	...

00001854 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1854:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1856:	0080      	lsls	r0, r0, #2
    1858:	4b16      	ldr	r3, [pc, #88]	; (18b4 <_tc_interrupt_handler+0x60>)
    185a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    185c:	6823      	ldr	r3, [r4, #0]
    185e:	7b9d      	ldrb	r5, [r3, #14]
    1860:	7e22      	ldrb	r2, [r4, #24]
    1862:	7e63      	ldrb	r3, [r4, #25]
    1864:	4013      	ands	r3, r2
    1866:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1868:	07eb      	lsls	r3, r5, #31
    186a:	d406      	bmi.n	187a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    186c:	07ab      	lsls	r3, r5, #30
    186e:	d40b      	bmi.n	1888 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1870:	06eb      	lsls	r3, r5, #27
    1872:	d410      	bmi.n	1896 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1874:	06ab      	lsls	r3, r5, #26
    1876:	d415      	bmi.n	18a4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1878:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    187a:	0020      	movs	r0, r4
    187c:	68a3      	ldr	r3, [r4, #8]
    187e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1880:	2301      	movs	r3, #1
    1882:	6822      	ldr	r2, [r4, #0]
    1884:	7393      	strb	r3, [r2, #14]
    1886:	e7f1      	b.n	186c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1888:	0020      	movs	r0, r4
    188a:	68e3      	ldr	r3, [r4, #12]
    188c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    188e:	2302      	movs	r3, #2
    1890:	6822      	ldr	r2, [r4, #0]
    1892:	7393      	strb	r3, [r2, #14]
    1894:	e7ec      	b.n	1870 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1896:	0020      	movs	r0, r4
    1898:	6923      	ldr	r3, [r4, #16]
    189a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    189c:	2310      	movs	r3, #16
    189e:	6822      	ldr	r2, [r4, #0]
    18a0:	7393      	strb	r3, [r2, #14]
    18a2:	e7e7      	b.n	1874 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    18a4:	0020      	movs	r0, r4
    18a6:	6963      	ldr	r3, [r4, #20]
    18a8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    18aa:	6823      	ldr	r3, [r4, #0]
    18ac:	2220      	movs	r2, #32
    18ae:	739a      	strb	r2, [r3, #14]
}
    18b0:	e7e2      	b.n	1878 <_tc_interrupt_handler+0x24>
    18b2:	46c0      	nop			; (mov r8, r8)
    18b4:	200001ec 	.word	0x200001ec

000018b8 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    18b8:	b510      	push	{r4, lr}
    18ba:	2000      	movs	r0, #0
    18bc:	4b01      	ldr	r3, [pc, #4]	; (18c4 <TC1_Handler+0xc>)
    18be:	4798      	blx	r3
    18c0:	bd10      	pop	{r4, pc}
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	00001855 	.word	0x00001855

000018c8 <TC2_Handler>:
    18c8:	b510      	push	{r4, lr}
    18ca:	2001      	movs	r0, #1
    18cc:	4b01      	ldr	r3, [pc, #4]	; (18d4 <TC2_Handler+0xc>)
    18ce:	4798      	blx	r3
    18d0:	bd10      	pop	{r4, pc}
    18d2:	46c0      	nop			; (mov r8, r8)
    18d4:	00001855 	.word	0x00001855

000018d8 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    18d8:	4b06      	ldr	r3, [pc, #24]	; (18f4 <_tc_get_inst_index+0x1c>)
    18da:	4298      	cmp	r0, r3
    18dc:	d008      	beq.n	18f0 <_tc_get_inst_index+0x18>
    18de:	4a06      	ldr	r2, [pc, #24]	; (18f8 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    18e0:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    18e2:	4290      	cmp	r0, r2
    18e4:	d001      	beq.n	18ea <_tc_get_inst_index+0x12>
}
    18e6:	0018      	movs	r0, r3
    18e8:	4770      	bx	lr
    18ea:	3301      	adds	r3, #1
			return i;
    18ec:	b2db      	uxtb	r3, r3
    18ee:	e7fa      	b.n	18e6 <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    18f0:	2300      	movs	r3, #0
    18f2:	e7fb      	b.n	18ec <_tc_get_inst_index+0x14>
    18f4:	42001800 	.word	0x42001800
    18f8:	42001c00 	.word	0x42001c00

000018fc <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    18fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18fe:	b085      	sub	sp, #20
    1900:	0004      	movs	r4, r0
    1902:	000d      	movs	r5, r1
    1904:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1906:	0008      	movs	r0, r1
    1908:	4b82      	ldr	r3, [pc, #520]	; (1b14 <tc_init+0x218>)
    190a:	4798      	blx	r3
    190c:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    190e:	ab03      	add	r3, sp, #12
    1910:	2212      	movs	r2, #18
    1912:	701a      	strb	r2, [r3, #0]
    1914:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1916:	ab02      	add	r3, sp, #8
    1918:	322e      	adds	r2, #46	; 0x2e
    191a:	801a      	strh	r2, [r3, #0]
    191c:	3240      	adds	r2, #64	; 0x40
    191e:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1920:	2300      	movs	r3, #0
    1922:	60a3      	str	r3, [r4, #8]
    1924:	60e3      	str	r3, [r4, #12]
    1926:	6123      	str	r3, [r4, #16]
    1928:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    192a:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    192c:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    192e:	0082      	lsls	r2, r0, #2
    1930:	4b79      	ldr	r3, [pc, #484]	; (1b18 <tc_init+0x21c>)
    1932:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1934:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1936:	78b3      	ldrb	r3, [r6, #2]
    1938:	2b08      	cmp	r3, #8
    193a:	d006      	beq.n	194a <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    193c:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    193e:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1940:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1942:	07db      	lsls	r3, r3, #31
    1944:	d505      	bpl.n	1952 <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1946:	b005      	add	sp, #20
    1948:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    194a:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    194c:	07fa      	lsls	r2, r7, #31
    194e:	d4fa      	bmi.n	1946 <tc_init+0x4a>
    1950:	e7f4      	b.n	193c <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1952:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1954:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1956:	06db      	lsls	r3, r3, #27
    1958:	d4f5      	bmi.n	1946 <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    195a:	882b      	ldrh	r3, [r5, #0]
    195c:	079b      	lsls	r3, r3, #30
    195e:	d4f2      	bmi.n	1946 <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
    1960:	7c33      	ldrb	r3, [r6, #16]
    1962:	2b00      	cmp	r3, #0
    1964:	d000      	beq.n	1968 <tc_init+0x6c>
    1966:	e07a      	b.n	1a5e <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
    1968:	7f33      	ldrb	r3, [r6, #28]
    196a:	2b00      	cmp	r3, #0
    196c:	d000      	beq.n	1970 <tc_init+0x74>
    196e:	e082      	b.n	1a76 <tc_init+0x17a>
    1970:	496a      	ldr	r1, [pc, #424]	; (1b1c <tc_init+0x220>)
    1972:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    1974:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1976:	ab02      	add	r3, sp, #8
    1978:	5ad3      	ldrh	r3, [r2, r3]
    197a:	4303      	orrs	r3, r0
    197c:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    197e:	78b3      	ldrb	r3, [r6, #2]
    1980:	2b08      	cmp	r3, #8
    1982:	d100      	bne.n	1986 <tc_init+0x8a>
    1984:	e087      	b.n	1a96 <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
    1986:	7833      	ldrb	r3, [r6, #0]
    1988:	466a      	mov	r2, sp
    198a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    198c:	ab03      	add	r3, sp, #12
    198e:	5ddf      	ldrb	r7, [r3, r7]
    1990:	4669      	mov	r1, sp
    1992:	0038      	movs	r0, r7
    1994:	4b62      	ldr	r3, [pc, #392]	; (1b20 <tc_init+0x224>)
    1996:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1998:	0038      	movs	r0, r7
    199a:	4b62      	ldr	r3, [pc, #392]	; (1b24 <tc_init+0x228>)
    199c:	4798      	blx	r3
	ctrla_tmp =
    199e:	8931      	ldrh	r1, [r6, #8]
    19a0:	88b3      	ldrh	r3, [r6, #4]
    19a2:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    19a4:	78b1      	ldrb	r1, [r6, #2]
    19a6:	79b2      	ldrb	r2, [r6, #6]
    19a8:	4311      	orrs	r1, r2
	ctrla_tmp =
    19aa:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    19ac:	7873      	ldrb	r3, [r6, #1]
    19ae:	2b00      	cmp	r3, #0
    19b0:	d002      	beq.n	19b8 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    19b2:	2380      	movs	r3, #128	; 0x80
    19b4:	011b      	lsls	r3, r3, #4
    19b6:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    19b8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    19ba:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    19bc:	b25b      	sxtb	r3, r3
    19be:	2b00      	cmp	r3, #0
    19c0:	dbfb      	blt.n	19ba <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    19c2:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    19c4:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    19c6:	1e4b      	subs	r3, r1, #1
    19c8:	4199      	sbcs	r1, r3
    19ca:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    19cc:	7bb3      	ldrb	r3, [r6, #14]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d001      	beq.n	19d6 <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    19d2:	2301      	movs	r3, #1
    19d4:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    19d6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    19d8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    19da:	b25b      	sxtb	r3, r3
    19dc:	2b00      	cmp	r3, #0
    19de:	dbfb      	blt.n	19d8 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    19e0:	23ff      	movs	r3, #255	; 0xff
    19e2:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    19e4:	2900      	cmp	r1, #0
    19e6:	d005      	beq.n	19f4 <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    19e8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    19ea:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    19ec:	b25b      	sxtb	r3, r3
    19ee:	2b00      	cmp	r3, #0
    19f0:	dbfb      	blt.n	19ea <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    19f2:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    19f4:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    19f6:	7af3      	ldrb	r3, [r6, #11]
    19f8:	2b00      	cmp	r3, #0
    19fa:	d001      	beq.n	1a00 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    19fc:	2310      	movs	r3, #16
    19fe:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1a00:	7b33      	ldrb	r3, [r6, #12]
    1a02:	2b00      	cmp	r3, #0
    1a04:	d001      	beq.n	1a0a <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1a06:	2320      	movs	r3, #32
    1a08:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a0a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a0c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1a0e:	b25b      	sxtb	r3, r3
    1a10:	2b00      	cmp	r3, #0
    1a12:	dbfb      	blt.n	1a0c <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1a14:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a16:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a18:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1a1a:	b25b      	sxtb	r3, r3
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	dbfb      	blt.n	1a18 <tc_init+0x11c>
	switch (module_inst->counter_size) {
    1a20:	7923      	ldrb	r3, [r4, #4]
    1a22:	2b04      	cmp	r3, #4
    1a24:	d03f      	beq.n	1aa6 <tc_init+0x1aa>
    1a26:	2b08      	cmp	r3, #8
    1a28:	d05e      	beq.n	1ae8 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
    1a2a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	d000      	beq.n	1a32 <tc_init+0x136>
    1a30:	e789      	b.n	1946 <tc_init+0x4a>
    1a32:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1a34:	b25b      	sxtb	r3, r3
    1a36:	2b00      	cmp	r3, #0
    1a38:	dbfb      	blt.n	1a32 <tc_init+0x136>
				= config->counter_16_bit.value;
    1a3a:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1a3c:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a3e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a40:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1a42:	b25b      	sxtb	r3, r3
    1a44:	2b00      	cmp	r3, #0
    1a46:	dbfb      	blt.n	1a40 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
    1a48:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1a4a:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1a4c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1a4e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1a50:	b25b      	sxtb	r3, r3
    1a52:	2b00      	cmp	r3, #0
    1a54:	dbfb      	blt.n	1a4e <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
    1a56:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1a58:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1a5a:	2000      	movs	r0, #0
    1a5c:	e773      	b.n	1946 <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1a5e:	a901      	add	r1, sp, #4
    1a60:	2301      	movs	r3, #1
    1a62:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1a64:	2200      	movs	r2, #0
    1a66:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1a68:	7e32      	ldrb	r2, [r6, #24]
    1a6a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1a6c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1a6e:	7d30      	ldrb	r0, [r6, #20]
    1a70:	4b2d      	ldr	r3, [pc, #180]	; (1b28 <tc_init+0x22c>)
    1a72:	4798      	blx	r3
    1a74:	e778      	b.n	1968 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1a76:	a901      	add	r1, sp, #4
    1a78:	2301      	movs	r3, #1
    1a7a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1a7c:	2200      	movs	r2, #0
    1a7e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1a80:	3224      	adds	r2, #36	; 0x24
    1a82:	18b2      	adds	r2, r6, r2
    1a84:	7812      	ldrb	r2, [r2, #0]
    1a86:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1a88:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1a8a:	331f      	adds	r3, #31
    1a8c:	18f3      	adds	r3, r6, r3
    1a8e:	7818      	ldrb	r0, [r3, #0]
    1a90:	4b25      	ldr	r3, [pc, #148]	; (1b28 <tc_init+0x22c>)
    1a92:	4798      	blx	r3
    1a94:	e76c      	b.n	1970 <tc_init+0x74>
    1a96:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1a98:	1c7a      	adds	r2, r7, #1
    1a9a:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1a9c:	ab02      	add	r3, sp, #8
    1a9e:	5ad3      	ldrh	r3, [r2, r3]
    1aa0:	4303      	orrs	r3, r0
    1aa2:	620b      	str	r3, [r1, #32]
    1aa4:	e76f      	b.n	1986 <tc_init+0x8a>
    1aa6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1aa8:	b25b      	sxtb	r3, r3
    1aaa:	2b00      	cmp	r3, #0
    1aac:	dbfb      	blt.n	1aa6 <tc_init+0x1aa>
					config->counter_8_bit.value;
    1aae:	2328      	movs	r3, #40	; 0x28
    1ab0:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1ab2:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ab4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ab6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ab8:	b25b      	sxtb	r3, r3
    1aba:	2b00      	cmp	r3, #0
    1abc:	dbfb      	blt.n	1ab6 <tc_init+0x1ba>
					config->counter_8_bit.period;
    1abe:	2329      	movs	r3, #41	; 0x29
    1ac0:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1ac2:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ac4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ac6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ac8:	b25b      	sxtb	r3, r3
    1aca:	2b00      	cmp	r3, #0
    1acc:	dbfb      	blt.n	1ac6 <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
    1ace:	232a      	movs	r3, #42	; 0x2a
    1ad0:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1ad2:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ad4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ad6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ad8:	b25b      	sxtb	r3, r3
    1ada:	2b00      	cmp	r3, #0
    1adc:	dbfb      	blt.n	1ad6 <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
    1ade:	232b      	movs	r3, #43	; 0x2b
    1ae0:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1ae2:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1ae4:	2000      	movs	r0, #0
    1ae6:	e72e      	b.n	1946 <tc_init+0x4a>
    1ae8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1aea:	b25b      	sxtb	r3, r3
    1aec:	2b00      	cmp	r3, #0
    1aee:	dbfb      	blt.n	1ae8 <tc_init+0x1ec>
				= config->counter_32_bit.value;
    1af0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1af2:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1af4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1af6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1af8:	b25b      	sxtb	r3, r3
    1afa:	2b00      	cmp	r3, #0
    1afc:	dbfb      	blt.n	1af6 <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
    1afe:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1b00:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1b02:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1b04:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1b06:	b25b      	sxtb	r3, r3
    1b08:	2b00      	cmp	r3, #0
    1b0a:	dbfb      	blt.n	1b04 <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
    1b0c:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1b0e:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1b10:	2000      	movs	r0, #0
    1b12:	e718      	b.n	1946 <tc_init+0x4a>
    1b14:	000018d9 	.word	0x000018d9
    1b18:	200001ec 	.word	0x200001ec
    1b1c:	40000400 	.word	0x40000400
    1b20:	00002449 	.word	0x00002449
    1b24:	000023bd 	.word	0x000023bd
    1b28:	00002541 	.word	0x00002541

00001b2c <tc_get_capture_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1b2c:	6802      	ldr	r2, [r0, #0]
    1b2e:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1b30:	b25b      	sxtb	r3, r3
    1b32:	2b00      	cmp	r3, #0
    1b34:	dbfb      	blt.n	1b2e <tc_get_capture_value+0x2>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1b36:	7903      	ldrb	r3, [r0, #4]
    1b38:	2b04      	cmp	r3, #4
    1b3a:	d005      	beq.n	1b48 <tc_get_capture_value+0x1c>
    1b3c:	2b08      	cmp	r3, #8
    1b3e:	d012      	beq.n	1b66 <tc_get_capture_value+0x3a>
				return tc_module->COUNT32.CC[channel_index].reg;
			}
	}

	Assert(false);
	return 0;
    1b40:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    1b42:	2b00      	cmp	r3, #0
    1b44:	d007      	beq.n	1b56 <tc_get_capture_value+0x2a>
}
    1b46:	4770      	bx	lr
	return 0;
    1b48:	2000      	movs	r0, #0
			if (channel_index <
    1b4a:	2901      	cmp	r1, #1
    1b4c:	d8fb      	bhi.n	1b46 <tc_get_capture_value+0x1a>
				return tc_module->COUNT8.CC[channel_index].reg;
    1b4e:	1852      	adds	r2, r2, r1
    1b50:	7e10      	ldrb	r0, [r2, #24]
    1b52:	b2c0      	uxtb	r0, r0
    1b54:	e7f7      	b.n	1b46 <tc_get_capture_value+0x1a>
	return 0;
    1b56:	2000      	movs	r0, #0
			if (channel_index <
    1b58:	2901      	cmp	r1, #1
    1b5a:	d8f4      	bhi.n	1b46 <tc_get_capture_value+0x1a>
				return tc_module->COUNT16.CC[channel_index].reg;
    1b5c:	310c      	adds	r1, #12
    1b5e:	0049      	lsls	r1, r1, #1
    1b60:	5a88      	ldrh	r0, [r1, r2]
    1b62:	b280      	uxth	r0, r0
    1b64:	e7ef      	b.n	1b46 <tc_get_capture_value+0x1a>
			if (channel_index <
    1b66:	2901      	cmp	r1, #1
    1b68:	d803      	bhi.n	1b72 <tc_get_capture_value+0x46>
				return tc_module->COUNT32.CC[channel_index].reg;
    1b6a:	3106      	adds	r1, #6
    1b6c:	0089      	lsls	r1, r1, #2
    1b6e:	5888      	ldr	r0, [r1, r2]
    1b70:	e7e9      	b.n	1b46 <tc_get_capture_value+0x1a>
	return 0;
    1b72:	2000      	movs	r0, #0
    1b74:	e7e7      	b.n	1b46 <tc_get_capture_value+0x1a>
	...

00001b78 <tc_callback_track_led_control>:

//Track LED control
void tc_callback_track_led_control()
{
	
	if(counter_timer == TIMER_MULTIPLIER_10)
    1b78:	4b25      	ldr	r3, [pc, #148]	; (1c10 <tc_callback_track_led_control+0x98>)
    1b7a:	781a      	ldrb	r2, [r3, #0]
    1b7c:	2a46      	cmp	r2, #70	; 0x46
    1b7e:	d00c      	beq.n	1b9a <tc_callback_track_led_control+0x22>
	{
		counter_timer = 0;
	}
	
	switch (track_led_mode)
    1b80:	4b24      	ldr	r3, [pc, #144]	; (1c14 <tc_callback_track_led_control+0x9c>)
    1b82:	781b      	ldrb	r3, [r3, #0]
    1b84:	2b01      	cmp	r3, #1
    1b86:	d022      	beq.n	1bce <tc_callback_track_led_control+0x56>
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d015      	beq.n	1bb8 <tc_callback_track_led_control+0x40>
    1b8c:	2b02      	cmp	r3, #2
    1b8e:	d02b      	beq.n	1be8 <tc_callback_track_led_control+0x70>
				{
					port_pin_toggle_output_level(TRACK_LED);
				}
				break;
		default :
				if((counter_timer == TIMER_MULTIPLIER_0) || (counter_timer == TIMER_MULTIPLIER_1))
    1b90:	2a00      	cmp	r2, #0
    1b92:	d00c      	beq.n	1bae <tc_callback_track_led_control+0x36>
    1b94:	2a07      	cmp	r2, #7
    1b96:	d133      	bne.n	1c00 <tc_callback_track_led_control+0x88>
    1b98:	e009      	b.n	1bae <tc_callback_track_led_control+0x36>
		counter_timer = 0;
    1b9a:	2200      	movs	r2, #0
    1b9c:	701a      	strb	r2, [r3, #0]
	switch (track_led_mode)
    1b9e:	4b1d      	ldr	r3, [pc, #116]	; (1c14 <tc_callback_track_led_control+0x9c>)
    1ba0:	781b      	ldrb	r3, [r3, #0]
    1ba2:	2b01      	cmp	r3, #1
    1ba4:	d013      	beq.n	1bce <tc_callback_track_led_control+0x56>
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	d006      	beq.n	1bb8 <tc_callback_track_led_control+0x40>
    1baa:	2b02      	cmp	r3, #2
    1bac:	d01c      	beq.n	1be8 <tc_callback_track_led_control+0x70>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1bae:	2280      	movs	r2, #128	; 0x80
    1bb0:	0092      	lsls	r2, r2, #2
    1bb2:	4b19      	ldr	r3, [pc, #100]	; (1c18 <tc_callback_track_led_control+0xa0>)
    1bb4:	61da      	str	r2, [r3, #28]
    1bb6:	e023      	b.n	1c00 <tc_callback_track_led_control+0x88>
				if((counter_timer == TIMER_MULTIPLIER_0) || (counter_timer == TIMER_MULTIPLIER_1))
    1bb8:	4b15      	ldr	r3, [pc, #84]	; (1c10 <tc_callback_track_led_control+0x98>)
    1bba:	781b      	ldrb	r3, [r3, #0]
    1bbc:	2b00      	cmp	r3, #0
    1bbe:	d001      	beq.n	1bc4 <tc_callback_track_led_control+0x4c>
    1bc0:	2b07      	cmp	r3, #7
    1bc2:	d11d      	bne.n	1c00 <tc_callback_track_led_control+0x88>
    1bc4:	2280      	movs	r2, #128	; 0x80
    1bc6:	0092      	lsls	r2, r2, #2
    1bc8:	4b13      	ldr	r3, [pc, #76]	; (1c18 <tc_callback_track_led_control+0xa0>)
    1bca:	61da      	str	r2, [r3, #28]
    1bcc:	e018      	b.n	1c00 <tc_callback_track_led_control+0x88>
				if((counter_timer == TIMER_MULTIPLIER_0) || (counter_timer == TIMER_MULTIPLIER_1)||(counter_timer == TIMER_MULTIPLIER_2) || (counter_timer == TIMER_MULTIPLIER_3))
    1bce:	4b10      	ldr	r3, [pc, #64]	; (1c10 <tc_callback_track_led_control+0x98>)
    1bd0:	781a      	ldrb	r2, [r3, #0]
    1bd2:	2a15      	cmp	r2, #21
    1bd4:	d814      	bhi.n	1c00 <tc_callback_track_led_control+0x88>
    1bd6:	4b11      	ldr	r3, [pc, #68]	; (1c1c <tc_callback_track_led_control+0xa4>)
    1bd8:	40d3      	lsrs	r3, r2
    1bda:	07db      	lsls	r3, r3, #31
    1bdc:	d510      	bpl.n	1c00 <tc_callback_track_led_control+0x88>
    1bde:	2280      	movs	r2, #128	; 0x80
    1be0:	0092      	lsls	r2, r2, #2
    1be2:	4b0d      	ldr	r3, [pc, #52]	; (1c18 <tc_callback_track_led_control+0xa0>)
    1be4:	61da      	str	r2, [r3, #28]
    1be6:	e00b      	b.n	1c00 <tc_callback_track_led_control+0x88>
				if((counter_timer == TIMER_MULTIPLIER_0) || (counter_timer == TIMER_MULTIPLIER_1)||(counter_timer == TIMER_MULTIPLIER_2) || (counter_timer == TIMER_MULTIPLIER_3) ||(counter_timer == TIMER_MULTIPLIER_4) || (counter_timer == TIMER_MULTIPLIER_5))
    1be8:	4b09      	ldr	r3, [pc, #36]	; (1c10 <tc_callback_track_led_control+0x98>)
    1bea:	781a      	ldrb	r2, [r3, #0]
    1bec:	2a1c      	cmp	r2, #28
    1bee:	d80c      	bhi.n	1c0a <tc_callback_track_led_control+0x92>
    1bf0:	4b0b      	ldr	r3, [pc, #44]	; (1c20 <tc_callback_track_led_control+0xa8>)
    1bf2:	40d3      	lsrs	r3, r2
    1bf4:	07db      	lsls	r3, r3, #31
    1bf6:	d508      	bpl.n	1c0a <tc_callback_track_led_control+0x92>
    1bf8:	2280      	movs	r2, #128	; 0x80
    1bfa:	0092      	lsls	r2, r2, #2
    1bfc:	4b06      	ldr	r3, [pc, #24]	; (1c18 <tc_callback_track_led_control+0xa0>)
    1bfe:	61da      	str	r2, [r3, #28]
				{
					port_pin_toggle_output_level(TRACK_LED);
				}
				break;
	 }
	counter_timer++;
    1c00:	4a03      	ldr	r2, [pc, #12]	; (1c10 <tc_callback_track_led_control+0x98>)
    1c02:	7813      	ldrb	r3, [r2, #0]
    1c04:	3301      	adds	r3, #1
    1c06:	7013      	strb	r3, [r2, #0]
	
	
}
    1c08:	4770      	bx	lr
				if((counter_timer == TIMER_MULTIPLIER_0) || (counter_timer == TIMER_MULTIPLIER_1)||(counter_timer == TIMER_MULTIPLIER_2) || (counter_timer == TIMER_MULTIPLIER_3) ||(counter_timer == TIMER_MULTIPLIER_4) || (counter_timer == TIMER_MULTIPLIER_5))
    1c0a:	2a23      	cmp	r2, #35	; 0x23
    1c0c:	d1f8      	bne.n	1c00 <tc_callback_track_led_control+0x88>
    1c0e:	e7f3      	b.n	1bf8 <tc_callback_track_led_control+0x80>
    1c10:	200000fc 	.word	0x200000fc
    1c14:	200000fd 	.word	0x200000fd
    1c18:	41004400 	.word	0x41004400
    1c1c:	00204081 	.word	0x00204081
    1c20:	10204081 	.word	0x10204081

00001c24 <init_track_led_timer>:
{
    1c24:	b510      	push	{r4, lr}
    1c26:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    1c28:	aa01      	add	r2, sp, #4
    1c2a:	2300      	movs	r3, #0
    1c2c:	2100      	movs	r1, #0
    1c2e:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1c30:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1c32:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1c34:	2000      	movs	r0, #0
    1c36:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1c38:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1c3a:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1c3c:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1c3e:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    1c40:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1c42:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1c44:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1c46:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1c48:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1c4a:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1c4c:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    1c4e:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1c50:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1c52:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT; //8
    1c54:	3304      	adds	r3, #4
    1c56:	7093      	strb	r3, [r2, #2]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024; //64
    1c58:	23e0      	movs	r3, #224	; 0xe0
    1c5a:	00db      	lsls	r3, r3, #3
    1c5c:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 0xFF;
    1c5e:	21ff      	movs	r1, #255	; 0xff
    1c60:	2329      	movs	r3, #41	; 0x29
    1c62:	54d1      	strb	r1, [r2, r3]
	tc_init(&tc_instance1, TC1, &config_tc);
    1c64:	4c07      	ldr	r4, [pc, #28]	; (1c84 <init_track_led_timer+0x60>)
    1c66:	4908      	ldr	r1, [pc, #32]	; (1c88 <init_track_led_timer+0x64>)
    1c68:	0020      	movs	r0, r4
    1c6a:	4b08      	ldr	r3, [pc, #32]	; (1c8c <init_track_led_timer+0x68>)
    1c6c:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c6e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c70:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1c72:	b25b      	sxtb	r3, r3
    1c74:	2b00      	cmp	r3, #0
    1c76:	dbfb      	blt.n	1c70 <init_track_led_timer+0x4c>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1c78:	8813      	ldrh	r3, [r2, #0]
    1c7a:	2102      	movs	r1, #2
    1c7c:	430b      	orrs	r3, r1
    1c7e:	8013      	strh	r3, [r2, #0]
}
    1c80:	b00e      	add	sp, #56	; 0x38
    1c82:	bd10      	pop	{r4, pc}
    1c84:	20000164 	.word	0x20000164
    1c88:	42001800 	.word	0x42001800
    1c8c:	000018fd 	.word	0x000018fd

00001c90 <config_callbacks_tc1>:



//Callbacks
void config_callbacks_tc1()
{
    1c90:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance1, tc_callback_track_led_control ,TC_CALLBACK_OVERFLOW);
    1c92:	4c0c      	ldr	r4, [pc, #48]	; (1cc4 <config_callbacks_tc1+0x34>)
    1c94:	2200      	movs	r2, #0
    1c96:	490c      	ldr	r1, [pc, #48]	; (1cc8 <config_callbacks_tc1+0x38>)
    1c98:	0020      	movs	r0, r4
    1c9a:	4b0c      	ldr	r3, [pc, #48]	; (1ccc <config_callbacks_tc1+0x3c>)
    1c9c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1c9e:	6820      	ldr	r0, [r4, #0]
    1ca0:	4b0b      	ldr	r3, [pc, #44]	; (1cd0 <config_callbacks_tc1+0x40>)
    1ca2:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1ca4:	4b0b      	ldr	r3, [pc, #44]	; (1cd4 <config_callbacks_tc1+0x44>)
    1ca6:	5c1a      	ldrb	r2, [r3, r0]
    1ca8:	231f      	movs	r3, #31
    1caa:	4013      	ands	r3, r2
    1cac:	2201      	movs	r2, #1
    1cae:	0011      	movs	r1, r2
    1cb0:	4099      	lsls	r1, r3
    1cb2:	4b09      	ldr	r3, [pc, #36]	; (1cd8 <config_callbacks_tc1+0x48>)
    1cb4:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1cb6:	7e63      	ldrb	r3, [r4, #25]
    1cb8:	2101      	movs	r1, #1
    1cba:	430b      	orrs	r3, r1
    1cbc:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1cbe:	6823      	ldr	r3, [r4, #0]
    1cc0:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_instance1, TC_CALLBACK_OVERFLOW);
}
    1cc2:	bd10      	pop	{r4, pc}
    1cc4:	20000164 	.word	0x20000164
    1cc8:	00001b79 	.word	0x00001b79
    1ccc:	00001821 	.word	0x00001821
    1cd0:	000018d9 	.word	0x000018d9
    1cd4:	00002878 	.word	0x00002878
    1cd8:	e000e100 	.word	0xe000e100

00001cdc <init_led_buttons>:


//Initialize all the buttons and LEDS
void init_led_buttons()
{
    1cdc:	b570      	push	{r4, r5, r6, lr}
    1cde:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    1ce0:	ac01      	add	r4, sp, #4
    1ce2:	2301      	movs	r3, #1
    1ce4:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1ce6:	2600      	movs	r6, #0
    1ce8:	70a6      	strb	r6, [r4, #2]
	//LED_init
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1cea:	7023      	strb	r3, [r4, #0]
	//Record LED init
	port_pin_set_config(RECORD_LED, &config_port_pin);
    1cec:	0021      	movs	r1, r4
    1cee:	2005      	movs	r0, #5
    1cf0:	4d0e      	ldr	r5, [pc, #56]	; (1d2c <init_led_buttons+0x50>)
    1cf2:	47a8      	blx	r5
	//Play LED init
	port_pin_set_config(PLAY_LED, &config_port_pin);
    1cf4:	0021      	movs	r1, r4
    1cf6:	2008      	movs	r0, #8
    1cf8:	47a8      	blx	r5
	//Track LED init
	port_pin_set_config(TRACK_LED, &config_port_pin);
    1cfa:	0021      	movs	r1, r4
    1cfc:	2009      	movs	r0, #9
    1cfe:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    1d00:	4b0b      	ldr	r3, [pc, #44]	; (1d30 <init_led_buttons+0x54>)
    1d02:	2220      	movs	r2, #32
    1d04:	615a      	str	r2, [r3, #20]
    1d06:	32e0      	adds	r2, #224	; 0xe0
    1d08:	615a      	str	r2, [r3, #20]
    1d0a:	3201      	adds	r2, #1
    1d0c:	32ff      	adds	r2, #255	; 0xff
    1d0e:	615a      	str	r2, [r3, #20]
	config->direction  = PORT_PIN_DIR_INPUT;
    1d10:	7026      	strb	r6, [r4, #0]
	config->powersave  = false;
    1d12:	70a6      	strb	r6, [r4, #2]
	
	
	
	//Switches_init
	port_get_config_defaults(&config_port_pin);
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1d14:	2302      	movs	r3, #2
    1d16:	7063      	strb	r3, [r4, #1]
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
	
	//Record button init
	port_pin_set_config(RECORD_BUTTON, &config_port_pin);
    1d18:	0021      	movs	r1, r4
    1d1a:	200e      	movs	r0, #14
    1d1c:	47a8      	blx	r5
	port_pin_set_config(PLAY_BUTTON, &config_port_pin);
	//Next button init
	port_pin_set_config(NEXT_BUTTON, &config_port_pin);
	*/
	
	init_track_led_timer();
    1d1e:	4b05      	ldr	r3, [pc, #20]	; (1d34 <init_led_buttons+0x58>)
    1d20:	4798      	blx	r3
	config_callbacks_tc1();
    1d22:	4b05      	ldr	r3, [pc, #20]	; (1d38 <init_led_buttons+0x5c>)
    1d24:	4798      	blx	r3
	
	
}
    1d26:	b002      	add	sp, #8
    1d28:	bd70      	pop	{r4, r5, r6, pc}
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	00001089 	.word	0x00001089
    1d30:	41004400 	.word	0x41004400
    1d34:	00001c25 	.word	0x00001c25
    1d38:	00001c91 	.word	0x00001c91

00001d3c <LED_on>:
	if (port_index < PORT_INST_NUM) {
    1d3c:	09c2      	lsrs	r2, r0, #7
		return NULL;
    1d3e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d40:	2a00      	cmp	r2, #0
    1d42:	d104      	bne.n	1d4e <LED_on+0x12>
		return &(ports[port_index]->Group[group_index]);
    1d44:	0943      	lsrs	r3, r0, #5
    1d46:	01db      	lsls	r3, r3, #7
    1d48:	4a04      	ldr	r2, [pc, #16]	; (1d5c <LED_on+0x20>)
    1d4a:	4694      	mov	ip, r2
    1d4c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d4e:	221f      	movs	r2, #31
    1d50:	4010      	ands	r0, r2
    1d52:	3a1e      	subs	r2, #30
    1d54:	4082      	lsls	r2, r0
		port_base->OUTSET.reg = pin_mask;
    1d56:	619a      	str	r2, [r3, #24]
//Switch on LED
void LED_on(uint8_t LED_pin_no)
{
	//LED on 
	port_pin_set_output_level(LED_pin_no,true);
}
    1d58:	4770      	bx	lr
    1d5a:	46c0      	nop			; (mov r8, r8)
    1d5c:	41004400 	.word	0x41004400

00001d60 <LED_off>:
	if (port_index < PORT_INST_NUM) {
    1d60:	09c2      	lsrs	r2, r0, #7
		return NULL;
    1d62:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d64:	2a00      	cmp	r2, #0
    1d66:	d104      	bne.n	1d72 <LED_off+0x12>
		return &(ports[port_index]->Group[group_index]);
    1d68:	0943      	lsrs	r3, r0, #5
    1d6a:	01db      	lsls	r3, r3, #7
    1d6c:	4a04      	ldr	r2, [pc, #16]	; (1d80 <LED_off+0x20>)
    1d6e:	4694      	mov	ip, r2
    1d70:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d72:	221f      	movs	r2, #31
    1d74:	4010      	ands	r0, r2
    1d76:	3a1e      	subs	r2, #30
    1d78:	4082      	lsls	r2, r0
		port_base->OUTCLR.reg = pin_mask;
    1d7a:	615a      	str	r2, [r3, #20]
//Switch off the LED
void LED_off(uint8_t LED_pin_no)
{
	//LED off
	port_pin_set_output_level(LED_pin_no,false);
}
    1d7c:	4770      	bx	lr
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	41004400 	.word	0x41004400

00001d84 <LED_track>:
	port_pin_toggle_output_level(LED_pin_no);
}

//Track LED 
void LED_track(uint8_t track_no)
{
    1d84:	b510      	push	{r4, lr}
	//Lock the resource 
	track_led_mode = track_no; // Should make this atomic , never seen these problems , slow operation so should not be a problem
    1d86:	4b06      	ldr	r3, [pc, #24]	; (1da0 <LED_track+0x1c>)
    1d88:	7018      	strb	r0, [r3, #0]
	counter_timer = 0;
    1d8a:	2200      	movs	r2, #0
    1d8c:	4b05      	ldr	r3, [pc, #20]	; (1da4 <LED_track+0x20>)
    1d8e:	701a      	strb	r2, [r3, #0]
    1d90:	2280      	movs	r2, #128	; 0x80
    1d92:	0092      	lsls	r2, r2, #2
    1d94:	4b04      	ldr	r3, [pc, #16]	; (1da8 <LED_track+0x24>)
    1d96:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(TRACK_LED,false);
	delay_cycles_ms(100);
    1d98:	2064      	movs	r0, #100	; 0x64
    1d9a:	4b04      	ldr	r3, [pc, #16]	; (1dac <LED_track+0x28>)
    1d9c:	4798      	blx	r3
	
	//Unlock the resource
	
}
    1d9e:	bd10      	pop	{r4, pc}
    1da0:	200000fd 	.word	0x200000fd
    1da4:	200000fc 	.word	0x200000fc
    1da8:	41004400 	.word	0x41004400
    1dac:	0000105d 	.word	0x0000105d

00001db0 <check_input_buttons>:

uint8_t check_input_buttons(void)
{
    1db0:	b500      	push	{lr}
    1db2:	b083      	sub	sp, #12
	enum buttons_state buttons_pressed ;
	volatile uint32_t in_reg = 0;
    1db4:	2300      	movs	r3, #0
    1db6:	9301      	str	r3, [sp, #4]
	buttons_pressed = NO_BUTTONS_PRESSED;
	//Software debounce
	PortGroup *const port_base = port_get_group_from_gpio_pin(RECORD_LED);
	
	in_reg = port_base->IN.reg & MASK_BUTTONS;
    1db8:	4b13      	ldr	r3, [pc, #76]	; (1e08 <check_input_buttons+0x58>)
    1dba:	6a1b      	ldr	r3, [r3, #32]
    1dbc:	4a13      	ldr	r2, [pc, #76]	; (1e0c <check_input_buttons+0x5c>)
    1dbe:	4013      	ands	r3, r2
    1dc0:	9301      	str	r3, [sp, #4]
	if( in_reg == NO_BUTTONS_PRESSED)
    1dc2:	9b01      	ldr	r3, [sp, #4]
	{
		return buttons_pressed;
    1dc4:	2000      	movs	r0, #0
	if( in_reg == NO_BUTTONS_PRESSED)
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d101      	bne.n	1dce <check_input_buttons+0x1e>
			return buttons_pressed;
		}
		
		
	}
}
    1dca:	b003      	add	sp, #12
    1dcc:	bd00      	pop	{pc}
		delay_cycles_ms(125);
    1dce:	307d      	adds	r0, #125	; 0x7d
    1dd0:	4b0f      	ldr	r3, [pc, #60]	; (1e10 <check_input_buttons+0x60>)
    1dd2:	4798      	blx	r3
		in_reg = port_base->IN.reg & MASK_BUTTONS;
    1dd4:	4b0c      	ldr	r3, [pc, #48]	; (1e08 <check_input_buttons+0x58>)
    1dd6:	6a1b      	ldr	r3, [r3, #32]
    1dd8:	4a0c      	ldr	r2, [pc, #48]	; (1e0c <check_input_buttons+0x5c>)
    1dda:	4013      	ands	r3, r2
    1ddc:	9301      	str	r3, [sp, #4]
		if( in_reg == NO_BUTTONS_PRESSED)
    1dde:	9b01      	ldr	r3, [sp, #4]
			return buttons_pressed;
    1de0:	2000      	movs	r0, #0
		if( in_reg == NO_BUTTONS_PRESSED)
    1de2:	2b00      	cmp	r3, #0
    1de4:	d0f1      	beq.n	1dca <check_input_buttons+0x1a>
			switch(in_reg)
    1de6:	9a01      	ldr	r2, [sp, #4]
    1de8:	2380      	movs	r3, #128	; 0x80
    1dea:	01db      	lsls	r3, r3, #7
    1dec:	429a      	cmp	r2, r3
    1dee:	d108      	bne.n	1e02 <check_input_buttons+0x52>
					in_reg  = 0;
    1df0:	2300      	movs	r3, #0
    1df2:	9301      	str	r3, [sp, #4]
					buttons_pressed = R_PRESS;
    1df4:	3002      	adds	r0, #2
			in_reg = port_base->IN.reg & MASK_BUTTONS;
    1df6:	4b04      	ldr	r3, [pc, #16]	; (1e08 <check_input_buttons+0x58>)
    1df8:	6a1b      	ldr	r3, [r3, #32]
    1dfa:	4a04      	ldr	r2, [pc, #16]	; (1e0c <check_input_buttons+0x5c>)
    1dfc:	4013      	ands	r3, r2
    1dfe:	9301      	str	r3, [sp, #4]
			return buttons_pressed;
    1e00:	e7e3      	b.n	1dca <check_input_buttons+0x1a>
	buttons_pressed = NO_BUTTONS_PRESSED;
    1e02:	2000      	movs	r0, #0
    1e04:	e7f7      	b.n	1df6 <check_input_buttons+0x46>
    1e06:	46c0      	nop			; (mov r8, r8)
    1e08:	41004400 	.word	0x41004400
    1e0c:	0000c010 	.word	0x0000c010
    1e10:	0000105d 	.word	0x0000105d

00001e14 <callback_spi_master>:
}

static void callback_spi_master( struct spi_module *const module)
{
	//! [callback_var]
	transrev_complete_spi_master = true;
    1e14:	2201      	movs	r2, #1
    1e16:	4b01      	ldr	r3, [pc, #4]	; (1e1c <callback_spi_master+0x8>)
    1e18:	701a      	strb	r2, [r3, #0]
	//! [callback_var]
}
    1e1a:	4770      	bx	lr
    1e1c:	200000fe 	.word	0x200000fe

00001e20 <init_spi>:
{
    1e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e22:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    1e24:	4c2b      	ldr	r4, [pc, #172]	; (1ed4 <init_spi+0xb4>)
    1e26:	2318      	movs	r3, #24
    1e28:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1e2a:	2300      	movs	r3, #0
    1e2c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1e2e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1e30:	a901      	add	r1, sp, #4
    1e32:	2201      	movs	r2, #1
    1e34:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1e36:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1e38:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1e3a:	2018      	movs	r0, #24
    1e3c:	4b26      	ldr	r3, [pc, #152]	; (1ed8 <init_spi+0xb8>)
    1e3e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1e40:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    1e42:	09d9      	lsrs	r1, r3, #7
		return NULL;
    1e44:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    1e46:	2900      	cmp	r1, #0
    1e48:	d104      	bne.n	1e54 <init_spi+0x34>
		return &(ports[port_index]->Group[group_index]);
    1e4a:	095a      	lsrs	r2, r3, #5
    1e4c:	01d2      	lsls	r2, r2, #7
    1e4e:	4923      	ldr	r1, [pc, #140]	; (1edc <init_spi+0xbc>)
    1e50:	468c      	mov	ip, r1
    1e52:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1e54:	261f      	movs	r6, #31
    1e56:	4033      	ands	r3, r6
    1e58:	2501      	movs	r5, #1
    1e5a:	0029      	movs	r1, r5
    1e5c:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    1e5e:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    1e60:	ac02      	add	r4, sp, #8
    1e62:	7025      	strb	r5, [r4, #0]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1e64:	2300      	movs	r3, #0
    1e66:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1e68:	22c0      	movs	r2, #192	; 0xc0
    1e6a:	0392      	lsls	r2, r2, #14
    1e6c:	9205      	str	r2, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1e6e:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    1e70:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1e72:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    1e74:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    1e76:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    1e78:	2224      	movs	r2, #36	; 0x24
    1e7a:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1e7c:	3a18      	subs	r2, #24
    1e7e:	2100      	movs	r1, #0
    1e80:	a808      	add	r0, sp, #32
    1e82:	4b17      	ldr	r3, [pc, #92]	; (1ee0 <init_spi+0xc0>)
    1e84:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    1e86:	4b17      	ldr	r3, [pc, #92]	; (1ee4 <init_spi+0xc4>)
    1e88:	61a3      	str	r3, [r4, #24]
	config_spi_master.data_order  = SPI_DATA_ORDER_LSB;
    1e8a:	2380      	movs	r3, #128	; 0x80
    1e8c:	05db      	lsls	r3, r3, #23
    1e8e:	6063      	str	r3, [r4, #4]
	config_spi_master.pinmux_pad0 = SPI_MOSI_PIN;
    1e90:	4b15      	ldr	r3, [pc, #84]	; (1ee8 <init_spi+0xc8>)
    1e92:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = SPI_SCK_PIN;
    1e94:	4b15      	ldr	r3, [pc, #84]	; (1eec <init_spi+0xcc>)
    1e96:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    1e98:	2301      	movs	r3, #1
    1e9a:	425b      	negs	r3, r3
    1e9c:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SPI_MISO_PIN;
    1e9e:	4b14      	ldr	r3, [pc, #80]	; (1ef0 <init_spi+0xd0>)
    1ea0:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&spi_master_instance, SPI_MODULE, &config_spi_master);
    1ea2:	4f14      	ldr	r7, [pc, #80]	; (1ef4 <init_spi+0xd4>)
    1ea4:	0022      	movs	r2, r4
    1ea6:	4914      	ldr	r1, [pc, #80]	; (1ef8 <init_spi+0xd8>)
    1ea8:	0038      	movs	r0, r7
    1eaa:	4b14      	ldr	r3, [pc, #80]	; (1efc <init_spi+0xdc>)
    1eac:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1eae:	683c      	ldr	r4, [r7, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1eb0:	0020      	movs	r0, r4
    1eb2:	4b13      	ldr	r3, [pc, #76]	; (1f00 <init_spi+0xe0>)
    1eb4:	4798      	blx	r3
    1eb6:	4006      	ands	r6, r0
    1eb8:	40b5      	lsls	r5, r6
    1eba:	4b12      	ldr	r3, [pc, #72]	; (1f04 <init_spi+0xe4>)
    1ebc:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1ebe:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    1ec0:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	d1fc      	bne.n	1ec0 <init_spi+0xa0>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1ec6:	6823      	ldr	r3, [r4, #0]
    1ec8:	2202      	movs	r2, #2
    1eca:	4313      	orrs	r3, r2
    1ecc:	6023      	str	r3, [r4, #0]
}
    1ece:	b011      	add	sp, #68	; 0x44
    1ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	200001d8 	.word	0x200001d8
    1ed8:	00001089 	.word	0x00001089
    1edc:	41004400 	.word	0x41004400
    1ee0:	00002821 	.word	0x00002821
    1ee4:	000186a0 	.word	0x000186a0
    1ee8:	001e0002 	.word	0x001e0002
    1eec:	001f0002 	.word	0x001f0002
    1ef0:	00190002 	.word	0x00190002
    1ef4:	2000019c 	.word	0x2000019c
    1ef8:	42000c00 	.word	0x42000c00
    1efc:	0000123d 	.word	0x0000123d
    1f00:	00001201 	.word	0x00001201
    1f04:	e000e100 	.word	0xe000e100

00001f08 <configure_spi_master_callbacks>:

void configure_spi_master_callbacks(void)
{
    1f08:	b510      	push	{r4, lr}
	//! [reg_callback]
	spi_register_callback(&spi_master_instance, callback_spi_master,SPI_CALLBACK_BUFFER_TRANSCEIVED);
    1f0a:	4c06      	ldr	r4, [pc, #24]	; (1f24 <configure_spi_master_callbacks+0x1c>)
    1f0c:	2202      	movs	r2, #2
    1f0e:	4906      	ldr	r1, [pc, #24]	; (1f28 <configure_spi_master_callbacks+0x20>)
    1f10:	0020      	movs	r0, r4
    1f12:	4b06      	ldr	r3, [pc, #24]	; (1f2c <configure_spi_master_callbacks+0x24>)
    1f14:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    1f16:	2237      	movs	r2, #55	; 0x37
    1f18:	5ca3      	ldrb	r3, [r4, r2]
    1f1a:	2104      	movs	r1, #4
    1f1c:	430b      	orrs	r3, r1
    1f1e:	54a3      	strb	r3, [r4, r2]
	spi_enable_callback(&spi_master_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
	//! [en_callback]
}
    1f20:	bd10      	pop	{r4, pc}
    1f22:	46c0      	nop			; (mov r8, r8)
    1f24:	2000019c 	.word	0x2000019c
    1f28:	00001e15 	.word	0x00001e15
    1f2c:	00001545 	.word	0x00001545

00001f30 <configure_spi>:

//! [configure_spi]
void configure_spi(void)
{
    1f30:	b510      	push	{r4, lr}
	init_spi();
    1f32:	4b02      	ldr	r3, [pc, #8]	; (1f3c <configure_spi+0xc>)
    1f34:	4798      	blx	r3
	configure_spi_master_callbacks();
    1f36:	4b02      	ldr	r3, [pc, #8]	; (1f40 <configure_spi+0x10>)
    1f38:	4798      	blx	r3

}
    1f3a:	bd10      	pop	{r4, pc}
    1f3c:	00001e21 	.word	0x00001e21
    1f40:	00001f09 	.word	0x00001f09

00001f44 <spi_transceive>:

void spi_transceive (uint8_t* wr_buffer , uint8_t* rd_buffer ,uint8_t buff_length)
{
    1f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f46:	0006      	movs	r6, r0
    1f48:	000f      	movs	r7, r1
    1f4a:	0014      	movs	r4, r2
	spi_select_slave(&spi_master_instance, &slave, true);
    1f4c:	4d0b      	ldr	r5, [pc, #44]	; (1f7c <spi_transceive+0x38>)
    1f4e:	2201      	movs	r2, #1
    1f50:	490b      	ldr	r1, [pc, #44]	; (1f80 <spi_transceive+0x3c>)
    1f52:	0028      	movs	r0, r5
    1f54:	4b0b      	ldr	r3, [pc, #44]	; (1f84 <spi_transceive+0x40>)
    1f56:	4798      	blx	r3
	spi_transceive_buffer_job(&spi_master_instance, wr_buffer ,rd_buffer , buff_length);
    1f58:	b2a3      	uxth	r3, r4
    1f5a:	003a      	movs	r2, r7
    1f5c:	0031      	movs	r1, r6
    1f5e:	0028      	movs	r0, r5
    1f60:	4c09      	ldr	r4, [pc, #36]	; (1f88 <spi_transceive+0x44>)
    1f62:	47a0      	blx	r4
	while (!transrev_complete_spi_master)
    1f64:	4a09      	ldr	r2, [pc, #36]	; (1f8c <spi_transceive+0x48>)
    1f66:	7813      	ldrb	r3, [r2, #0]
    1f68:	2b00      	cmp	r3, #0
    1f6a:	d0fc      	beq.n	1f66 <spi_transceive+0x22>
	{
	}
	transrev_complete_spi_master = false;
    1f6c:	2200      	movs	r2, #0
    1f6e:	4b07      	ldr	r3, [pc, #28]	; (1f8c <spi_transceive+0x48>)
    1f70:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_master_instance, &slave, false);
    1f72:	4903      	ldr	r1, [pc, #12]	; (1f80 <spi_transceive+0x3c>)
    1f74:	4801      	ldr	r0, [pc, #4]	; (1f7c <spi_transceive+0x38>)
    1f76:	4b03      	ldr	r3, [pc, #12]	; (1f84 <spi_transceive+0x40>)
    1f78:	4798      	blx	r3
}
    1f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f7c:	2000019c 	.word	0x2000019c
    1f80:	200001d8 	.word	0x200001d8
    1f84:	00001451 	.word	0x00001451
    1f88:	0000155d 	.word	0x0000155d
    1f8c:	200000fe 	.word	0x200000fe

00001f90 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1f90:	4770      	bx	lr
	...

00001f94 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1f94:	4b0c      	ldr	r3, [pc, #48]	; (1fc8 <cpu_irq_enter_critical+0x34>)
    1f96:	681b      	ldr	r3, [r3, #0]
    1f98:	2b00      	cmp	r3, #0
    1f9a:	d106      	bne.n	1faa <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1f9c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	d007      	beq.n	1fb4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1fa4:	2200      	movs	r2, #0
    1fa6:	4b09      	ldr	r3, [pc, #36]	; (1fcc <cpu_irq_enter_critical+0x38>)
    1fa8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1faa:	4a07      	ldr	r2, [pc, #28]	; (1fc8 <cpu_irq_enter_critical+0x34>)
    1fac:	6813      	ldr	r3, [r2, #0]
    1fae:	3301      	adds	r3, #1
    1fb0:	6013      	str	r3, [r2, #0]
}
    1fb2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1fb4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1fb6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1fba:	2200      	movs	r2, #0
    1fbc:	4b04      	ldr	r3, [pc, #16]	; (1fd0 <cpu_irq_enter_critical+0x3c>)
    1fbe:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1fc0:	3201      	adds	r2, #1
    1fc2:	4b02      	ldr	r3, [pc, #8]	; (1fcc <cpu_irq_enter_critical+0x38>)
    1fc4:	701a      	strb	r2, [r3, #0]
    1fc6:	e7f0      	b.n	1faa <cpu_irq_enter_critical+0x16>
    1fc8:	20000100 	.word	0x20000100
    1fcc:	20000104 	.word	0x20000104
    1fd0:	200000a0 	.word	0x200000a0

00001fd4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1fd4:	4b08      	ldr	r3, [pc, #32]	; (1ff8 <cpu_irq_leave_critical+0x24>)
    1fd6:	681a      	ldr	r2, [r3, #0]
    1fd8:	3a01      	subs	r2, #1
    1fda:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1fdc:	681b      	ldr	r3, [r3, #0]
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d109      	bne.n	1ff6 <cpu_irq_leave_critical+0x22>
    1fe2:	4b06      	ldr	r3, [pc, #24]	; (1ffc <cpu_irq_leave_critical+0x28>)
    1fe4:	781b      	ldrb	r3, [r3, #0]
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	d005      	beq.n	1ff6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1fea:	2201      	movs	r2, #1
    1fec:	4b04      	ldr	r3, [pc, #16]	; (2000 <cpu_irq_leave_critical+0x2c>)
    1fee:	701a      	strb	r2, [r3, #0]
    1ff0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1ff4:	b662      	cpsie	i
	}
}
    1ff6:	4770      	bx	lr
    1ff8:	20000100 	.word	0x20000100
    1ffc:	20000104 	.word	0x20000104
    2000:	200000a0 	.word	0x200000a0

00002004 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2004:	b510      	push	{r4, lr}
	switch (clock_source) {
    2006:	2808      	cmp	r0, #8
    2008:	d803      	bhi.n	2012 <system_clock_source_get_hz+0xe>
    200a:	0080      	lsls	r0, r0, #2
    200c:	4b1b      	ldr	r3, [pc, #108]	; (207c <system_clock_source_get_hz+0x78>)
    200e:	581b      	ldr	r3, [r3, r0]
    2010:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2012:	2000      	movs	r0, #0
    2014:	e030      	b.n	2078 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    2016:	4b1a      	ldr	r3, [pc, #104]	; (2080 <system_clock_source_get_hz+0x7c>)
    2018:	6918      	ldr	r0, [r3, #16]
    201a:	e02d      	b.n	2078 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    201c:	4b19      	ldr	r3, [pc, #100]	; (2084 <system_clock_source_get_hz+0x80>)
    201e:	6a1b      	ldr	r3, [r3, #32]
    2020:	059b      	lsls	r3, r3, #22
    2022:	0f9b      	lsrs	r3, r3, #30
    2024:	4818      	ldr	r0, [pc, #96]	; (2088 <system_clock_source_get_hz+0x84>)
    2026:	40d8      	lsrs	r0, r3
    2028:	e026      	b.n	2078 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    202a:	4b15      	ldr	r3, [pc, #84]	; (2080 <system_clock_source_get_hz+0x7c>)
    202c:	6958      	ldr	r0, [r3, #20]
    202e:	e023      	b.n	2078 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2030:	4b13      	ldr	r3, [pc, #76]	; (2080 <system_clock_source_get_hz+0x7c>)
    2032:	681b      	ldr	r3, [r3, #0]
			return 0;
    2034:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2036:	079b      	lsls	r3, r3, #30
    2038:	d51e      	bpl.n	2078 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    203a:	4912      	ldr	r1, [pc, #72]	; (2084 <system_clock_source_get_hz+0x80>)
    203c:	2210      	movs	r2, #16
    203e:	68cb      	ldr	r3, [r1, #12]
    2040:	421a      	tst	r2, r3
    2042:	d0fc      	beq.n	203e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2044:	4b0e      	ldr	r3, [pc, #56]	; (2080 <system_clock_source_get_hz+0x7c>)
    2046:	681b      	ldr	r3, [r3, #0]
    2048:	075b      	lsls	r3, r3, #29
    204a:	d401      	bmi.n	2050 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    204c:	480f      	ldr	r0, [pc, #60]	; (208c <system_clock_source_get_hz+0x88>)
    204e:	e013      	b.n	2078 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2050:	2000      	movs	r0, #0
    2052:	4b0f      	ldr	r3, [pc, #60]	; (2090 <system_clock_source_get_hz+0x8c>)
    2054:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2056:	4b0a      	ldr	r3, [pc, #40]	; (2080 <system_clock_source_get_hz+0x7c>)
    2058:	689b      	ldr	r3, [r3, #8]
    205a:	041b      	lsls	r3, r3, #16
    205c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    205e:	4358      	muls	r0, r3
    2060:	e00a      	b.n	2078 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2062:	2350      	movs	r3, #80	; 0x50
    2064:	4a07      	ldr	r2, [pc, #28]	; (2084 <system_clock_source_get_hz+0x80>)
    2066:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2068:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    206a:	075b      	lsls	r3, r3, #29
    206c:	d504      	bpl.n	2078 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    206e:	4b04      	ldr	r3, [pc, #16]	; (2080 <system_clock_source_get_hz+0x7c>)
    2070:	68d8      	ldr	r0, [r3, #12]
    2072:	e001      	b.n	2078 <system_clock_source_get_hz+0x74>
		return 32768UL;
    2074:	2080      	movs	r0, #128	; 0x80
    2076:	0200      	lsls	r0, r0, #8
	}
}
    2078:	bd10      	pop	{r4, pc}
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	0000287c 	.word	0x0000287c
    2080:	20000108 	.word	0x20000108
    2084:	40000800 	.word	0x40000800
    2088:	007a1200 	.word	0x007a1200
    208c:	02dc6c00 	.word	0x02dc6c00
    2090:	00002465 	.word	0x00002465

00002094 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2094:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2096:	490c      	ldr	r1, [pc, #48]	; (20c8 <system_clock_source_osc8m_set_config+0x34>)
    2098:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    209a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    209c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    209e:	7840      	ldrb	r0, [r0, #1]
    20a0:	2201      	movs	r2, #1
    20a2:	4010      	ands	r0, r2
    20a4:	0180      	lsls	r0, r0, #6
    20a6:	2640      	movs	r6, #64	; 0x40
    20a8:	43b3      	bics	r3, r6
    20aa:	4303      	orrs	r3, r0
    20ac:	402a      	ands	r2, r5
    20ae:	01d2      	lsls	r2, r2, #7
    20b0:	2080      	movs	r0, #128	; 0x80
    20b2:	4383      	bics	r3, r0
    20b4:	4313      	orrs	r3, r2
    20b6:	2203      	movs	r2, #3
    20b8:	4022      	ands	r2, r4
    20ba:	0212      	lsls	r2, r2, #8
    20bc:	4803      	ldr	r0, [pc, #12]	; (20cc <system_clock_source_osc8m_set_config+0x38>)
    20be:	4003      	ands	r3, r0
    20c0:	4313      	orrs	r3, r2
    20c2:	620b      	str	r3, [r1, #32]
}
    20c4:	bd70      	pop	{r4, r5, r6, pc}
    20c6:	46c0      	nop			; (mov r8, r8)
    20c8:	40000800 	.word	0x40000800
    20cc:	fffffcff 	.word	0xfffffcff

000020d0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    20d0:	2808      	cmp	r0, #8
    20d2:	d803      	bhi.n	20dc <system_clock_source_enable+0xc>
    20d4:	0080      	lsls	r0, r0, #2
    20d6:	4b25      	ldr	r3, [pc, #148]	; (216c <system_clock_source_enable+0x9c>)
    20d8:	581b      	ldr	r3, [r3, r0]
    20da:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    20dc:	2017      	movs	r0, #23
    20de:	e044      	b.n	216a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    20e0:	4a23      	ldr	r2, [pc, #140]	; (2170 <system_clock_source_enable+0xa0>)
    20e2:	6a13      	ldr	r3, [r2, #32]
    20e4:	2102      	movs	r1, #2
    20e6:	430b      	orrs	r3, r1
    20e8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    20ea:	2000      	movs	r0, #0
    20ec:	e03d      	b.n	216a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    20ee:	4a20      	ldr	r2, [pc, #128]	; (2170 <system_clock_source_enable+0xa0>)
    20f0:	6993      	ldr	r3, [r2, #24]
    20f2:	2102      	movs	r1, #2
    20f4:	430b      	orrs	r3, r1
    20f6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    20f8:	2000      	movs	r0, #0
		break;
    20fa:	e036      	b.n	216a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    20fc:	4a1c      	ldr	r2, [pc, #112]	; (2170 <system_clock_source_enable+0xa0>)
    20fe:	8a13      	ldrh	r3, [r2, #16]
    2100:	2102      	movs	r1, #2
    2102:	430b      	orrs	r3, r1
    2104:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2106:	2000      	movs	r0, #0
		break;
    2108:	e02f      	b.n	216a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    210a:	4a19      	ldr	r2, [pc, #100]	; (2170 <system_clock_source_enable+0xa0>)
    210c:	8a93      	ldrh	r3, [r2, #20]
    210e:	2102      	movs	r1, #2
    2110:	430b      	orrs	r3, r1
    2112:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2114:	2000      	movs	r0, #0
		break;
    2116:	e028      	b.n	216a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2118:	4916      	ldr	r1, [pc, #88]	; (2174 <system_clock_source_enable+0xa4>)
    211a:	680b      	ldr	r3, [r1, #0]
    211c:	2202      	movs	r2, #2
    211e:	4313      	orrs	r3, r2
    2120:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2122:	4b13      	ldr	r3, [pc, #76]	; (2170 <system_clock_source_enable+0xa0>)
    2124:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2126:	0019      	movs	r1, r3
    2128:	320e      	adds	r2, #14
    212a:	68cb      	ldr	r3, [r1, #12]
    212c:	421a      	tst	r2, r3
    212e:	d0fc      	beq.n	212a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2130:	4a10      	ldr	r2, [pc, #64]	; (2174 <system_clock_source_enable+0xa4>)
    2132:	6891      	ldr	r1, [r2, #8]
    2134:	4b0e      	ldr	r3, [pc, #56]	; (2170 <system_clock_source_enable+0xa0>)
    2136:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2138:	6852      	ldr	r2, [r2, #4]
    213a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    213c:	2200      	movs	r2, #0
    213e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2140:	0019      	movs	r1, r3
    2142:	3210      	adds	r2, #16
    2144:	68cb      	ldr	r3, [r1, #12]
    2146:	421a      	tst	r2, r3
    2148:	d0fc      	beq.n	2144 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    214a:	4b0a      	ldr	r3, [pc, #40]	; (2174 <system_clock_source_enable+0xa4>)
    214c:	681b      	ldr	r3, [r3, #0]
    214e:	b29b      	uxth	r3, r3
    2150:	4a07      	ldr	r2, [pc, #28]	; (2170 <system_clock_source_enable+0xa0>)
    2152:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2154:	2000      	movs	r0, #0
    2156:	e008      	b.n	216a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2158:	4905      	ldr	r1, [pc, #20]	; (2170 <system_clock_source_enable+0xa0>)
    215a:	2244      	movs	r2, #68	; 0x44
    215c:	5c8b      	ldrb	r3, [r1, r2]
    215e:	2002      	movs	r0, #2
    2160:	4303      	orrs	r3, r0
    2162:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2164:	2000      	movs	r0, #0
		break;
    2166:	e000      	b.n	216a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2168:	2000      	movs	r0, #0
}
    216a:	4770      	bx	lr
    216c:	000028a0 	.word	0x000028a0
    2170:	40000800 	.word	0x40000800
    2174:	20000108 	.word	0x20000108

00002178 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2178:	b530      	push	{r4, r5, lr}
    217a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    217c:	22c2      	movs	r2, #194	; 0xc2
    217e:	00d2      	lsls	r2, r2, #3
    2180:	4b1a      	ldr	r3, [pc, #104]	; (21ec <system_clock_init+0x74>)
    2182:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2184:	4a1a      	ldr	r2, [pc, #104]	; (21f0 <system_clock_init+0x78>)
    2186:	6853      	ldr	r3, [r2, #4]
    2188:	211e      	movs	r1, #30
    218a:	438b      	bics	r3, r1
    218c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    218e:	2301      	movs	r3, #1
    2190:	466a      	mov	r2, sp
    2192:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2194:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2196:	4d17      	ldr	r5, [pc, #92]	; (21f4 <system_clock_init+0x7c>)
    2198:	b2e0      	uxtb	r0, r4
    219a:	4669      	mov	r1, sp
    219c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    219e:	3401      	adds	r4, #1
    21a0:	2c18      	cmp	r4, #24
    21a2:	d1f9      	bne.n	2198 <system_clock_init+0x20>
	config->run_in_standby  = false;
    21a4:	a803      	add	r0, sp, #12
    21a6:	2400      	movs	r4, #0
    21a8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    21aa:	2501      	movs	r5, #1
    21ac:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    21ae:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    21b0:	4b11      	ldr	r3, [pc, #68]	; (21f8 <system_clock_init+0x80>)
    21b2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    21b4:	2006      	movs	r0, #6
    21b6:	4b11      	ldr	r3, [pc, #68]	; (21fc <system_clock_init+0x84>)
    21b8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    21ba:	4b11      	ldr	r3, [pc, #68]	; (2200 <system_clock_init+0x88>)
    21bc:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    21be:	4b11      	ldr	r3, [pc, #68]	; (2204 <system_clock_init+0x8c>)
    21c0:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    21c2:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    21c4:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    21c6:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    21c8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    21ca:	466b      	mov	r3, sp
    21cc:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    21ce:	2306      	movs	r3, #6
    21d0:	466a      	mov	r2, sp
    21d2:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    21d4:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    21d6:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    21d8:	4669      	mov	r1, sp
    21da:	2000      	movs	r0, #0
    21dc:	4b0a      	ldr	r3, [pc, #40]	; (2208 <system_clock_init+0x90>)
    21de:	4798      	blx	r3
    21e0:	2000      	movs	r0, #0
    21e2:	4b0a      	ldr	r3, [pc, #40]	; (220c <system_clock_init+0x94>)
    21e4:	4798      	blx	r3
#endif
}
    21e6:	b005      	add	sp, #20
    21e8:	bd30      	pop	{r4, r5, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	40000800 	.word	0x40000800
    21f0:	41004000 	.word	0x41004000
    21f4:	00002449 	.word	0x00002449
    21f8:	00002095 	.word	0x00002095
    21fc:	000020d1 	.word	0x000020d1
    2200:	00002211 	.word	0x00002211
    2204:	40000400 	.word	0x40000400
    2208:	00002235 	.word	0x00002235
    220c:	000022ed 	.word	0x000022ed

00002210 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2210:	4a06      	ldr	r2, [pc, #24]	; (222c <system_gclk_init+0x1c>)
    2212:	6993      	ldr	r3, [r2, #24]
    2214:	2108      	movs	r1, #8
    2216:	430b      	orrs	r3, r1
    2218:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    221a:	2201      	movs	r2, #1
    221c:	4b04      	ldr	r3, [pc, #16]	; (2230 <system_gclk_init+0x20>)
    221e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2220:	0019      	movs	r1, r3
    2222:	780b      	ldrb	r3, [r1, #0]
    2224:	4213      	tst	r3, r2
    2226:	d1fc      	bne.n	2222 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2228:	4770      	bx	lr
    222a:	46c0      	nop			; (mov r8, r8)
    222c:	40000400 	.word	0x40000400
    2230:	40000c00 	.word	0x40000c00

00002234 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2234:	b570      	push	{r4, r5, r6, lr}
    2236:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2238:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    223a:	780d      	ldrb	r5, [r1, #0]
    223c:	022d      	lsls	r5, r5, #8
    223e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2240:	784b      	ldrb	r3, [r1, #1]
    2242:	2b00      	cmp	r3, #0
    2244:	d002      	beq.n	224c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2246:	2380      	movs	r3, #128	; 0x80
    2248:	02db      	lsls	r3, r3, #11
    224a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    224c:	7a4b      	ldrb	r3, [r1, #9]
    224e:	2b00      	cmp	r3, #0
    2250:	d002      	beq.n	2258 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2252:	2380      	movs	r3, #128	; 0x80
    2254:	031b      	lsls	r3, r3, #12
    2256:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2258:	6848      	ldr	r0, [r1, #4]
    225a:	2801      	cmp	r0, #1
    225c:	d910      	bls.n	2280 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    225e:	1e43      	subs	r3, r0, #1
    2260:	4218      	tst	r0, r3
    2262:	d134      	bne.n	22ce <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2264:	2802      	cmp	r0, #2
    2266:	d930      	bls.n	22ca <system_gclk_gen_set_config+0x96>
    2268:	2302      	movs	r3, #2
    226a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    226c:	3201      	adds	r2, #1
						mask <<= 1) {
    226e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2270:	4298      	cmp	r0, r3
    2272:	d8fb      	bhi.n	226c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2274:	0212      	lsls	r2, r2, #8
    2276:	4332      	orrs	r2, r6
    2278:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    227a:	2380      	movs	r3, #128	; 0x80
    227c:	035b      	lsls	r3, r3, #13
    227e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2280:	7a0b      	ldrb	r3, [r1, #8]
    2282:	2b00      	cmp	r3, #0
    2284:	d002      	beq.n	228c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2286:	2380      	movs	r3, #128	; 0x80
    2288:	039b      	lsls	r3, r3, #14
    228a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    228c:	4a13      	ldr	r2, [pc, #76]	; (22dc <system_gclk_gen_set_config+0xa8>)
    228e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2290:	b25b      	sxtb	r3, r3
    2292:	2b00      	cmp	r3, #0
    2294:	dbfb      	blt.n	228e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2296:	4b12      	ldr	r3, [pc, #72]	; (22e0 <system_gclk_gen_set_config+0xac>)
    2298:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    229a:	4b12      	ldr	r3, [pc, #72]	; (22e4 <system_gclk_gen_set_config+0xb0>)
    229c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    229e:	4a0f      	ldr	r2, [pc, #60]	; (22dc <system_gclk_gen_set_config+0xa8>)
    22a0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    22a2:	b25b      	sxtb	r3, r3
    22a4:	2b00      	cmp	r3, #0
    22a6:	dbfb      	blt.n	22a0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    22a8:	4b0c      	ldr	r3, [pc, #48]	; (22dc <system_gclk_gen_set_config+0xa8>)
    22aa:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    22ac:	001a      	movs	r2, r3
    22ae:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    22b0:	b25b      	sxtb	r3, r3
    22b2:	2b00      	cmp	r3, #0
    22b4:	dbfb      	blt.n	22ae <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    22b6:	4a09      	ldr	r2, [pc, #36]	; (22dc <system_gclk_gen_set_config+0xa8>)
    22b8:	6853      	ldr	r3, [r2, #4]
    22ba:	2180      	movs	r1, #128	; 0x80
    22bc:	0249      	lsls	r1, r1, #9
    22be:	400b      	ands	r3, r1
    22c0:	431d      	orrs	r5, r3
    22c2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    22c4:	4b08      	ldr	r3, [pc, #32]	; (22e8 <system_gclk_gen_set_config+0xb4>)
    22c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    22c8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    22ca:	2200      	movs	r2, #0
    22cc:	e7d2      	b.n	2274 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    22ce:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    22d0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    22d2:	2380      	movs	r3, #128	; 0x80
    22d4:	029b      	lsls	r3, r3, #10
    22d6:	431d      	orrs	r5, r3
    22d8:	e7d2      	b.n	2280 <system_gclk_gen_set_config+0x4c>
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	40000c00 	.word	0x40000c00
    22e0:	00001f95 	.word	0x00001f95
    22e4:	40000c08 	.word	0x40000c08
    22e8:	00001fd5 	.word	0x00001fd5

000022ec <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    22ec:	b510      	push	{r4, lr}
    22ee:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    22f0:	4a0b      	ldr	r2, [pc, #44]	; (2320 <system_gclk_gen_enable+0x34>)
    22f2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    22f4:	b25b      	sxtb	r3, r3
    22f6:	2b00      	cmp	r3, #0
    22f8:	dbfb      	blt.n	22f2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    22fa:	4b0a      	ldr	r3, [pc, #40]	; (2324 <system_gclk_gen_enable+0x38>)
    22fc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    22fe:	4b0a      	ldr	r3, [pc, #40]	; (2328 <system_gclk_gen_enable+0x3c>)
    2300:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2302:	4a07      	ldr	r2, [pc, #28]	; (2320 <system_gclk_gen_enable+0x34>)
    2304:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2306:	b25b      	sxtb	r3, r3
    2308:	2b00      	cmp	r3, #0
    230a:	dbfb      	blt.n	2304 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    230c:	4a04      	ldr	r2, [pc, #16]	; (2320 <system_gclk_gen_enable+0x34>)
    230e:	6851      	ldr	r1, [r2, #4]
    2310:	2380      	movs	r3, #128	; 0x80
    2312:	025b      	lsls	r3, r3, #9
    2314:	430b      	orrs	r3, r1
    2316:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2318:	4b04      	ldr	r3, [pc, #16]	; (232c <system_gclk_gen_enable+0x40>)
    231a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    231c:	bd10      	pop	{r4, pc}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	40000c00 	.word	0x40000c00
    2324:	00001f95 	.word	0x00001f95
    2328:	40000c04 	.word	0x40000c04
    232c:	00001fd5 	.word	0x00001fd5

00002330 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2330:	b570      	push	{r4, r5, r6, lr}
    2332:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2334:	4a1a      	ldr	r2, [pc, #104]	; (23a0 <system_gclk_gen_get_hz+0x70>)
    2336:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2338:	b25b      	sxtb	r3, r3
    233a:	2b00      	cmp	r3, #0
    233c:	dbfb      	blt.n	2336 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    233e:	4b19      	ldr	r3, [pc, #100]	; (23a4 <system_gclk_gen_get_hz+0x74>)
    2340:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2342:	4b19      	ldr	r3, [pc, #100]	; (23a8 <system_gclk_gen_get_hz+0x78>)
    2344:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2346:	4a16      	ldr	r2, [pc, #88]	; (23a0 <system_gclk_gen_get_hz+0x70>)
    2348:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    234a:	b25b      	sxtb	r3, r3
    234c:	2b00      	cmp	r3, #0
    234e:	dbfb      	blt.n	2348 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2350:	4e13      	ldr	r6, [pc, #76]	; (23a0 <system_gclk_gen_get_hz+0x70>)
    2352:	6870      	ldr	r0, [r6, #4]
    2354:	04c0      	lsls	r0, r0, #19
    2356:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2358:	4b14      	ldr	r3, [pc, #80]	; (23ac <system_gclk_gen_get_hz+0x7c>)
    235a:	4798      	blx	r3
    235c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    235e:	4b12      	ldr	r3, [pc, #72]	; (23a8 <system_gclk_gen_get_hz+0x78>)
    2360:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2362:	6876      	ldr	r6, [r6, #4]
    2364:	02f6      	lsls	r6, r6, #11
    2366:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2368:	4b11      	ldr	r3, [pc, #68]	; (23b0 <system_gclk_gen_get_hz+0x80>)
    236a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    236c:	4a0c      	ldr	r2, [pc, #48]	; (23a0 <system_gclk_gen_get_hz+0x70>)
    236e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2370:	b25b      	sxtb	r3, r3
    2372:	2b00      	cmp	r3, #0
    2374:	dbfb      	blt.n	236e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2376:	4b0a      	ldr	r3, [pc, #40]	; (23a0 <system_gclk_gen_get_hz+0x70>)
    2378:	689c      	ldr	r4, [r3, #8]
    237a:	0224      	lsls	r4, r4, #8
    237c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    237e:	4b0d      	ldr	r3, [pc, #52]	; (23b4 <system_gclk_gen_get_hz+0x84>)
    2380:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2382:	2e00      	cmp	r6, #0
    2384:	d107      	bne.n	2396 <system_gclk_gen_get_hz+0x66>
    2386:	2c01      	cmp	r4, #1
    2388:	d907      	bls.n	239a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    238a:	0021      	movs	r1, r4
    238c:	0028      	movs	r0, r5
    238e:	4b0a      	ldr	r3, [pc, #40]	; (23b8 <system_gclk_gen_get_hz+0x88>)
    2390:	4798      	blx	r3
    2392:	0005      	movs	r5, r0
    2394:	e001      	b.n	239a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2396:	3401      	adds	r4, #1
    2398:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    239a:	0028      	movs	r0, r5
    239c:	bd70      	pop	{r4, r5, r6, pc}
    239e:	46c0      	nop			; (mov r8, r8)
    23a0:	40000c00 	.word	0x40000c00
    23a4:	00001f95 	.word	0x00001f95
    23a8:	40000c04 	.word	0x40000c04
    23ac:	00002005 	.word	0x00002005
    23b0:	40000c08 	.word	0x40000c08
    23b4:	00001fd5 	.word	0x00001fd5
    23b8:	000026c1 	.word	0x000026c1

000023bc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    23bc:	b510      	push	{r4, lr}
    23be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    23c0:	4b06      	ldr	r3, [pc, #24]	; (23dc <system_gclk_chan_enable+0x20>)
    23c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    23c4:	4b06      	ldr	r3, [pc, #24]	; (23e0 <system_gclk_chan_enable+0x24>)
    23c6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    23c8:	4a06      	ldr	r2, [pc, #24]	; (23e4 <system_gclk_chan_enable+0x28>)
    23ca:	8853      	ldrh	r3, [r2, #2]
    23cc:	2180      	movs	r1, #128	; 0x80
    23ce:	01c9      	lsls	r1, r1, #7
    23d0:	430b      	orrs	r3, r1
    23d2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    23d4:	4b04      	ldr	r3, [pc, #16]	; (23e8 <system_gclk_chan_enable+0x2c>)
    23d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    23d8:	bd10      	pop	{r4, pc}
    23da:	46c0      	nop			; (mov r8, r8)
    23dc:	00001f95 	.word	0x00001f95
    23e0:	40000c02 	.word	0x40000c02
    23e4:	40000c00 	.word	0x40000c00
    23e8:	00001fd5 	.word	0x00001fd5

000023ec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    23ec:	b510      	push	{r4, lr}
    23ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    23f0:	4b0f      	ldr	r3, [pc, #60]	; (2430 <system_gclk_chan_disable+0x44>)
    23f2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    23f4:	4b0f      	ldr	r3, [pc, #60]	; (2434 <system_gclk_chan_disable+0x48>)
    23f6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    23f8:	4a0f      	ldr	r2, [pc, #60]	; (2438 <system_gclk_chan_disable+0x4c>)
    23fa:	8853      	ldrh	r3, [r2, #2]
    23fc:	051b      	lsls	r3, r3, #20
    23fe:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2400:	8853      	ldrh	r3, [r2, #2]
    2402:	490e      	ldr	r1, [pc, #56]	; (243c <system_gclk_chan_disable+0x50>)
    2404:	400b      	ands	r3, r1
    2406:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2408:	8853      	ldrh	r3, [r2, #2]
    240a:	490d      	ldr	r1, [pc, #52]	; (2440 <system_gclk_chan_disable+0x54>)
    240c:	400b      	ands	r3, r1
    240e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2410:	0011      	movs	r1, r2
    2412:	2280      	movs	r2, #128	; 0x80
    2414:	01d2      	lsls	r2, r2, #7
    2416:	884b      	ldrh	r3, [r1, #2]
    2418:	4213      	tst	r3, r2
    241a:	d1fc      	bne.n	2416 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    241c:	4906      	ldr	r1, [pc, #24]	; (2438 <system_gclk_chan_disable+0x4c>)
    241e:	884a      	ldrh	r2, [r1, #2]
    2420:	0203      	lsls	r3, r0, #8
    2422:	4806      	ldr	r0, [pc, #24]	; (243c <system_gclk_chan_disable+0x50>)
    2424:	4002      	ands	r2, r0
    2426:	4313      	orrs	r3, r2
    2428:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    242a:	4b06      	ldr	r3, [pc, #24]	; (2444 <system_gclk_chan_disable+0x58>)
    242c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    242e:	bd10      	pop	{r4, pc}
    2430:	00001f95 	.word	0x00001f95
    2434:	40000c02 	.word	0x40000c02
    2438:	40000c00 	.word	0x40000c00
    243c:	fffff0ff 	.word	0xfffff0ff
    2440:	ffffbfff 	.word	0xffffbfff
    2444:	00001fd5 	.word	0x00001fd5

00002448 <system_gclk_chan_set_config>:
{
    2448:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    244a:	780c      	ldrb	r4, [r1, #0]
    244c:	0224      	lsls	r4, r4, #8
    244e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2450:	4b02      	ldr	r3, [pc, #8]	; (245c <system_gclk_chan_set_config+0x14>)
    2452:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2454:	b2a4      	uxth	r4, r4
    2456:	4b02      	ldr	r3, [pc, #8]	; (2460 <system_gclk_chan_set_config+0x18>)
    2458:	805c      	strh	r4, [r3, #2]
}
    245a:	bd10      	pop	{r4, pc}
    245c:	000023ed 	.word	0x000023ed
    2460:	40000c00 	.word	0x40000c00

00002464 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2464:	b510      	push	{r4, lr}
    2466:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2468:	4b06      	ldr	r3, [pc, #24]	; (2484 <system_gclk_chan_get_hz+0x20>)
    246a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    246c:	4b06      	ldr	r3, [pc, #24]	; (2488 <system_gclk_chan_get_hz+0x24>)
    246e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2470:	4b06      	ldr	r3, [pc, #24]	; (248c <system_gclk_chan_get_hz+0x28>)
    2472:	885c      	ldrh	r4, [r3, #2]
    2474:	0524      	lsls	r4, r4, #20
    2476:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2478:	4b05      	ldr	r3, [pc, #20]	; (2490 <system_gclk_chan_get_hz+0x2c>)
    247a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    247c:	0020      	movs	r0, r4
    247e:	4b05      	ldr	r3, [pc, #20]	; (2494 <system_gclk_chan_get_hz+0x30>)
    2480:	4798      	blx	r3
}
    2482:	bd10      	pop	{r4, pc}
    2484:	00001f95 	.word	0x00001f95
    2488:	40000c02 	.word	0x40000c02
    248c:	40000c00 	.word	0x40000c00
    2490:	00001fd5 	.word	0x00001fd5
    2494:	00002331 	.word	0x00002331

00002498 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2498:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    249a:	78d3      	ldrb	r3, [r2, #3]
    249c:	2b00      	cmp	r3, #0
    249e:	d135      	bne.n	250c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    24a0:	7813      	ldrb	r3, [r2, #0]
    24a2:	2b80      	cmp	r3, #128	; 0x80
    24a4:	d029      	beq.n	24fa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    24a6:	061b      	lsls	r3, r3, #24
    24a8:	2480      	movs	r4, #128	; 0x80
    24aa:	0264      	lsls	r4, r4, #9
    24ac:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    24ae:	7854      	ldrb	r4, [r2, #1]
    24b0:	2502      	movs	r5, #2
    24b2:	43ac      	bics	r4, r5
    24b4:	d106      	bne.n	24c4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    24b6:	7894      	ldrb	r4, [r2, #2]
    24b8:	2c00      	cmp	r4, #0
    24ba:	d120      	bne.n	24fe <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    24bc:	2480      	movs	r4, #128	; 0x80
    24be:	02a4      	lsls	r4, r4, #10
    24c0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    24c2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    24c4:	7854      	ldrb	r4, [r2, #1]
    24c6:	3c01      	subs	r4, #1
    24c8:	2c01      	cmp	r4, #1
    24ca:	d91c      	bls.n	2506 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    24cc:	040d      	lsls	r5, r1, #16
    24ce:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    24d0:	24a0      	movs	r4, #160	; 0xa0
    24d2:	05e4      	lsls	r4, r4, #23
    24d4:	432c      	orrs	r4, r5
    24d6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24d8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    24da:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    24dc:	24d0      	movs	r4, #208	; 0xd0
    24de:	0624      	lsls	r4, r4, #24
    24e0:	432c      	orrs	r4, r5
    24e2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    24e4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    24e6:	78d4      	ldrb	r4, [r2, #3]
    24e8:	2c00      	cmp	r4, #0
    24ea:	d122      	bne.n	2532 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    24ec:	035b      	lsls	r3, r3, #13
    24ee:	d51c      	bpl.n	252a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    24f0:	7893      	ldrb	r3, [r2, #2]
    24f2:	2b01      	cmp	r3, #1
    24f4:	d01e      	beq.n	2534 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    24f6:	6141      	str	r1, [r0, #20]
    24f8:	e017      	b.n	252a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    24fa:	2300      	movs	r3, #0
    24fc:	e7d7      	b.n	24ae <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    24fe:	24c0      	movs	r4, #192	; 0xc0
    2500:	02e4      	lsls	r4, r4, #11
    2502:	4323      	orrs	r3, r4
    2504:	e7dd      	b.n	24c2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2506:	4c0d      	ldr	r4, [pc, #52]	; (253c <_system_pinmux_config+0xa4>)
    2508:	4023      	ands	r3, r4
    250a:	e7df      	b.n	24cc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    250c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    250e:	040c      	lsls	r4, r1, #16
    2510:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2512:	23a0      	movs	r3, #160	; 0xa0
    2514:	05db      	lsls	r3, r3, #23
    2516:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2518:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    251a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    251c:	23d0      	movs	r3, #208	; 0xd0
    251e:	061b      	lsls	r3, r3, #24
    2520:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2522:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2524:	78d3      	ldrb	r3, [r2, #3]
    2526:	2b00      	cmp	r3, #0
    2528:	d103      	bne.n	2532 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    252a:	7853      	ldrb	r3, [r2, #1]
    252c:	3b01      	subs	r3, #1
    252e:	2b01      	cmp	r3, #1
    2530:	d902      	bls.n	2538 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2532:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2534:	6181      	str	r1, [r0, #24]
    2536:	e7f8      	b.n	252a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2538:	6081      	str	r1, [r0, #8]
}
    253a:	e7fa      	b.n	2532 <_system_pinmux_config+0x9a>
    253c:	fffbffff 	.word	0xfffbffff

00002540 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2540:	b510      	push	{r4, lr}
    2542:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    2544:	09c1      	lsrs	r1, r0, #7
		return NULL;
    2546:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2548:	2900      	cmp	r1, #0
    254a:	d104      	bne.n	2556 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    254c:	0943      	lsrs	r3, r0, #5
    254e:	01db      	lsls	r3, r3, #7
    2550:	4905      	ldr	r1, [pc, #20]	; (2568 <system_pinmux_pin_set_config+0x28>)
    2552:	468c      	mov	ip, r1
    2554:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2556:	241f      	movs	r4, #31
    2558:	4020      	ands	r0, r4
    255a:	2101      	movs	r1, #1
    255c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    255e:	0018      	movs	r0, r3
    2560:	4b02      	ldr	r3, [pc, #8]	; (256c <system_pinmux_pin_set_config+0x2c>)
    2562:	4798      	blx	r3
}
    2564:	bd10      	pop	{r4, pc}
    2566:	46c0      	nop			; (mov r8, r8)
    2568:	41004400 	.word	0x41004400
    256c:	00002499 	.word	0x00002499

00002570 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2570:	4770      	bx	lr
	...

00002574 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2574:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2576:	4b05      	ldr	r3, [pc, #20]	; (258c <system_init+0x18>)
    2578:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    257a:	4b05      	ldr	r3, [pc, #20]	; (2590 <system_init+0x1c>)
    257c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    257e:	4b05      	ldr	r3, [pc, #20]	; (2594 <system_init+0x20>)
    2580:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2582:	4b05      	ldr	r3, [pc, #20]	; (2598 <system_init+0x24>)
    2584:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2586:	4b05      	ldr	r3, [pc, #20]	; (259c <system_init+0x28>)
    2588:	4798      	blx	r3
}
    258a:	bd10      	pop	{r4, pc}
    258c:	00002179 	.word	0x00002179
    2590:	00001f91 	.word	0x00001f91
    2594:	00000229 	.word	0x00000229
    2598:	000003e9 	.word	0x000003e9
    259c:	00002571 	.word	0x00002571

000025a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    25a0:	e7fe      	b.n	25a0 <Dummy_Handler>
	...

000025a4 <Reset_Handler>:
{
    25a4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    25a6:	4a26      	ldr	r2, [pc, #152]	; (2640 <Reset_Handler+0x9c>)
    25a8:	4b26      	ldr	r3, [pc, #152]	; (2644 <Reset_Handler+0xa0>)
    25aa:	429a      	cmp	r2, r3
    25ac:	d011      	beq.n	25d2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    25ae:	001a      	movs	r2, r3
    25b0:	4b25      	ldr	r3, [pc, #148]	; (2648 <Reset_Handler+0xa4>)
    25b2:	429a      	cmp	r2, r3
    25b4:	d20d      	bcs.n	25d2 <Reset_Handler+0x2e>
    25b6:	4a25      	ldr	r2, [pc, #148]	; (264c <Reset_Handler+0xa8>)
    25b8:	3303      	adds	r3, #3
    25ba:	1a9b      	subs	r3, r3, r2
    25bc:	089b      	lsrs	r3, r3, #2
    25be:	3301      	adds	r3, #1
    25c0:	009b      	lsls	r3, r3, #2
    25c2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    25c4:	481f      	ldr	r0, [pc, #124]	; (2644 <Reset_Handler+0xa0>)
    25c6:	491e      	ldr	r1, [pc, #120]	; (2640 <Reset_Handler+0x9c>)
    25c8:	588c      	ldr	r4, [r1, r2]
    25ca:	5084      	str	r4, [r0, r2]
    25cc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    25ce:	429a      	cmp	r2, r3
    25d0:	d1fa      	bne.n	25c8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    25d2:	4a1f      	ldr	r2, [pc, #124]	; (2650 <Reset_Handler+0xac>)
    25d4:	4b1f      	ldr	r3, [pc, #124]	; (2654 <Reset_Handler+0xb0>)
    25d6:	429a      	cmp	r2, r3
    25d8:	d20a      	bcs.n	25f0 <Reset_Handler+0x4c>
    25da:	43d3      	mvns	r3, r2
    25dc:	491d      	ldr	r1, [pc, #116]	; (2654 <Reset_Handler+0xb0>)
    25de:	185b      	adds	r3, r3, r1
    25e0:	2103      	movs	r1, #3
    25e2:	438b      	bics	r3, r1
    25e4:	3304      	adds	r3, #4
    25e6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    25e8:	2100      	movs	r1, #0
    25ea:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    25ec:	4293      	cmp	r3, r2
    25ee:	d1fc      	bne.n	25ea <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    25f0:	4a19      	ldr	r2, [pc, #100]	; (2658 <Reset_Handler+0xb4>)
    25f2:	21ff      	movs	r1, #255	; 0xff
    25f4:	4b19      	ldr	r3, [pc, #100]	; (265c <Reset_Handler+0xb8>)
    25f6:	438b      	bics	r3, r1
    25f8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    25fa:	39fd      	subs	r1, #253	; 0xfd
    25fc:	2390      	movs	r3, #144	; 0x90
    25fe:	005b      	lsls	r3, r3, #1
    2600:	4a17      	ldr	r2, [pc, #92]	; (2660 <Reset_Handler+0xbc>)
    2602:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2604:	4b17      	ldr	r3, [pc, #92]	; (2664 <Reset_Handler+0xc0>)
    2606:	7b9a      	ldrb	r2, [r3, #14]
    2608:	312e      	adds	r1, #46	; 0x2e
    260a:	438a      	bics	r2, r1
    260c:	2120      	movs	r1, #32
    260e:	430a      	orrs	r2, r1
    2610:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2612:	7b9a      	ldrb	r2, [r3, #14]
    2614:	210c      	movs	r1, #12
    2616:	438a      	bics	r2, r1
    2618:	2108      	movs	r1, #8
    261a:	430a      	orrs	r2, r1
    261c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    261e:	7b9a      	ldrb	r2, [r3, #14]
    2620:	2103      	movs	r1, #3
    2622:	438a      	bics	r2, r1
    2624:	2102      	movs	r1, #2
    2626:	430a      	orrs	r2, r1
    2628:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    262a:	4a0f      	ldr	r2, [pc, #60]	; (2668 <Reset_Handler+0xc4>)
    262c:	6853      	ldr	r3, [r2, #4]
    262e:	2180      	movs	r1, #128	; 0x80
    2630:	430b      	orrs	r3, r1
    2632:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2634:	4b0d      	ldr	r3, [pc, #52]	; (266c <Reset_Handler+0xc8>)
    2636:	4798      	blx	r3
        main();
    2638:	4b0d      	ldr	r3, [pc, #52]	; (2670 <Reset_Handler+0xcc>)
    263a:	4798      	blx	r3
    263c:	e7fe      	b.n	263c <Reset_Handler+0x98>
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	000028e4 	.word	0x000028e4
    2644:	20000000 	.word	0x20000000
    2648:	200000a4 	.word	0x200000a4
    264c:	20000004 	.word	0x20000004
    2650:	200000a4 	.word	0x200000a4
    2654:	200001f4 	.word	0x200001f4
    2658:	e000ed00 	.word	0xe000ed00
    265c:	00000000 	.word	0x00000000
    2660:	41007000 	.word	0x41007000
    2664:	41004800 	.word	0x41004800
    2668:	41004000 	.word	0x41004000
    266c:	000027d9 	.word	0x000027d9
    2670:	00002675 	.word	0x00002675

00002674 <main>:
volatile uint8_t input_buttons = 0;
volatile bool interrupt_occured = false;


int main (void)
{
    2674:	b510      	push	{r4, lr}
	
	system_init();
    2676:	4b0a      	ldr	r3, [pc, #40]	; (26a0 <main+0x2c>)
    2678:	4798      	blx	r3
	cpu_irq_enable();
    267a:	2201      	movs	r2, #1
    267c:	4b09      	ldr	r3, [pc, #36]	; (26a4 <main+0x30>)
    267e:	701a      	strb	r2, [r3, #0]
    2680:	f3bf 8f5f 	dmb	sy
    2684:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//Initailise the timer for the delay
	delay_init();
    2686:	4b08      	ldr	r3, [pc, #32]	; (26a8 <main+0x34>)
    2688:	4798      	blx	r3
	
	
	//Leds and buttons initialization
	init_led_buttons();
    268a:	4b08      	ldr	r3, [pc, #32]	; (26ac <main+0x38>)
    268c:	4798      	blx	r3
	//SPI initialization
	configure_spi();
    268e:	4b08      	ldr	r3, [pc, #32]	; (26b0 <main+0x3c>)
    2690:	4798      	blx	r3
	//Init buttons
	init_buttons();
    2692:	4b08      	ldr	r3, [pc, #32]	; (26b4 <main+0x40>)
    2694:	4798      	blx	r3
	//Init Servo Pulse capture
	
	
	//Init_burp_box
	init_burp_box();
    2696:	4b08      	ldr	r3, [pc, #32]	; (26b8 <main+0x44>)
    2698:	4798      	blx	r3
	
	//main_1();
	init_servo_capture();
    269a:	4b08      	ldr	r3, [pc, #32]	; (26bc <main+0x48>)
    269c:	4798      	blx	r3
    269e:	e7fe      	b.n	269e <main+0x2a>
    26a0:	00002575 	.word	0x00002575
    26a4:	200000a0 	.word	0x200000a0
    26a8:	00000ff1 	.word	0x00000ff1
    26ac:	00001cdd 	.word	0x00001cdd
    26b0:	00001f31 	.word	0x00001f31
    26b4:	0000063d 	.word	0x0000063d
    26b8:	00000b89 	.word	0x00000b89
    26bc:	00000999 	.word	0x00000999

000026c0 <__udivsi3>:
    26c0:	2200      	movs	r2, #0
    26c2:	0843      	lsrs	r3, r0, #1
    26c4:	428b      	cmp	r3, r1
    26c6:	d374      	bcc.n	27b2 <__udivsi3+0xf2>
    26c8:	0903      	lsrs	r3, r0, #4
    26ca:	428b      	cmp	r3, r1
    26cc:	d35f      	bcc.n	278e <__udivsi3+0xce>
    26ce:	0a03      	lsrs	r3, r0, #8
    26d0:	428b      	cmp	r3, r1
    26d2:	d344      	bcc.n	275e <__udivsi3+0x9e>
    26d4:	0b03      	lsrs	r3, r0, #12
    26d6:	428b      	cmp	r3, r1
    26d8:	d328      	bcc.n	272c <__udivsi3+0x6c>
    26da:	0c03      	lsrs	r3, r0, #16
    26dc:	428b      	cmp	r3, r1
    26de:	d30d      	bcc.n	26fc <__udivsi3+0x3c>
    26e0:	22ff      	movs	r2, #255	; 0xff
    26e2:	0209      	lsls	r1, r1, #8
    26e4:	ba12      	rev	r2, r2
    26e6:	0c03      	lsrs	r3, r0, #16
    26e8:	428b      	cmp	r3, r1
    26ea:	d302      	bcc.n	26f2 <__udivsi3+0x32>
    26ec:	1212      	asrs	r2, r2, #8
    26ee:	0209      	lsls	r1, r1, #8
    26f0:	d065      	beq.n	27be <__udivsi3+0xfe>
    26f2:	0b03      	lsrs	r3, r0, #12
    26f4:	428b      	cmp	r3, r1
    26f6:	d319      	bcc.n	272c <__udivsi3+0x6c>
    26f8:	e000      	b.n	26fc <__udivsi3+0x3c>
    26fa:	0a09      	lsrs	r1, r1, #8
    26fc:	0bc3      	lsrs	r3, r0, #15
    26fe:	428b      	cmp	r3, r1
    2700:	d301      	bcc.n	2706 <__udivsi3+0x46>
    2702:	03cb      	lsls	r3, r1, #15
    2704:	1ac0      	subs	r0, r0, r3
    2706:	4152      	adcs	r2, r2
    2708:	0b83      	lsrs	r3, r0, #14
    270a:	428b      	cmp	r3, r1
    270c:	d301      	bcc.n	2712 <__udivsi3+0x52>
    270e:	038b      	lsls	r3, r1, #14
    2710:	1ac0      	subs	r0, r0, r3
    2712:	4152      	adcs	r2, r2
    2714:	0b43      	lsrs	r3, r0, #13
    2716:	428b      	cmp	r3, r1
    2718:	d301      	bcc.n	271e <__udivsi3+0x5e>
    271a:	034b      	lsls	r3, r1, #13
    271c:	1ac0      	subs	r0, r0, r3
    271e:	4152      	adcs	r2, r2
    2720:	0b03      	lsrs	r3, r0, #12
    2722:	428b      	cmp	r3, r1
    2724:	d301      	bcc.n	272a <__udivsi3+0x6a>
    2726:	030b      	lsls	r3, r1, #12
    2728:	1ac0      	subs	r0, r0, r3
    272a:	4152      	adcs	r2, r2
    272c:	0ac3      	lsrs	r3, r0, #11
    272e:	428b      	cmp	r3, r1
    2730:	d301      	bcc.n	2736 <__udivsi3+0x76>
    2732:	02cb      	lsls	r3, r1, #11
    2734:	1ac0      	subs	r0, r0, r3
    2736:	4152      	adcs	r2, r2
    2738:	0a83      	lsrs	r3, r0, #10
    273a:	428b      	cmp	r3, r1
    273c:	d301      	bcc.n	2742 <__udivsi3+0x82>
    273e:	028b      	lsls	r3, r1, #10
    2740:	1ac0      	subs	r0, r0, r3
    2742:	4152      	adcs	r2, r2
    2744:	0a43      	lsrs	r3, r0, #9
    2746:	428b      	cmp	r3, r1
    2748:	d301      	bcc.n	274e <__udivsi3+0x8e>
    274a:	024b      	lsls	r3, r1, #9
    274c:	1ac0      	subs	r0, r0, r3
    274e:	4152      	adcs	r2, r2
    2750:	0a03      	lsrs	r3, r0, #8
    2752:	428b      	cmp	r3, r1
    2754:	d301      	bcc.n	275a <__udivsi3+0x9a>
    2756:	020b      	lsls	r3, r1, #8
    2758:	1ac0      	subs	r0, r0, r3
    275a:	4152      	adcs	r2, r2
    275c:	d2cd      	bcs.n	26fa <__udivsi3+0x3a>
    275e:	09c3      	lsrs	r3, r0, #7
    2760:	428b      	cmp	r3, r1
    2762:	d301      	bcc.n	2768 <__udivsi3+0xa8>
    2764:	01cb      	lsls	r3, r1, #7
    2766:	1ac0      	subs	r0, r0, r3
    2768:	4152      	adcs	r2, r2
    276a:	0983      	lsrs	r3, r0, #6
    276c:	428b      	cmp	r3, r1
    276e:	d301      	bcc.n	2774 <__udivsi3+0xb4>
    2770:	018b      	lsls	r3, r1, #6
    2772:	1ac0      	subs	r0, r0, r3
    2774:	4152      	adcs	r2, r2
    2776:	0943      	lsrs	r3, r0, #5
    2778:	428b      	cmp	r3, r1
    277a:	d301      	bcc.n	2780 <__udivsi3+0xc0>
    277c:	014b      	lsls	r3, r1, #5
    277e:	1ac0      	subs	r0, r0, r3
    2780:	4152      	adcs	r2, r2
    2782:	0903      	lsrs	r3, r0, #4
    2784:	428b      	cmp	r3, r1
    2786:	d301      	bcc.n	278c <__udivsi3+0xcc>
    2788:	010b      	lsls	r3, r1, #4
    278a:	1ac0      	subs	r0, r0, r3
    278c:	4152      	adcs	r2, r2
    278e:	08c3      	lsrs	r3, r0, #3
    2790:	428b      	cmp	r3, r1
    2792:	d301      	bcc.n	2798 <__udivsi3+0xd8>
    2794:	00cb      	lsls	r3, r1, #3
    2796:	1ac0      	subs	r0, r0, r3
    2798:	4152      	adcs	r2, r2
    279a:	0883      	lsrs	r3, r0, #2
    279c:	428b      	cmp	r3, r1
    279e:	d301      	bcc.n	27a4 <__udivsi3+0xe4>
    27a0:	008b      	lsls	r3, r1, #2
    27a2:	1ac0      	subs	r0, r0, r3
    27a4:	4152      	adcs	r2, r2
    27a6:	0843      	lsrs	r3, r0, #1
    27a8:	428b      	cmp	r3, r1
    27aa:	d301      	bcc.n	27b0 <__udivsi3+0xf0>
    27ac:	004b      	lsls	r3, r1, #1
    27ae:	1ac0      	subs	r0, r0, r3
    27b0:	4152      	adcs	r2, r2
    27b2:	1a41      	subs	r1, r0, r1
    27b4:	d200      	bcs.n	27b8 <__udivsi3+0xf8>
    27b6:	4601      	mov	r1, r0
    27b8:	4152      	adcs	r2, r2
    27ba:	4610      	mov	r0, r2
    27bc:	4770      	bx	lr
    27be:	e7ff      	b.n	27c0 <__udivsi3+0x100>
    27c0:	b501      	push	{r0, lr}
    27c2:	2000      	movs	r0, #0
    27c4:	f000 f806 	bl	27d4 <__aeabi_idiv0>
    27c8:	bd02      	pop	{r1, pc}
    27ca:	46c0      	nop			; (mov r8, r8)

000027cc <__aeabi_uidivmod>:
    27cc:	2900      	cmp	r1, #0
    27ce:	d0f7      	beq.n	27c0 <__udivsi3+0x100>
    27d0:	e776      	b.n	26c0 <__udivsi3>
    27d2:	4770      	bx	lr

000027d4 <__aeabi_idiv0>:
    27d4:	4770      	bx	lr
    27d6:	46c0      	nop			; (mov r8, r8)

000027d8 <__libc_init_array>:
    27d8:	b570      	push	{r4, r5, r6, lr}
    27da:	2600      	movs	r6, #0
    27dc:	4d0c      	ldr	r5, [pc, #48]	; (2810 <__libc_init_array+0x38>)
    27de:	4c0d      	ldr	r4, [pc, #52]	; (2814 <__libc_init_array+0x3c>)
    27e0:	1b64      	subs	r4, r4, r5
    27e2:	10a4      	asrs	r4, r4, #2
    27e4:	42a6      	cmp	r6, r4
    27e6:	d109      	bne.n	27fc <__libc_init_array+0x24>
    27e8:	2600      	movs	r6, #0
    27ea:	f000 f86b 	bl	28c4 <_init>
    27ee:	4d0a      	ldr	r5, [pc, #40]	; (2818 <__libc_init_array+0x40>)
    27f0:	4c0a      	ldr	r4, [pc, #40]	; (281c <__libc_init_array+0x44>)
    27f2:	1b64      	subs	r4, r4, r5
    27f4:	10a4      	asrs	r4, r4, #2
    27f6:	42a6      	cmp	r6, r4
    27f8:	d105      	bne.n	2806 <__libc_init_array+0x2e>
    27fa:	bd70      	pop	{r4, r5, r6, pc}
    27fc:	00b3      	lsls	r3, r6, #2
    27fe:	58eb      	ldr	r3, [r5, r3]
    2800:	4798      	blx	r3
    2802:	3601      	adds	r6, #1
    2804:	e7ee      	b.n	27e4 <__libc_init_array+0xc>
    2806:	00b3      	lsls	r3, r6, #2
    2808:	58eb      	ldr	r3, [r5, r3]
    280a:	4798      	blx	r3
    280c:	3601      	adds	r6, #1
    280e:	e7f2      	b.n	27f6 <__libc_init_array+0x1e>
    2810:	000028d0 	.word	0x000028d0
    2814:	000028d0 	.word	0x000028d0
    2818:	000028d0 	.word	0x000028d0
    281c:	000028d4 	.word	0x000028d4

00002820 <memset>:
    2820:	0003      	movs	r3, r0
    2822:	1882      	adds	r2, r0, r2
    2824:	4293      	cmp	r3, r2
    2826:	d100      	bne.n	282a <memset+0xa>
    2828:	4770      	bx	lr
    282a:	7019      	strb	r1, [r3, #0]
    282c:	3301      	adds	r3, #1
    282e:	e7f9      	b.n	2824 <memset+0x4>
    2830:	00000a12 	.word	0x00000a12
    2834:	00000a0c 	.word	0x00000a0c
    2838:	00000a18 	.word	0x00000a18
    283c:	00000a20 	.word	0x00000a20
    2840:	00000a28 	.word	0x00000a28
    2844:	00000a30 	.word	0x00000a30

00002848 <_tcc_intflag>:
    2848:	00000001 00000002 00000004 00000008     ................
    2858:	00001000 00002000 00004000 00008000     ..... ...@......
    2868:	00010000 00020000 00040000 00080000     ................

00002878 <tc_interrupt_vectors.11882>:
    2878:	00000e0d 00002016 00002012 00002012     ..... ... ... ..
    2888:	00002074 00002074 0000202a 0000201c     t ..t ..* ... ..
    2898:	00002030 00002062 000020fc 000020dc     0 ..b ... ... ..
    28a8:	000020dc 00002168 000020ee 0000210a     . ..h!... ...!..
    28b8:	000020e0 00002118 00002158              . ...!..X!..

000028c4 <_init>:
    28c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    28ca:	bc08      	pop	{r3}
    28cc:	469e      	mov	lr, r3
    28ce:	4770      	bx	lr

000028d0 <__init_array_start>:
    28d0:	000000b5 	.word	0x000000b5

000028d4 <_fini>:
    28d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    28da:	bc08      	pop	{r3}
    28dc:	469e      	mov	lr, r3
    28de:	4770      	bx	lr

000028e0 <__fini_array_start>:
    28e0:	0000008d 	.word	0x0000008d
