
Burp_box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020e4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  000020e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000114  20000078  0000215c  00020078  2**2
                  ALLOC
  3 .stack        00000404  2000018c  00002270  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003aaf9  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004f72  00000000  00000000  0005abf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007b98  00000000  00000000  0005fb64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006c8  00000000  00000000  000676fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ad8  00000000  00000000  00067dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001775c  00000000  00000000  0006889c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000113fc  00000000  00000000  0007fff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006cdcb  00000000  00000000  000913f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000fbc  00000000  00000000  000fe1c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 05 00 20 cd 1d 00 00 c9 1d 00 00 c9 1d 00 00     ... ............
	...
      2c:	c9 1d 00 00 00 00 00 00 00 00 00 00 c9 1d 00 00     ................
      3c:	c9 1d 00 00 c9 1d 00 00 c9 1d 00 00 c9 1d 00 00     ................
      4c:	c9 1d 00 00 39 01 00 00 c9 1d 00 00 c9 1d 00 00     ....9...........
      5c:	00 00 00 00 c9 1d 00 00 91 0a 00 00 a1 0a 00 00     ................
      6c:	00 00 00 00 85 10 00 00 2d 11 00 00 3d 11 00 00     ........-...=...
      7c:	c9 1d 00 00 c9 1d 00 00 c9 1d 00 00 c9 1d 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000078 	.word	0x20000078
      ac:	00000000 	.word	0x00000000
      b0:	000020e4 	.word	0x000020e4

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	2000007c 	.word	0x2000007c
      e0:	000020e4 	.word	0x000020e4
      e4:	000020e4 	.word	0x000020e4
      e8:	00000000 	.word	0x00000000

000000ec <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
      ec:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
      ee:	2a00      	cmp	r2, #0
      f0:	d001      	beq.n	f6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
      f2:	0018      	movs	r0, r3
      f4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
      f6:	008b      	lsls	r3, r1, #2
      f8:	4a06      	ldr	r2, [pc, #24]	; (114 <extint_register_callback+0x28>)
      fa:	589b      	ldr	r3, [r3, r2]
      fc:	2b00      	cmp	r3, #0
      fe:	d003      	beq.n	108 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     100:	4283      	cmp	r3, r0
     102:	d005      	beq.n	110 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     104:	231d      	movs	r3, #29
     106:	e7f4      	b.n	f2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     108:	0089      	lsls	r1, r1, #2
     10a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     10c:	2300      	movs	r3, #0
     10e:	e7f0      	b.n	f2 <extint_register_callback+0x6>
		return STATUS_OK;
     110:	2300      	movs	r3, #0
     112:	e7ee      	b.n	f2 <extint_register_callback+0x6>
     114:	200000d8 	.word	0x200000d8

00000118 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     118:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     11a:	2900      	cmp	r1, #0
     11c:	d001      	beq.n	122 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     11e:	0018      	movs	r0, r3
     120:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     122:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     124:	281f      	cmp	r0, #31
     126:	d800      	bhi.n	12a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     128:	4a02      	ldr	r2, [pc, #8]	; (134 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     12a:	2301      	movs	r3, #1
     12c:	4083      	lsls	r3, r0
     12e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     130:	2300      	movs	r3, #0
     132:	e7f4      	b.n	11e <extint_chan_enable_callback+0x6>
     134:	40001800 	.word	0x40001800

00000138 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     138:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     13a:	2200      	movs	r2, #0
     13c:	4b10      	ldr	r3, [pc, #64]	; (180 <EIC_Handler+0x48>)
     13e:	701a      	strb	r2, [r3, #0]
     140:	2300      	movs	r3, #0
     142:	4a10      	ldr	r2, [pc, #64]	; (184 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     144:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			//extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     146:	4e10      	ldr	r6, [pc, #64]	; (188 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     148:	4c0d      	ldr	r4, [pc, #52]	; (180 <EIC_Handler+0x48>)
     14a:	e00a      	b.n	162 <EIC_Handler+0x2a>
		return eics[eic_index];
     14c:	4a0d      	ldr	r2, [pc, #52]	; (184 <EIC_Handler+0x4c>)
     14e:	e008      	b.n	162 <EIC_Handler+0x2a>
     150:	7823      	ldrb	r3, [r4, #0]
     152:	3301      	adds	r3, #1
     154:	b2db      	uxtb	r3, r3
     156:	7023      	strb	r3, [r4, #0]
     158:	2b0f      	cmp	r3, #15
     15a:	d80f      	bhi.n	17c <EIC_Handler+0x44>
		return NULL;
     15c:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     15e:	2b1f      	cmp	r3, #31
     160:	d9f4      	bls.n	14c <EIC_Handler+0x14>

	return (eic_module->INTFLAG.reg & eic_mask);
     162:	6911      	ldr	r1, [r2, #16]
	uint32_t eic_mask   = (1UL << (channel % 32));
     164:	0028      	movs	r0, r5
     166:	4018      	ands	r0, r3
     168:	2201      	movs	r2, #1
     16a:	4082      	lsls	r2, r0
		if (extint_chan_is_detected(_current_channel)) {
     16c:	4211      	tst	r1, r2
     16e:	d0ef      	beq.n	150 <EIC_Handler+0x18>
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     170:	009b      	lsls	r3, r3, #2
     172:	599b      	ldr	r3, [r3, r6]
     174:	2b00      	cmp	r3, #0
     176:	d0eb      	beq.n	150 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     178:	4798      	blx	r3
     17a:	e7e9      	b.n	150 <EIC_Handler+0x18>
			}
		}
	}
}
     17c:	bd70      	pop	{r4, r5, r6, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	200000d7 	.word	0x200000d7
     184:	40001800 	.word	0x40001800
     188:	200000d8 	.word	0x200000d8

0000018c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     18c:	4a04      	ldr	r2, [pc, #16]	; (1a0 <_extint_enable+0x14>)
     18e:	7813      	ldrb	r3, [r2, #0]
     190:	2102      	movs	r1, #2
     192:	430b      	orrs	r3, r1
     194:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     196:	7853      	ldrb	r3, [r2, #1]
     198:	b25b      	sxtb	r3, r3
     19a:	2b00      	cmp	r3, #0
     19c:	dbfb      	blt.n	196 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     19e:	4770      	bx	lr
     1a0:	40001800 	.word	0x40001800

000001a4 <_system_extint_init>:
{
     1a4:	b500      	push	{lr}
     1a6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     1a8:	4a12      	ldr	r2, [pc, #72]	; (1f4 <_system_extint_init+0x50>)
     1aa:	6993      	ldr	r3, [r2, #24]
     1ac:	2140      	movs	r1, #64	; 0x40
     1ae:	430b      	orrs	r3, r1
     1b0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1b2:	a901      	add	r1, sp, #4
     1b4:	2300      	movs	r3, #0
     1b6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     1b8:	2005      	movs	r0, #5
     1ba:	4b0f      	ldr	r3, [pc, #60]	; (1f8 <_system_extint_init+0x54>)
     1bc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     1be:	2005      	movs	r0, #5
     1c0:	4b0e      	ldr	r3, [pc, #56]	; (1fc <_system_extint_init+0x58>)
     1c2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     1c4:	4a0e      	ldr	r2, [pc, #56]	; (200 <_system_extint_init+0x5c>)
     1c6:	7813      	ldrb	r3, [r2, #0]
     1c8:	2101      	movs	r1, #1
     1ca:	430b      	orrs	r3, r1
     1cc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1ce:	7853      	ldrb	r3, [r2, #1]
     1d0:	b25b      	sxtb	r3, r3
     1d2:	2b00      	cmp	r3, #0
     1d4:	dbfb      	blt.n	1ce <_system_extint_init+0x2a>
     1d6:	4b0b      	ldr	r3, [pc, #44]	; (204 <_system_extint_init+0x60>)
     1d8:	0019      	movs	r1, r3
     1da:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     1dc:	2200      	movs	r2, #0
     1de:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     1e0:	4299      	cmp	r1, r3
     1e2:	d1fc      	bne.n	1de <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1e4:	2210      	movs	r2, #16
     1e6:	4b08      	ldr	r3, [pc, #32]	; (208 <_system_extint_init+0x64>)
     1e8:	601a      	str	r2, [r3, #0]
	_extint_enable();
     1ea:	4b08      	ldr	r3, [pc, #32]	; (20c <_system_extint_init+0x68>)
     1ec:	4798      	blx	r3
}
     1ee:	b003      	add	sp, #12
     1f0:	bd00      	pop	{pc}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	40000400 	.word	0x40000400
     1f8:	00001c71 	.word	0x00001c71
     1fc:	00001be5 	.word	0x00001be5
     200:	40001800 	.word	0x40001800
     204:	200000d8 	.word	0x200000d8
     208:	e000e100 	.word	0xe000e100
     20c:	0000018d 	.word	0x0000018d

00000210 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     210:	2300      	movs	r3, #0
     212:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     214:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     216:	2201      	movs	r2, #1
     218:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     21a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     21c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     21e:	3302      	adds	r3, #2
     220:	72c3      	strb	r3, [r0, #11]
}
     222:	4770      	bx	lr

00000224 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     224:	b5f0      	push	{r4, r5, r6, r7, lr}
     226:	b083      	sub	sp, #12
     228:	0005      	movs	r5, r0
     22a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     22c:	a901      	add	r1, sp, #4
     22e:	2300      	movs	r3, #0
     230:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     232:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     234:	7923      	ldrb	r3, [r4, #4]
     236:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     238:	7a23      	ldrb	r3, [r4, #8]
     23a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     23c:	7820      	ldrb	r0, [r4, #0]
     23e:	4b15      	ldr	r3, [pc, #84]	; (294 <extint_chan_set_config+0x70>)
     240:	4798      	blx	r3
		return NULL;
     242:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     244:	2d1f      	cmp	r5, #31
     246:	d800      	bhi.n	24a <extint_chan_set_config+0x26>
		return eics[eic_index];
     248:	4813      	ldr	r0, [pc, #76]	; (298 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     24a:	2207      	movs	r2, #7
     24c:	402a      	ands	r2, r5
     24e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     250:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     252:	7aa3      	ldrb	r3, [r4, #10]
     254:	2b00      	cmp	r3, #0
     256:	d001      	beq.n	25c <extint_chan_set_config+0x38>
     258:	2308      	movs	r3, #8
     25a:	431f      	orrs	r7, r3
     25c:	08eb      	lsrs	r3, r5, #3
     25e:	009b      	lsls	r3, r3, #2
     260:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     262:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     264:	260f      	movs	r6, #15
     266:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     268:	43b1      	bics	r1, r6
			(new_config << config_pos);
     26a:	4097      	lsls	r7, r2
     26c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     26e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     270:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     272:	7a63      	ldrb	r3, [r4, #9]
     274:	2b00      	cmp	r3, #0
     276:	d106      	bne.n	286 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     278:	6943      	ldr	r3, [r0, #20]
     27a:	2201      	movs	r2, #1
     27c:	40aa      	lsls	r2, r5
     27e:	4393      	bics	r3, r2
     280:	6143      	str	r3, [r0, #20]
	}
}
     282:	b003      	add	sp, #12
     284:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     286:	6942      	ldr	r2, [r0, #20]
     288:	2301      	movs	r3, #1
     28a:	40ab      	lsls	r3, r5
     28c:	4313      	orrs	r3, r2
     28e:	6143      	str	r3, [r0, #20]
     290:	e7f7      	b.n	282 <extint_chan_set_config+0x5e>
     292:	46c0      	nop			; (mov r8, r8)
     294:	00001d69 	.word	0x00001d69
     298:	40001800 	.word	0x40001800

0000029c <enable_buttons>:
#define EXTINT_FLAG_CLEAR    0x4000180BUL
#define MASK_FLAG_BUTTONS    0x000000E0UL
#define DEBOUNCE_DELAY       125

void enable_buttons()
{
     29c:	b510      	push	{r4, lr}
	extint_chan_enable_callback(PLAY_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     29e:	2100      	movs	r1, #0
     2a0:	2004      	movs	r0, #4
     2a2:	4c03      	ldr	r4, [pc, #12]	; (2b0 <enable_buttons+0x14>)
     2a4:	47a0      	blx	r4
	/*
	extint_chan_enable_callback(RECORD_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	*/
	extint_chan_enable_callback(NEXT_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     2a6:	2100      	movs	r1, #0
     2a8:	2001      	movs	r0, #1
     2aa:	47a0      	blx	r4
	
}
     2ac:	bd10      	pop	{r4, pc}
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	00000119 	.word	0x00000119

000002b4 <config_extint_channel_burp_box>:
	extint_chan_disable_callback(NEXT_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	
}

void config_extint_channel_burp_box()
{
     2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     2b6:	b085      	sub	sp, #20
	struct extint_chan_conf config_extint_chan;
	
	//--Play
	extint_chan_get_config_defaults(&config_extint_chan);
     2b8:	ac01      	add	r4, sp, #4
     2ba:	0020      	movs	r0, r4
     2bc:	4f0d      	ldr	r7, [pc, #52]	; (2f4 <config_extint_channel_burp_box+0x40>)
     2be:	47b8      	blx	r7
	config_extint_chan.gpio_pin           = PLAY_BUTTON_EIC;
     2c0:	2304      	movs	r3, #4
     2c2:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = PLAY_BUTTON_MUX;
     2c4:	2380      	movs	r3, #128	; 0x80
     2c6:	02db      	lsls	r3, r3, #11
     2c8:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
     2ca:	2502      	movs	r5, #2
     2cc:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     2ce:	72e5      	strb	r5, [r4, #11]
	extint_chan_set_config(PLAY_BUTTON_EIC_LINE, &config_extint_chan);
     2d0:	0021      	movs	r1, r4
     2d2:	2004      	movs	r0, #4
     2d4:	4e08      	ldr	r6, [pc, #32]	; (2f8 <config_extint_channel_burp_box+0x44>)
     2d6:	47b0      	blx	r6
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
	extint_chan_set_config(RECORD_BUTTON_EIC_LINE, &config_extint_chan);
	*/
	//--Next
	extint_chan_get_config_defaults(&config_extint_chan);
     2d8:	0020      	movs	r0, r4
     2da:	47b8      	blx	r7
	config_extint_chan.gpio_pin           = NEXT_BUTTON_EIC;
     2dc:	230f      	movs	r3, #15
     2de:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = NEXT_BUTTON_MUX;
     2e0:	23f0      	movs	r3, #240	; 0xf0
     2e2:	031b      	lsls	r3, r3, #12
     2e4:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
     2e6:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     2e8:	72e5      	strb	r5, [r4, #11]
	extint_chan_set_config(NEXT_BUTTON_EIC_LINE, &config_extint_chan);
     2ea:	0021      	movs	r1, r4
     2ec:	2001      	movs	r0, #1
     2ee:	47b0      	blx	r6
	
}
     2f0:	b005      	add	sp, #20
     2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2f4:	00000211 	.word	0x00000211
     2f8:	00000225 	.word	0x00000225

000002fc <read_interrupt_flag_status>:
	uint8_t  write_clear_flags = 0xFF;
	*write_clear_interrupts_flags = write_clear_flags;
}

uint8_t  read_interrupt_flag_status()
{
     2fc:	b082      	sub	sp, #8
	volatile uint8_t read_status_1 = 0;
     2fe:	466b      	mov	r3, sp
     300:	2200      	movs	r2, #0
     302:	71da      	strb	r2, [r3, #7]
	volatile uint8_t* check_interrupt_flag_status = NULL;
	check_interrupt_flag_status =  EXTINT_FLAG_STATUS;
	read_status_1 = *check_interrupt_flag_status;
     304:	4a03      	ldr	r2, [pc, #12]	; (314 <read_interrupt_flag_status+0x18>)
     306:	7812      	ldrb	r2, [r2, #0]
     308:	b2d2      	uxtb	r2, r2
     30a:	71da      	strb	r2, [r3, #7]
	//read_status = (read_status & MASK_FLAG_BUTTONS);
	return read_status_1;	
     30c:	79d8      	ldrb	r0, [r3, #7]
     30e:	b2c0      	uxtb	r0, r0
}
     310:	b002      	add	sp, #8
     312:	4770      	bx	lr
     314:	40001810 	.word	0x40001810

00000318 <play_pressed_callback>:

void play_pressed_callback()
{
     318:	b510      	push	{r4, lr}
	//check what all interrupt flags are high
	uint8_t read_status = 0;
	delay_cycles_ms(DEBOUNCE_DELAY);
     31a:	207d      	movs	r0, #125	; 0x7d
     31c:	4b0c      	ldr	r3, [pc, #48]	; (350 <play_pressed_callback+0x38>)
     31e:	4798      	blx	r3
	read_status = read_interrupt_flag_status();
     320:	4b0c      	ldr	r3, [pc, #48]	; (354 <play_pressed_callback+0x3c>)
     322:	4798      	blx	r3
	switch(read_status)
     324:	2810      	cmp	r0, #16
     326:	d005      	beq.n	334 <play_pressed_callback+0x1c>
     328:	2812      	cmp	r0, #18
     32a:	d00d      	beq.n	348 <play_pressed_callback+0x30>
		case ALL_BUTTONS_CLICKED:
			//global variable update
			input_buttons = N_P_R_PRESS;
			break;
		default:
			input_buttons = NO_BUTTONS_PRESSED;
     32c:	2200      	movs	r2, #0
     32e:	4b0a      	ldr	r3, [pc, #40]	; (358 <play_pressed_callback+0x40>)
     330:	701a      	strb	r2, [r3, #0]
			break;
     332:	e002      	b.n	33a <play_pressed_callback+0x22>
			input_buttons = P_PRESS;
     334:	2203      	movs	r2, #3
     336:	4b08      	ldr	r3, [pc, #32]	; (358 <play_pressed_callback+0x40>)
     338:	701a      	strb	r2, [r3, #0]
	}

	interrupt_occured = true;
     33a:	2201      	movs	r2, #1
     33c:	4b07      	ldr	r3, [pc, #28]	; (35c <play_pressed_callback+0x44>)
     33e:	701a      	strb	r2, [r3, #0]
	*write_clear_interrupts_flags = write_clear_flags;
     340:	32fe      	adds	r2, #254	; 0xfe
     342:	4b07      	ldr	r3, [pc, #28]	; (360 <play_pressed_callback+0x48>)
     344:	701a      	strb	r2, [r3, #0]
	//Clear the interrupt flags
	clear_interrupts_flags();
}
     346:	bd10      	pop	{r4, pc}
			input_buttons = N_P_R_PRESS;
     348:	2207      	movs	r2, #7
     34a:	4b03      	ldr	r3, [pc, #12]	; (358 <play_pressed_callback+0x40>)
     34c:	701a      	strb	r2, [r3, #0]
			break;
     34e:	e7f4      	b.n	33a <play_pressed_callback+0x22>
     350:	000008d1 	.word	0x000008d1
     354:	000002fd 	.word	0x000002fd
     358:	200000d4 	.word	0x200000d4
     35c:	200000d5 	.word	0x200000d5
     360:	40001810 	.word	0x40001810

00000364 <next_pressed_callback>:
	//Clear the interrupt flags
	clear_interrupts_flags();
}
*/
void next_pressed_callback()
{
     364:	b510      	push	{r4, lr}
	//check what all interrupt flags are high
	uint8_t read_status = 0;
	delay_cycles_ms(DEBOUNCE_DELAY);
     366:	207d      	movs	r0, #125	; 0x7d
     368:	4b0c      	ldr	r3, [pc, #48]	; (39c <next_pressed_callback+0x38>)
     36a:	4798      	blx	r3
	read_status = read_interrupt_flag_status();
     36c:	4b0c      	ldr	r3, [pc, #48]	; (3a0 <next_pressed_callback+0x3c>)
     36e:	4798      	blx	r3
	
	switch(read_status)
     370:	2802      	cmp	r0, #2
     372:	d005      	beq.n	380 <next_pressed_callback+0x1c>
     374:	2812      	cmp	r0, #18
     376:	d00d      	beq.n	394 <next_pressed_callback+0x30>
		case ALL_BUTTONS_CLICKED:
				//global variable update
				input_buttons = N_P_PRESS;
			break;
		default:
			input_buttons = NO_BUTTONS_PRESSED;
     378:	2200      	movs	r2, #0
     37a:	4b0a      	ldr	r3, [pc, #40]	; (3a4 <next_pressed_callback+0x40>)
     37c:	701a      	strb	r2, [r3, #0]
			break;
     37e:	e002      	b.n	386 <next_pressed_callback+0x22>
			input_buttons = N_PRESS;
     380:	2201      	movs	r2, #1
     382:	4b08      	ldr	r3, [pc, #32]	; (3a4 <next_pressed_callback+0x40>)
     384:	701a      	strb	r2, [r3, #0]
	}

	interrupt_occured = true;
     386:	2201      	movs	r2, #1
     388:	4b07      	ldr	r3, [pc, #28]	; (3a8 <next_pressed_callback+0x44>)
     38a:	701a      	strb	r2, [r3, #0]
	*write_clear_interrupts_flags = write_clear_flags;
     38c:	32fe      	adds	r2, #254	; 0xfe
     38e:	4b07      	ldr	r3, [pc, #28]	; (3ac <next_pressed_callback+0x48>)
     390:	701a      	strb	r2, [r3, #0]
	//Clear the interrupt flags
	clear_interrupts_flags();
}
     392:	bd10      	pop	{r4, pc}
				input_buttons = N_P_PRESS;
     394:	2204      	movs	r2, #4
     396:	4b03      	ldr	r3, [pc, #12]	; (3a4 <next_pressed_callback+0x40>)
     398:	701a      	strb	r2, [r3, #0]
			break;
     39a:	e7f4      	b.n	386 <next_pressed_callback+0x22>
     39c:	000008d1 	.word	0x000008d1
     3a0:	000002fd 	.word	0x000002fd
     3a4:	200000d4 	.word	0x200000d4
     3a8:	200000d5 	.word	0x200000d5
     3ac:	40001810 	.word	0x40001810

000003b0 <config_extint_callbacks_burp_box>:

void config_extint_callbacks_burp_box()
{
     3b0:	b510      	push	{r4, lr}
	extint_register_callback(play_pressed_callback, PLAY_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     3b2:	2200      	movs	r2, #0
     3b4:	2104      	movs	r1, #4
     3b6:	4804      	ldr	r0, [pc, #16]	; (3c8 <config_extint_callbacks_burp_box+0x18>)
     3b8:	4c04      	ldr	r4, [pc, #16]	; (3cc <config_extint_callbacks_burp_box+0x1c>)
     3ba:	47a0      	blx	r4
	/*
	extint_register_callback(record_pressed_callback, RECORD_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
	*/
	extint_register_callback(next_pressed_callback, NEXT_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
     3bc:	2200      	movs	r2, #0
     3be:	2101      	movs	r1, #1
     3c0:	4803      	ldr	r0, [pc, #12]	; (3d0 <config_extint_callbacks_burp_box+0x20>)
     3c2:	47a0      	blx	r4

}
     3c4:	bd10      	pop	{r4, pc}
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	00000319 	.word	0x00000319
     3cc:	000000ed 	.word	0x000000ed
     3d0:	00000365 	.word	0x00000365

000003d4 <init_buttons>:
	port_pin_set_config(RECORD_BUTTON, &config_port_pin);
	port_pin_set_config(NEXT_BUTTON, &config_port_pin);
	port_pin_set_config(PLAY_BUTTON, &config_port_pin);
}
void init_buttons()
{
     3d4:	b510      	push	{r4, lr}
	//config_buttons_inputs();
	config_extint_channel_burp_box();
     3d6:	4b03      	ldr	r3, [pc, #12]	; (3e4 <init_buttons+0x10>)
     3d8:	4798      	blx	r3
	config_extint_callbacks_burp_box();
     3da:	4b03      	ldr	r3, [pc, #12]	; (3e8 <init_buttons+0x14>)
     3dc:	4798      	blx	r3
	enable_buttons();
     3de:	4b03      	ldr	r3, [pc, #12]	; (3ec <init_buttons+0x18>)
     3e0:	4798      	blx	r3
     3e2:	bd10      	pop	{r4, pc}
     3e4:	000002b5 	.word	0x000002b5
     3e8:	000003b1 	.word	0x000003b1
     3ec:	0000029d 	.word	0x0000029d

000003f0 <main_control_loop_1>:
#include "main_control.h"
#include "spi_control.h"
#include "bsp.h"

void main_control_loop_1()
{
     3f0:	b510      	push	{r4, lr}
	uint16_t servo_input = 0;
	uint16_t overall_input = 0;
	//enum buttons_state button_input;
	
	//Servo input -- here
	button_input  = check_input_buttons();
     3f2:	4b06      	ldr	r3, [pc, #24]	; (40c <STACK_SIZE+0xc>)
     3f4:	4798      	blx	r3
     3f6:	0002      	movs	r2, r0
	overall_input = input_buttons | button_input ;//|| servo_input ;
     3f8:	4b05      	ldr	r3, [pc, #20]	; (410 <STACK_SIZE+0x10>)
     3fa:	7818      	ldrb	r0, [r3, #0]
	input_buttons = 0;
     3fc:	2100      	movs	r1, #0
     3fe:	7019      	strb	r1, [r3, #0]
	overall_input = input_buttons | button_input ;//|| servo_input ;
     400:	4310      	orrs	r0, r2
	spi_main_loop_1(overall_input); 
     402:	b2c0      	uxtb	r0, r0
     404:	4b03      	ldr	r3, [pc, #12]	; (414 <STACK_SIZE+0x14>)
     406:	4798      	blx	r3

}
     408:	bd10      	pop	{r4, pc}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	000015d9 	.word	0x000015d9
     410:	200000d4 	.word	0x200000d4
     414:	00000755 	.word	0x00000755

00000418 <spi_write_global_erase>:
#include "spi_master.h"
#include "delay.h"
#include "bsp.h"

void spi_write_global_erase()
{
     418:	b510      	push	{r4, lr}
	spi_transceive(wr_buffer_global_erase , rd_buffer , BUF_LENGTH);
     41a:	2202      	movs	r2, #2
     41c:	4902      	ldr	r1, [pc, #8]	; (428 <spi_write_global_erase+0x10>)
     41e:	4803      	ldr	r0, [pc, #12]	; (42c <spi_write_global_erase+0x14>)
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <spi_write_global_erase+0x18>)
     422:	4798      	blx	r3
}
     424:	bd10      	pop	{r4, pc}
     426:	46c0      	nop			; (mov r8, r8)
     428:	20000094 	.word	0x20000094
     42c:	20000028 	.word	0x20000028
     430:	0000176d 	.word	0x0000176d

00000434 <spi_write_reset>:

void spi_write_reset()
{
     434:	b510      	push	{r4, lr}
	spi_transceive(wr_buffer_reset , rd_buffer , BUF_LENGTH);
     436:	2202      	movs	r2, #2
     438:	4902      	ldr	r1, [pc, #8]	; (444 <spi_write_reset+0x10>)
     43a:	4803      	ldr	r0, [pc, #12]	; (448 <spi_write_reset+0x14>)
     43c:	4b03      	ldr	r3, [pc, #12]	; (44c <spi_write_reset+0x18>)
     43e:	4798      	blx	r3
}
     440:	bd10      	pop	{r4, pc}
     442:	46c0      	nop			; (mov r8, r8)
     444:	20000094 	.word	0x20000094
     448:	20000060 	.word	0x20000060
     44c:	0000176d 	.word	0x0000176d

00000450 <spi_write_power_on>:

void spi_write_power_on()
{
     450:	b510      	push	{r4, lr}
	spi_transceive ( wr_buffer_power_on , rd_buffer , BUF_LENGTH);
     452:	2202      	movs	r2, #2
     454:	4902      	ldr	r1, [pc, #8]	; (460 <spi_write_power_on+0x10>)
     456:	4803      	ldr	r0, [pc, #12]	; (464 <spi_write_power_on+0x14>)
     458:	4b03      	ldr	r3, [pc, #12]	; (468 <spi_write_power_on+0x18>)
     45a:	4798      	blx	r3
}
     45c:	bd10      	pop	{r4, pc}
     45e:	46c0      	nop			; (mov r8, r8)
     460:	20000094 	.word	0x20000094
     464:	20000044 	.word	0x20000044
     468:	0000176d 	.word	0x0000176d

0000046c <spi_write_clear_int>:

void spi_write_clear_int()
{
     46c:	b510      	push	{r4, lr}
	spi_transceive ( wr_buffer_clr_init , rd_buffer , BUF_LENGTH);
     46e:	2202      	movs	r2, #2
     470:	4902      	ldr	r1, [pc, #8]	; (47c <spi_write_clear_int+0x10>)
     472:	4803      	ldr	r0, [pc, #12]	; (480 <spi_write_clear_int+0x14>)
     474:	4b03      	ldr	r3, [pc, #12]	; (484 <spi_write_clear_int+0x18>)
     476:	4798      	blx	r3
}
     478:	bd10      	pop	{r4, pc}
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	20000094 	.word	0x20000094
     480:	2000000c 	.word	0x2000000c
     484:	0000176d 	.word	0x0000176d

00000488 <spi_write_apc>:

void spi_write_apc(uint8_t* write_apc)
{
     488:	b510      	push	{r4, lr}
	spi_transceive( write_apc , rd_buffer_3 ,BUF_LENGTH_3);
     48a:	2203      	movs	r2, #3
     48c:	4901      	ldr	r1, [pc, #4]	; (494 <spi_write_apc+0xc>)
     48e:	4b02      	ldr	r3, [pc, #8]	; (498 <spi_write_apc+0x10>)
     490:	4798      	blx	r3
}
     492:	bd10      	pop	{r4, pc}
     494:	20000098 	.word	0x20000098
     498:	0000176d 	.word	0x0000176d

0000049c <spi_write_stop>:

void spi_write_stop()
{
     49c:	b510      	push	{r4, lr}
	spi_transceive(wr_buffer_stop,rd_buffer, BUF_LENGTH);
     49e:	2202      	movs	r2, #2
     4a0:	4902      	ldr	r1, [pc, #8]	; (4ac <spi_write_stop+0x10>)
     4a2:	4803      	ldr	r0, [pc, #12]	; (4b0 <spi_write_stop+0x14>)
     4a4:	4b03      	ldr	r3, [pc, #12]	; (4b4 <spi_write_stop+0x18>)
     4a6:	4798      	blx	r3
}
     4a8:	bd10      	pop	{r4, pc}
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	20000094 	.word	0x20000094
     4b0:	20000068 	.word	0x20000068
     4b4:	0000176d 	.word	0x0000176d

000004b8 <delay_spi>:

void delay_spi()
{
     4b8:	b510      	push	{r4, lr}
	delay_cycles_ms(100); //Datasheet specific
     4ba:	2064      	movs	r0, #100	; 0x64
     4bc:	4b01      	ldr	r3, [pc, #4]	; (4c4 <delay_spi+0xc>)
     4be:	4798      	blx	r3
}
     4c0:	bd10      	pop	{r4, pc}
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	000008d1 	.word	0x000008d1

000004c8 <init_burp_box>:

void init_burp_box()
{
     4c8:	b510      	push	{r4, lr}
	//Reset the device 
	spi_write_reset();
     4ca:	4b09      	ldr	r3, [pc, #36]	; (4f0 <init_burp_box+0x28>)
     4cc:	4798      	blx	r3
	delay_spi();
     4ce:	4c09      	ldr	r4, [pc, #36]	; (4f4 <init_burp_box+0x2c>)
     4d0:	47a0      	blx	r4
	
	//Power on the device
	spi_write_power_on();
     4d2:	4b09      	ldr	r3, [pc, #36]	; (4f8 <init_burp_box+0x30>)
     4d4:	4798      	blx	r3
	delay_spi();
     4d6:	47a0      	blx	r4
	
	//Cleat Interrupt
	spi_write_clear_int();
     4d8:	4b08      	ldr	r3, [pc, #32]	; (4fc <init_burp_box+0x34>)
     4da:	4798      	blx	r3
	delay_spi();
     4dc:	47a0      	blx	r4
	
	//Choose input
	spi_write_apc(wr_apc_2_ideal); //Volume init -- High 
     4de:	4808      	ldr	r0, [pc, #32]	; (500 <init_burp_box+0x38>)
     4e0:	4b08      	ldr	r3, [pc, #32]	; (504 <init_burp_box+0x3c>)
     4e2:	4798      	blx	r3
	delay_spi();	
     4e4:	47a0      	blx	r4
	
	//trackpointer -- Initialized to one
	track_pointer = 1;
     4e6:	2201      	movs	r2, #1
     4e8:	4b07      	ldr	r3, [pc, #28]	; (508 <init_burp_box+0x40>)
     4ea:	701a      	strb	r2, [r3, #0]
}
     4ec:	bd10      	pop	{r4, pc}
     4ee:	46c0      	nop			; (mov r8, r8)
     4f0:	00000435 	.word	0x00000435
     4f4:	000004b9 	.word	0x000004b9
     4f8:	00000451 	.word	0x00000451
     4fc:	0000046d 	.word	0x0000046d
     500:	20000000 	.word	0x20000000
     504:	00000489 	.word	0x00000489
     508:	200000d6 	.word	0x200000d6

0000050c <wait_burp_box>:
	}
	spi_write_stop();
}

void wait_burp_box(uint8_t operation)
{
     50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     50e:	0006      	movs	r6, r0
	bool burp_box_busy = true;
	interrupt_occured = false;
     510:	4b17      	ldr	r3, [pc, #92]	; (570 <wait_burp_box+0x64>)
     512:	2200      	movs	r2, #0
     514:	701a      	strb	r2, [r3, #0]
	while(burp_box_busy == true /*&& time_out != true*/ && interrupt_occured !=true )
     516:	781b      	ldrb	r3, [r3, #0]
     518:	2b00      	cmp	r3, #0
     51a:	d126      	bne.n	56a <wait_burp_box+0x5e>
	{
		delay_cycles_ms(200);
     51c:	4f15      	ldr	r7, [pc, #84]	; (574 <wait_burp_box+0x68>)
		spi_transceive( wr_buffer_status_pointer , rd_buffer_3 ,BUF_LENGTH_3);
     51e:	4d16      	ldr	r5, [pc, #88]	; (578 <wait_burp_box+0x6c>)
     520:	4c16      	ldr	r4, [pc, #88]	; (57c <wait_burp_box+0x70>)
     522:	e009      	b.n	538 <wait_burp_box+0x2c>
		switch(operation)
		{
			case RECORD_OPERATION:
				burp_box_busy = rd_buffer_3[2] & RECORD_READY_MASK;
     524:	4b14      	ldr	r3, [pc, #80]	; (578 <wait_burp_box+0x6c>)
     526:	789b      	ldrb	r3, [r3, #2]
     528:	071b      	lsls	r3, r3, #28
     52a:	0fdb      	lsrs	r3, r3, #31
	while(burp_box_busy == true /*&& time_out != true*/ && interrupt_occured !=true )
     52c:	2b00      	cmp	r3, #0
     52e:	d01c      	beq.n	56a <wait_burp_box+0x5e>
     530:	4b0f      	ldr	r3, [pc, #60]	; (570 <wait_burp_box+0x64>)
     532:	781b      	ldrb	r3, [r3, #0]
     534:	2b00      	cmp	r3, #0
     536:	d118      	bne.n	56a <wait_burp_box+0x5e>
		delay_cycles_ms(200);
     538:	20c8      	movs	r0, #200	; 0xc8
     53a:	47b8      	blx	r7
		spi_transceive( wr_buffer_status_pointer , rd_buffer_3 ,BUF_LENGTH_3);
     53c:	2203      	movs	r2, #3
     53e:	0029      	movs	r1, r5
     540:	0020      	movs	r0, r4
     542:	4b0f      	ldr	r3, [pc, #60]	; (580 <wait_burp_box+0x74>)
     544:	4798      	blx	r3
		switch(operation)
     546:	2e02      	cmp	r6, #2
     548:	d005      	beq.n	556 <wait_burp_box+0x4a>
     54a:	2e03      	cmp	r6, #3
     54c:	d008      	beq.n	560 <wait_burp_box+0x54>
     54e:	2301      	movs	r3, #1
     550:	2e01      	cmp	r6, #1
     552:	d1eb      	bne.n	52c <wait_burp_box+0x20>
     554:	e7e6      	b.n	524 <wait_burp_box+0x18>
				break;
				
			case PLAY_OPERATION:
				burp_box_busy = rd_buffer_3[2] & PLAY_READY_MASK;
     556:	4b08      	ldr	r3, [pc, #32]	; (578 <wait_burp_box+0x6c>)
     558:	789b      	ldrb	r3, [r3, #2]
     55a:	075b      	lsls	r3, r3, #29
     55c:	0fdb      	lsrs	r3, r3, #31
				break;
     55e:	e7e5      	b.n	52c <wait_burp_box+0x20>
			case ERASE_OPERATION:
				burp_box_busy = rd_buffer_3[2] & ERASE_READY_MASK;
     560:	4b05      	ldr	r3, [pc, #20]	; (578 <wait_burp_box+0x6c>)
     562:	789b      	ldrb	r3, [r3, #2]
     564:	079b      	lsls	r3, r3, #30
     566:	0fdb      	lsrs	r3, r3, #31
				break;
     568:	e7e0      	b.n	52c <wait_burp_box+0x20>
			default:
			    break;
		}
		
	}
	spi_write_stop();
     56a:	4b06      	ldr	r3, [pc, #24]	; (584 <wait_burp_box+0x78>)
     56c:	4798      	blx	r3
}
     56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     570:	200000d5 	.word	0x200000d5
     574:	000008d1 	.word	0x000008d1
     578:	20000098 	.word	0x20000098
     57c:	20000064 	.word	0x20000064
     580:	0000176d 	.word	0x0000176d
     584:	0000049d 	.word	0x0000049d

00000588 <burp_box_record>:

void burp_box_record(uint8_t track_no)
{
     588:	b510      	push	{r4, lr}
	
	switch (track_no)
     58a:	2802      	cmp	r0, #2
     58c:	d00d      	beq.n	5aa <burp_box_record+0x22>
     58e:	2803      	cmp	r0, #3
     590:	d011      	beq.n	5b6 <burp_box_record+0x2e>
     592:	2801      	cmp	r0, #1
     594:	d003      	beq.n	59e <burp_box_record+0x16>
			break;
	}
	//Wait till the operation is complete
	
	//wait_burp_box_2();
	wait_burp_box(RECORD_OPERATION);
     596:	2001      	movs	r0, #1
     598:	4b0a      	ldr	r3, [pc, #40]	; (5c4 <burp_box_record+0x3c>)
     59a:	4798      	blx	r3
	
}
     59c:	bd10      	pop	{r4, pc}
			spi_transceive( wr_buffer_record_set_1 , rd_buffer_6 ,BUF_LENGTH_6);
     59e:	2206      	movs	r2, #6
     5a0:	4909      	ldr	r1, [pc, #36]	; (5c8 <burp_box_record+0x40>)
     5a2:	480a      	ldr	r0, [pc, #40]	; (5cc <burp_box_record+0x44>)
     5a4:	4b0a      	ldr	r3, [pc, #40]	; (5d0 <burp_box_record+0x48>)
     5a6:	4798      	blx	r3
			break;
     5a8:	e7f5      	b.n	596 <burp_box_record+0xe>
			spi_transceive( wr_buffer_record_set_2 , rd_buffer_6 ,BUF_LENGTH_6);
     5aa:	2206      	movs	r2, #6
     5ac:	4906      	ldr	r1, [pc, #24]	; (5c8 <burp_box_record+0x40>)
     5ae:	4809      	ldr	r0, [pc, #36]	; (5d4 <burp_box_record+0x4c>)
     5b0:	4b07      	ldr	r3, [pc, #28]	; (5d0 <burp_box_record+0x48>)
     5b2:	4798      	blx	r3
			break;
     5b4:	e7ef      	b.n	596 <burp_box_record+0xe>
			spi_transceive( wr_buffer_record_set_3 , rd_buffer_6 ,BUF_LENGTH_6);
     5b6:	2206      	movs	r2, #6
     5b8:	4903      	ldr	r1, [pc, #12]	; (5c8 <burp_box_record+0x40>)
     5ba:	4807      	ldr	r0, [pc, #28]	; (5d8 <burp_box_record+0x50>)
     5bc:	4b04      	ldr	r3, [pc, #16]	; (5d0 <burp_box_record+0x48>)
     5be:	4798      	blx	r3
			break;
     5c0:	e7e9      	b.n	596 <burp_box_record+0xe>
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	0000050d 	.word	0x0000050d
     5c8:	2000009c 	.word	0x2000009c
     5cc:	20000048 	.word	0x20000048
     5d0:	0000176d 	.word	0x0000176d
     5d4:	20000050 	.word	0x20000050
     5d8:	20000058 	.word	0x20000058

000005dc <burp_box_erase>:

void burp_box_erase(uint8_t track_no)
{
     5dc:	b510      	push	{r4, lr}
	switch(track_no)
     5de:	2802      	cmp	r0, #2
     5e0:	d00d      	beq.n	5fe <burp_box_erase+0x22>
     5e2:	2803      	cmp	r0, #3
     5e4:	d011      	beq.n	60a <burp_box_erase+0x2e>
     5e6:	2801      	cmp	r0, #1
     5e8:	d003      	beq.n	5f2 <burp_box_erase+0x16>
			 
		default:
			 break;
	}
	//wait_burp_box_2();
	wait_burp_box(ERASE_OPERATION);
     5ea:	2003      	movs	r0, #3
     5ec:	4b0a      	ldr	r3, [pc, #40]	; (618 <burp_box_erase+0x3c>)
     5ee:	4798      	blx	r3
	//delay_cycles_ms(300);
}
     5f0:	bd10      	pop	{r4, pc}
		     spi_transceive( wr_buffer_erase_set_1 , rd_buffer_6 ,BUF_LENGTH_6);
     5f2:	2206      	movs	r2, #6
     5f4:	4909      	ldr	r1, [pc, #36]	; (61c <burp_box_erase+0x40>)
     5f6:	480a      	ldr	r0, [pc, #40]	; (620 <burp_box_erase+0x44>)
     5f8:	4b0a      	ldr	r3, [pc, #40]	; (624 <burp_box_erase+0x48>)
     5fa:	4798      	blx	r3
			 break;
     5fc:	e7f5      	b.n	5ea <burp_box_erase+0xe>
			 spi_transceive( wr_buffer_erase_set_2 , rd_buffer_6 ,BUF_LENGTH_6);
     5fe:	2206      	movs	r2, #6
     600:	4906      	ldr	r1, [pc, #24]	; (61c <burp_box_erase+0x40>)
     602:	4809      	ldr	r0, [pc, #36]	; (628 <burp_box_erase+0x4c>)
     604:	4b07      	ldr	r3, [pc, #28]	; (624 <burp_box_erase+0x48>)
     606:	4798      	blx	r3
			 break;
     608:	e7ef      	b.n	5ea <burp_box_erase+0xe>
			spi_transceive( wr_buffer_erase_set_3 , rd_buffer_6 ,BUF_LENGTH_6);
     60a:	2206      	movs	r2, #6
     60c:	4903      	ldr	r1, [pc, #12]	; (61c <burp_box_erase+0x40>)
     60e:	4807      	ldr	r0, [pc, #28]	; (62c <burp_box_erase+0x50>)
     610:	4b04      	ldr	r3, [pc, #16]	; (624 <burp_box_erase+0x48>)
     612:	4798      	blx	r3
			 break;
     614:	e7e9      	b.n	5ea <burp_box_erase+0xe>
     616:	46c0      	nop			; (mov r8, r8)
     618:	0000050d 	.word	0x0000050d
     61c:	2000009c 	.word	0x2000009c
     620:	20000010 	.word	0x20000010
     624:	0000176d 	.word	0x0000176d
     628:	20000018 	.word	0x20000018
     62c:	20000020 	.word	0x20000020

00000630 <burp_box_play>:

void burp_box_play(uint8_t track_no)
{
     630:	b510      	push	{r4, lr}
     632:	0004      	movs	r4, r0
	//time_out = false;
	//Clear interrupts
	spi_write_clear_int();
     634:	4b0e      	ldr	r3, [pc, #56]	; (670 <burp_box_play+0x40>)
     636:	4798      	blx	r3
	switch (track_no)
     638:	2c02      	cmp	r4, #2
     63a:	d00d      	beq.n	658 <burp_box_play+0x28>
     63c:	2c03      	cmp	r4, #3
     63e:	d011      	beq.n	664 <burp_box_play+0x34>
     640:	2c01      	cmp	r4, #1
     642:	d003      	beq.n	64c <burp_box_play+0x1c>
			break;
	}
	
	//Wait till the operation is complete
	//LED_on(PLAY_LED);
	wait_burp_box(PLAY_OPERATION);
     644:	2002      	movs	r0, #2
     646:	4b0b      	ldr	r3, [pc, #44]	; (674 <burp_box_play+0x44>)
     648:	4798      	blx	r3
}
     64a:	bd10      	pop	{r4, pc}
			spi_transceive( wr_buffer_play_set_1 , rd_buffer_6 ,BUF_LENGTH_6);
     64c:	2206      	movs	r2, #6
     64e:	490a      	ldr	r1, [pc, #40]	; (678 <burp_box_play+0x48>)
     650:	480a      	ldr	r0, [pc, #40]	; (67c <burp_box_play+0x4c>)
     652:	4b0b      	ldr	r3, [pc, #44]	; (680 <burp_box_play+0x50>)
     654:	4798      	blx	r3
			break;
     656:	e7f5      	b.n	644 <burp_box_play+0x14>
			spi_transceive( wr_buffer_play_set_2 , rd_buffer_6 ,BUF_LENGTH_6);
     658:	2206      	movs	r2, #6
     65a:	4907      	ldr	r1, [pc, #28]	; (678 <burp_box_play+0x48>)
     65c:	4809      	ldr	r0, [pc, #36]	; (684 <burp_box_play+0x54>)
     65e:	4b08      	ldr	r3, [pc, #32]	; (680 <burp_box_play+0x50>)
     660:	4798      	blx	r3
			break;
     662:	e7ef      	b.n	644 <burp_box_play+0x14>
			spi_transceive( wr_buffer_play_set_3 , rd_buffer_6 ,BUF_LENGTH_6);
     664:	2206      	movs	r2, #6
     666:	4904      	ldr	r1, [pc, #16]	; (678 <burp_box_play+0x48>)
     668:	4807      	ldr	r0, [pc, #28]	; (688 <burp_box_play+0x58>)
     66a:	4b05      	ldr	r3, [pc, #20]	; (680 <burp_box_play+0x50>)
     66c:	4798      	blx	r3
			break;
     66e:	e7e9      	b.n	644 <burp_box_play+0x14>
     670:	0000046d 	.word	0x0000046d
     674:	0000050d 	.word	0x0000050d
     678:	2000009c 	.word	0x2000009c
     67c:	2000002c 	.word	0x2000002c
     680:	0000176d 	.word	0x0000176d
     684:	20000034 	.word	0x20000034
     688:	2000003c 	.word	0x2000003c

0000068c <global_erase_LED_flashing>:




void global_erase_LED_flashing()
{
     68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     68e:	46ce      	mov	lr, r9
     690:	4647      	mov	r7, r8
     692:	b580      	push	{r7, lr}
     694:	2303      	movs	r3, #3
     696:	4699      	mov	r9, r3
	
	for(j=0;j<LOOP_2;j++)
	{
		for(i=LOOP_1_START;i<LOOP_1_END;i = i+2)
		{
			LED_off(PLAY_LED);
     698:	4b12      	ldr	r3, [pc, #72]	; (6e4 <global_erase_LED_flashing+0x58>)
     69a:	4698      	mov	r8, r3
			LED_off(RECORD_LED);
			delay_cycles_us(i);
     69c:	4f12      	ldr	r7, [pc, #72]	; (6e8 <global_erase_LED_flashing+0x5c>)
			LED_on(RECORD_LED);
     69e:	4e13      	ldr	r6, [pc, #76]	; (6ec <global_erase_LED_flashing+0x60>)
{
     6a0:	24c8      	movs	r4, #200	; 0xc8
			LED_off(PLAY_LED);
     6a2:	2008      	movs	r0, #8
     6a4:	47c0      	blx	r8
			LED_off(RECORD_LED);
     6a6:	2005      	movs	r0, #5
     6a8:	47c0      	blx	r8
			delay_cycles_us(i);
     6aa:	0020      	movs	r0, r4
     6ac:	47b8      	blx	r7
			LED_on(RECORD_LED);
     6ae:	2005      	movs	r0, #5
     6b0:	47b0      	blx	r6
			LED_on(PLAY_LED);
     6b2:	2008      	movs	r0, #8
     6b4:	47b0      	blx	r6
			delay_cycles_us(LOOP_1_END-i);
     6b6:	25c8      	movs	r5, #200	; 0xc8
     6b8:	00ad      	lsls	r5, r5, #2
     6ba:	1b28      	subs	r0, r5, r4
     6bc:	47b8      	blx	r7
		for(i=LOOP_1_START;i<LOOP_1_END;i = i+2)
     6be:	3402      	adds	r4, #2
     6c0:	42ac      	cmp	r4, r5
     6c2:	d1ee      	bne.n	6a2 <global_erase_LED_flashing+0x16>
     6c4:	2301      	movs	r3, #1
     6c6:	425b      	negs	r3, r3
     6c8:	469c      	mov	ip, r3
     6ca:	44e1      	add	r9, ip
	for(j=0;j<LOOP_2;j++)
     6cc:	464b      	mov	r3, r9
     6ce:	2b00      	cmp	r3, #0
     6d0:	d1e6      	bne.n	6a0 <global_erase_LED_flashing+0x14>
		}
	}
	LED_off(PLAY_LED);
     6d2:	2008      	movs	r0, #8
     6d4:	4c03      	ldr	r4, [pc, #12]	; (6e4 <global_erase_LED_flashing+0x58>)
     6d6:	47a0      	blx	r4
	LED_off(RECORD_LED);
     6d8:	2005      	movs	r0, #5
     6da:	47a0      	blx	r4
}
     6dc:	bc0c      	pop	{r2, r3}
     6de:	4690      	mov	r8, r2
     6e0:	4699      	mov	r9, r3
     6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6e4:	00001589 	.word	0x00001589
     6e8:	000008a5 	.word	0x000008a5
     6ec:	00001565 	.word	0x00001565

000006f0 <burp_box_global_erase>:
	change_volume(volume);
	burp_box_play(track_no);
}

void burp_box_global_erase()
{
     6f0:	b570      	push	{r4, r5, r6, lr}
	bool burp_box_busy = true;
	LED_on(PLAY_LED);
     6f2:	2008      	movs	r0, #8
     6f4:	4c0e      	ldr	r4, [pc, #56]	; (730 <burp_box_global_erase+0x40>)
     6f6:	47a0      	blx	r4
	LED_on(RECORD_LED);
     6f8:	2005      	movs	r0, #5
     6fa:	47a0      	blx	r4
	
	spi_write_global_erase();
     6fc:	4b0d      	ldr	r3, [pc, #52]	; (734 <burp_box_global_erase+0x44>)
     6fe:	4798      	blx	r3
	
	while(burp_box_busy == true)
	{
		delay_cycles_ms(200);
     700:	4e0d      	ldr	r6, [pc, #52]	; (738 <burp_box_global_erase+0x48>)
		spi_transceive( wr_buffer_status_pointer , rd_buffer_3 ,BUF_LENGTH_3);
     702:	4c0e      	ldr	r4, [pc, #56]	; (73c <burp_box_global_erase+0x4c>)
     704:	4d0e      	ldr	r5, [pc, #56]	; (740 <burp_box_global_erase+0x50>)
		delay_cycles_ms(200);
     706:	20c8      	movs	r0, #200	; 0xc8
     708:	47b0      	blx	r6
		spi_transceive( wr_buffer_status_pointer , rd_buffer_3 ,BUF_LENGTH_3);
     70a:	2203      	movs	r2, #3
     70c:	0021      	movs	r1, r4
     70e:	0028      	movs	r0, r5
     710:	4b0c      	ldr	r3, [pc, #48]	; (744 <burp_box_global_erase+0x54>)
     712:	4798      	blx	r3
	while(burp_box_busy == true)
     714:	78a3      	ldrb	r3, [r4, #2]
     716:	079b      	lsls	r3, r3, #30
     718:	d4f5      	bmi.n	706 <burp_box_global_erase+0x16>
		burp_box_busy = rd_buffer_3[2] & ERASE_READY_MASK;
	}
	
	spi_write_stop();
     71a:	4b0b      	ldr	r3, [pc, #44]	; (748 <burp_box_global_erase+0x58>)
     71c:	4798      	blx	r3
	
	LED_off(PLAY_LED);
     71e:	2008      	movs	r0, #8
     720:	4c0a      	ldr	r4, [pc, #40]	; (74c <burp_box_global_erase+0x5c>)
     722:	47a0      	blx	r4
	LED_off(RECORD_LED);
     724:	2005      	movs	r0, #5
     726:	47a0      	blx	r4
	//2 Seconds
	global_erase_LED_flashing();
     728:	4b09      	ldr	r3, [pc, #36]	; (750 <burp_box_global_erase+0x60>)
     72a:	4798      	blx	r3
}
     72c:	bd70      	pop	{r4, r5, r6, pc}
     72e:	46c0      	nop			; (mov r8, r8)
     730:	00001565 	.word	0x00001565
     734:	00000419 	.word	0x00000419
     738:	000008d1 	.word	0x000008d1
     73c:	20000098 	.word	0x20000098
     740:	20000064 	.word	0x20000064
     744:	0000176d 	.word	0x0000176d
     748:	0000049d 	.word	0x0000049d
     74c:	00001589 	.word	0x00001589
     750:	0000068d 	.word	0x0000068d

00000754 <spi_main_loop_1>:

void spi_main_loop_1(uint16_t input_buttons_servo)
{
     754:	b570      	push	{r4, r5, r6, lr}
	switch (input_buttons_servo)
     756:	2802      	cmp	r0, #2
     758:	d048      	beq.n	7ec <spi_main_loop_1+0x98>
     75a:	d915      	bls.n	788 <spi_main_loop_1+0x34>
     75c:	2803      	cmp	r0, #3
     75e:	d02d      	beq.n	7bc <spi_main_loop_1+0x68>
     760:	2804      	cmp	r0, #4
     762:	d142      	bne.n	7ea <spi_main_loop_1+0x96>
			}
			LED_track(track_pointer-1);
			interrupt_occured = false;
			break;
		case N_P_PRESSED:
			spi_write_stop();
     764:	4b2f      	ldr	r3, [pc, #188]	; (824 <spi_main_loop_1+0xd0>)
     766:	4798      	blx	r3
			track_pointer = TRACK_NO_1;
     768:	4c2f      	ldr	r4, [pc, #188]	; (828 <spi_main_loop_1+0xd4>)
     76a:	2301      	movs	r3, #1
     76c:	7023      	strb	r3, [r4, #0]
			burp_box_global_erase();
     76e:	4b2f      	ldr	r3, [pc, #188]	; (82c <spi_main_loop_1+0xd8>)
     770:	4798      	blx	r3
			global_erase_LED_flashing();
     772:	4b2f      	ldr	r3, [pc, #188]	; (830 <spi_main_loop_1+0xdc>)
     774:	4798      	blx	r3
			LED_track(track_pointer-1);
     776:	7820      	ldrb	r0, [r4, #0]
     778:	3801      	subs	r0, #1
     77a:	b2c0      	uxtb	r0, r0
     77c:	4b2d      	ldr	r3, [pc, #180]	; (834 <spi_main_loop_1+0xe0>)
     77e:	4798      	blx	r3
			interrupt_occured = false;
     780:	2200      	movs	r2, #0
     782:	4b2d      	ldr	r3, [pc, #180]	; (838 <spi_main_loop_1+0xe4>)
     784:	701a      	strb	r2, [r3, #0]
		default:
			break;
	}
     786:	e030      	b.n	7ea <spi_main_loop_1+0x96>
	switch (input_buttons_servo)
     788:	2801      	cmp	r0, #1
     78a:	d12e      	bne.n	7ea <spi_main_loop_1+0x96>
			spi_write_stop();
     78c:	4b25      	ldr	r3, [pc, #148]	; (824 <spi_main_loop_1+0xd0>)
     78e:	4798      	blx	r3
			track_pointer++;
     790:	4a25      	ldr	r2, [pc, #148]	; (828 <spi_main_loop_1+0xd4>)
     792:	7813      	ldrb	r3, [r2, #0]
     794:	3301      	adds	r3, #1
     796:	b2db      	uxtb	r3, r3
     798:	7013      	strb	r3, [r2, #0]
			if(track_pointer > 3)
     79a:	7813      	ldrb	r3, [r2, #0]
     79c:	b2db      	uxtb	r3, r3
     79e:	2b03      	cmp	r3, #3
     7a0:	d902      	bls.n	7a8 <spi_main_loop_1+0x54>
				track_pointer = 1;
     7a2:	2201      	movs	r2, #1
     7a4:	4b20      	ldr	r3, [pc, #128]	; (828 <spi_main_loop_1+0xd4>)
     7a6:	701a      	strb	r2, [r3, #0]
			LED_track(track_pointer-1);
     7a8:	4b1f      	ldr	r3, [pc, #124]	; (828 <spi_main_loop_1+0xd4>)
     7aa:	7818      	ldrb	r0, [r3, #0]
     7ac:	3801      	subs	r0, #1
     7ae:	b2c0      	uxtb	r0, r0
     7b0:	4b20      	ldr	r3, [pc, #128]	; (834 <spi_main_loop_1+0xe0>)
     7b2:	4798      	blx	r3
			interrupt_occured = false;
     7b4:	2200      	movs	r2, #0
     7b6:	4b20      	ldr	r3, [pc, #128]	; (838 <spi_main_loop_1+0xe4>)
     7b8:	701a      	strb	r2, [r3, #0]
			break;
     7ba:	e016      	b.n	7ea <spi_main_loop_1+0x96>
			spi_write_stop();
     7bc:	4b19      	ldr	r3, [pc, #100]	; (824 <spi_main_loop_1+0xd0>)
     7be:	4798      	blx	r3
			LED_on(PLAY_LED);
     7c0:	2008      	movs	r0, #8
     7c2:	4b1e      	ldr	r3, [pc, #120]	; (83c <spi_main_loop_1+0xe8>)
     7c4:	4798      	blx	r3
			spi_write_apc(wr_apc_2_play_memory);
     7c6:	481e      	ldr	r0, [pc, #120]	; (840 <spi_main_loop_1+0xec>)
     7c8:	4c1e      	ldr	r4, [pc, #120]	; (844 <spi_main_loop_1+0xf0>)
     7ca:	47a0      	blx	r4
			spi_write_clear_int();
     7cc:	4b1e      	ldr	r3, [pc, #120]	; (848 <spi_main_loop_1+0xf4>)
     7ce:	4798      	blx	r3
			burp_box_play(track_pointer);
     7d0:	4b15      	ldr	r3, [pc, #84]	; (828 <spi_main_loop_1+0xd4>)
     7d2:	7818      	ldrb	r0, [r3, #0]
     7d4:	b2c0      	uxtb	r0, r0
     7d6:	4b1d      	ldr	r3, [pc, #116]	; (84c <spi_main_loop_1+0xf8>)
     7d8:	4798      	blx	r3
			LED_off(PLAY_LED);
     7da:	2008      	movs	r0, #8
     7dc:	4b1c      	ldr	r3, [pc, #112]	; (850 <spi_main_loop_1+0xfc>)
     7de:	4798      	blx	r3
			spi_write_apc(wr_apc_2_ideal);
     7e0:	481c      	ldr	r0, [pc, #112]	; (854 <spi_main_loop_1+0x100>)
     7e2:	47a0      	blx	r4
			interrupt_occured = false;
     7e4:	2200      	movs	r2, #0
     7e6:	4b14      	ldr	r3, [pc, #80]	; (838 <spi_main_loop_1+0xe4>)
     7e8:	701a      	strb	r2, [r3, #0]
     7ea:	bd70      	pop	{r4, r5, r6, pc}
			spi_write_stop();
     7ec:	4c0d      	ldr	r4, [pc, #52]	; (824 <spi_main_loop_1+0xd0>)
     7ee:	47a0      	blx	r4
			burp_box_erase(track_pointer);
     7f0:	4d0d      	ldr	r5, [pc, #52]	; (828 <spi_main_loop_1+0xd4>)
     7f2:	7828      	ldrb	r0, [r5, #0]
     7f4:	b2c0      	uxtb	r0, r0
     7f6:	4b18      	ldr	r3, [pc, #96]	; (858 <spi_main_loop_1+0x104>)
     7f8:	4798      	blx	r3
			spi_write_stop();
     7fa:	47a0      	blx	r4
			LED_on(RECORD_LED);
     7fc:	2005      	movs	r0, #5
     7fe:	4b0f      	ldr	r3, [pc, #60]	; (83c <spi_main_loop_1+0xe8>)
     800:	4798      	blx	r3
			spi_write_apc(wr_apc_2_record_mic);
     802:	4816      	ldr	r0, [pc, #88]	; (85c <spi_main_loop_1+0x108>)
     804:	4c0f      	ldr	r4, [pc, #60]	; (844 <spi_main_loop_1+0xf0>)
     806:	47a0      	blx	r4
			burp_box_record(track_pointer);
     808:	7828      	ldrb	r0, [r5, #0]
     80a:	b2c0      	uxtb	r0, r0
     80c:	4b14      	ldr	r3, [pc, #80]	; (860 <spi_main_loop_1+0x10c>)
     80e:	4798      	blx	r3
			LED_off(RECORD_LED);
     810:	2005      	movs	r0, #5
     812:	4b0f      	ldr	r3, [pc, #60]	; (850 <spi_main_loop_1+0xfc>)
     814:	4798      	blx	r3
			spi_write_apc(wr_apc_2_ideal);
     816:	480f      	ldr	r0, [pc, #60]	; (854 <spi_main_loop_1+0x100>)
     818:	47a0      	blx	r4
			interrupt_occured = false;
     81a:	2200      	movs	r2, #0
     81c:	4b06      	ldr	r3, [pc, #24]	; (838 <spi_main_loop_1+0xe4>)
     81e:	701a      	strb	r2, [r3, #0]
			break;
     820:	e7e3      	b.n	7ea <spi_main_loop_1+0x96>
     822:	46c0      	nop			; (mov r8, r8)
     824:	0000049d 	.word	0x0000049d
     828:	200000d6 	.word	0x200000d6
     82c:	000006f1 	.word	0x000006f1
     830:	0000068d 	.word	0x0000068d
     834:	000015ad 	.word	0x000015ad
     838:	200000d5 	.word	0x200000d5
     83c:	00001565 	.word	0x00001565
     840:	20000004 	.word	0x20000004
     844:	00000489 	.word	0x00000489
     848:	0000046d 	.word	0x0000046d
     84c:	00000631 	.word	0x00000631
     850:	00001589 	.word	0x00001589
     854:	20000000 	.word	0x20000000
     858:	000005dd 	.word	0x000005dd
     85c:	20000008 	.word	0x20000008
     860:	00000589 	.word	0x00000589

00000864 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     864:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     866:	2000      	movs	r0, #0
     868:	4b08      	ldr	r3, [pc, #32]	; (88c <delay_init+0x28>)
     86a:	4798      	blx	r3
     86c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     86e:	4c08      	ldr	r4, [pc, #32]	; (890 <delay_init+0x2c>)
     870:	21fa      	movs	r1, #250	; 0xfa
     872:	0089      	lsls	r1, r1, #2
     874:	47a0      	blx	r4
     876:	4b07      	ldr	r3, [pc, #28]	; (894 <delay_init+0x30>)
     878:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     87a:	4907      	ldr	r1, [pc, #28]	; (898 <delay_init+0x34>)
     87c:	0028      	movs	r0, r5
     87e:	47a0      	blx	r4
     880:	4b06      	ldr	r3, [pc, #24]	; (89c <delay_init+0x38>)
     882:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     884:	2205      	movs	r2, #5
     886:	4b06      	ldr	r3, [pc, #24]	; (8a0 <delay_init+0x3c>)
     888:	601a      	str	r2, [r3, #0]
}
     88a:	bd70      	pop	{r4, r5, r6, pc}
     88c:	00001b59 	.word	0x00001b59
     890:	00001ed9 	.word	0x00001ed9
     894:	2000006c 	.word	0x2000006c
     898:	000f4240 	.word	0x000f4240
     89c:	20000070 	.word	0x20000070
     8a0:	e000e010 	.word	0xe000e010

000008a4 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     8a4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     8a6:	4b08      	ldr	r3, [pc, #32]	; (8c8 <delay_cycles_us+0x24>)
     8a8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     8aa:	4a08      	ldr	r2, [pc, #32]	; (8cc <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     8ac:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8ae:	2180      	movs	r1, #128	; 0x80
     8b0:	0249      	lsls	r1, r1, #9
	while (n--) {
     8b2:	3801      	subs	r0, #1
     8b4:	d307      	bcc.n	8c6 <delay_cycles_us+0x22>
	if (n > 0) {
     8b6:	2c00      	cmp	r4, #0
     8b8:	d0fb      	beq.n	8b2 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     8ba:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     8bc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8be:	6813      	ldr	r3, [r2, #0]
     8c0:	420b      	tst	r3, r1
     8c2:	d0fc      	beq.n	8be <delay_cycles_us+0x1a>
     8c4:	e7f5      	b.n	8b2 <delay_cycles_us+0xe>
	}
}
     8c6:	bd30      	pop	{r4, r5, pc}
     8c8:	20000070 	.word	0x20000070
     8cc:	e000e010 	.word	0xe000e010

000008d0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     8d0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     8d2:	4b08      	ldr	r3, [pc, #32]	; (8f4 <delay_cycles_ms+0x24>)
     8d4:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     8d6:	4a08      	ldr	r2, [pc, #32]	; (8f8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     8d8:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8da:	2180      	movs	r1, #128	; 0x80
     8dc:	0249      	lsls	r1, r1, #9
	while (n--) {
     8de:	3801      	subs	r0, #1
     8e0:	d307      	bcc.n	8f2 <delay_cycles_ms+0x22>
	if (n > 0) {
     8e2:	2c00      	cmp	r4, #0
     8e4:	d0fb      	beq.n	8de <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     8e6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     8e8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8ea:	6813      	ldr	r3, [r2, #0]
     8ec:	420b      	tst	r3, r1
     8ee:	d0fc      	beq.n	8ea <delay_cycles_ms+0x1a>
     8f0:	e7f5      	b.n	8de <delay_cycles_ms+0xe>
	}
}
     8f2:	bd30      	pop	{r4, r5, pc}
     8f4:	2000006c 	.word	0x2000006c
     8f8:	e000e010 	.word	0xe000e010

000008fc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     8fc:	b500      	push	{lr}
     8fe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     900:	ab01      	add	r3, sp, #4
     902:	2280      	movs	r2, #128	; 0x80
     904:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     906:	780a      	ldrb	r2, [r1, #0]
     908:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     90a:	784a      	ldrb	r2, [r1, #1]
     90c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     90e:	788a      	ldrb	r2, [r1, #2]
     910:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     912:	0019      	movs	r1, r3
     914:	4b01      	ldr	r3, [pc, #4]	; (91c <port_pin_set_config+0x20>)
     916:	4798      	blx	r3
}
     918:	b003      	add	sp, #12
     91a:	bd00      	pop	{pc}
     91c:	00001d69 	.word	0x00001d69

00000920 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     920:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     922:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     924:	2340      	movs	r3, #64	; 0x40
     926:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     928:	4281      	cmp	r1, r0
     92a:	d202      	bcs.n	932 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     92c:	0018      	movs	r0, r3
     92e:	bd10      	pop	{r4, pc}
		baud_calculated++;
     930:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     932:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     934:	1c63      	adds	r3, r4, #1
     936:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     938:	4288      	cmp	r0, r1
     93a:	d9f9      	bls.n	930 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     93c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     93e:	2cff      	cmp	r4, #255	; 0xff
     940:	d8f4      	bhi.n	92c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     942:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     944:	2300      	movs	r3, #0
     946:	e7f1      	b.n	92c <_sercom_get_sync_baud_val+0xc>

00000948 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     948:	b510      	push	{r4, lr}
     94a:	b082      	sub	sp, #8
     94c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     94e:	4b0e      	ldr	r3, [pc, #56]	; (988 <sercom_set_gclk_generator+0x40>)
     950:	781b      	ldrb	r3, [r3, #0]
     952:	2b00      	cmp	r3, #0
     954:	d007      	beq.n	966 <sercom_set_gclk_generator+0x1e>
     956:	2900      	cmp	r1, #0
     958:	d105      	bne.n	966 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     95a:	4b0b      	ldr	r3, [pc, #44]	; (988 <sercom_set_gclk_generator+0x40>)
     95c:	785b      	ldrb	r3, [r3, #1]
     95e:	4283      	cmp	r3, r0
     960:	d010      	beq.n	984 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     962:	201d      	movs	r0, #29
     964:	e00c      	b.n	980 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     966:	a901      	add	r1, sp, #4
     968:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     96a:	200d      	movs	r0, #13
     96c:	4b07      	ldr	r3, [pc, #28]	; (98c <sercom_set_gclk_generator+0x44>)
     96e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     970:	200d      	movs	r0, #13
     972:	4b07      	ldr	r3, [pc, #28]	; (990 <sercom_set_gclk_generator+0x48>)
     974:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     976:	4b04      	ldr	r3, [pc, #16]	; (988 <sercom_set_gclk_generator+0x40>)
     978:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     97a:	2201      	movs	r2, #1
     97c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     97e:	2000      	movs	r0, #0
}
     980:	b002      	add	sp, #8
     982:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     984:	2000      	movs	r0, #0
     986:	e7fb      	b.n	980 <sercom_set_gclk_generator+0x38>
     988:	200000a4 	.word	0x200000a4
     98c:	00001c71 	.word	0x00001c71
     990:	00001be5 	.word	0x00001be5

00000994 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     994:	4b15      	ldr	r3, [pc, #84]	; (9ec <_sercom_get_default_pad+0x58>)
     996:	4298      	cmp	r0, r3
     998:	d004      	beq.n	9a4 <_sercom_get_default_pad+0x10>
     99a:	4b15      	ldr	r3, [pc, #84]	; (9f0 <_sercom_get_default_pad+0x5c>)
     99c:	4298      	cmp	r0, r3
     99e:	d011      	beq.n	9c4 <_sercom_get_default_pad+0x30>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     9a0:	2000      	movs	r0, #0
}
     9a2:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9a4:	2901      	cmp	r1, #1
     9a6:	d007      	beq.n	9b8 <_sercom_get_default_pad+0x24>
     9a8:	2900      	cmp	r1, #0
     9aa:	d01b      	beq.n	9e4 <_sercom_get_default_pad+0x50>
     9ac:	2902      	cmp	r1, #2
     9ae:	d005      	beq.n	9bc <_sercom_get_default_pad+0x28>
     9b0:	2903      	cmp	r1, #3
     9b2:	d005      	beq.n	9c0 <_sercom_get_default_pad+0x2c>
	return 0;
     9b4:	2000      	movs	r0, #0
     9b6:	e7f4      	b.n	9a2 <_sercom_get_default_pad+0xe>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9b8:	480e      	ldr	r0, [pc, #56]	; (9f4 <_sercom_get_default_pad+0x60>)
     9ba:	e7f2      	b.n	9a2 <_sercom_get_default_pad+0xe>
     9bc:	480e      	ldr	r0, [pc, #56]	; (9f8 <_sercom_get_default_pad+0x64>)
     9be:	e7f0      	b.n	9a2 <_sercom_get_default_pad+0xe>
     9c0:	480e      	ldr	r0, [pc, #56]	; (9fc <_sercom_get_default_pad+0x68>)
     9c2:	e7ee      	b.n	9a2 <_sercom_get_default_pad+0xe>
     9c4:	2901      	cmp	r1, #1
     9c6:	d007      	beq.n	9d8 <_sercom_get_default_pad+0x44>
     9c8:	2900      	cmp	r1, #0
     9ca:	d00d      	beq.n	9e8 <_sercom_get_default_pad+0x54>
     9cc:	2902      	cmp	r1, #2
     9ce:	d005      	beq.n	9dc <_sercom_get_default_pad+0x48>
     9d0:	2903      	cmp	r1, #3
     9d2:	d005      	beq.n	9e0 <_sercom_get_default_pad+0x4c>
	return 0;
     9d4:	2000      	movs	r0, #0
     9d6:	e7e4      	b.n	9a2 <_sercom_get_default_pad+0xe>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9d8:	4809      	ldr	r0, [pc, #36]	; (a00 <_sercom_get_default_pad+0x6c>)
     9da:	e7e2      	b.n	9a2 <_sercom_get_default_pad+0xe>
     9dc:	4809      	ldr	r0, [pc, #36]	; (a04 <_sercom_get_default_pad+0x70>)
     9de:	e7e0      	b.n	9a2 <_sercom_get_default_pad+0xe>
     9e0:	4809      	ldr	r0, [pc, #36]	; (a08 <_sercom_get_default_pad+0x74>)
     9e2:	e7de      	b.n	9a2 <_sercom_get_default_pad+0xe>
     9e4:	4809      	ldr	r0, [pc, #36]	; (a0c <_sercom_get_default_pad+0x78>)
     9e6:	e7dc      	b.n	9a2 <_sercom_get_default_pad+0xe>
     9e8:	4809      	ldr	r0, [pc, #36]	; (a10 <_sercom_get_default_pad+0x7c>)
     9ea:	e7da      	b.n	9a2 <_sercom_get_default_pad+0xe>
     9ec:	42000800 	.word	0x42000800
     9f0:	42000c00 	.word	0x42000c00
     9f4:	00050003 	.word	0x00050003
     9f8:	00080003 	.word	0x00080003
     9fc:	00090003 	.word	0x00090003
     a00:	001f0002 	.word	0x001f0002
     a04:	00180002 	.word	0x00180002
     a08:	00190002 	.word	0x00190002
     a0c:	00040003 	.word	0x00040003
     a10:	001e0002 	.word	0x001e0002

00000a14 <_sercom_get_sercom_inst_index>:
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <_sercom_get_sercom_inst_index+0x1c>)
     a16:	4298      	cmp	r0, r3
     a18:	d008      	beq.n	a2c <_sercom_get_sercom_inst_index+0x18>
     a1a:	4a06      	ldr	r2, [pc, #24]	; (a34 <_sercom_get_sercom_inst_index+0x20>)
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a1c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a1e:	4290      	cmp	r0, r2
     a20:	d001      	beq.n	a26 <_sercom_get_sercom_inst_index+0x12>
}
     a22:	0018      	movs	r0, r3
     a24:	4770      	bx	lr
     a26:	3301      	adds	r3, #1
			return i;
     a28:	b2db      	uxtb	r3, r3
     a2a:	e7fa      	b.n	a22 <_sercom_get_sercom_inst_index+0xe>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a2c:	2300      	movs	r3, #0
     a2e:	e7fb      	b.n	a28 <_sercom_get_sercom_inst_index+0x14>
     a30:	42000800 	.word	0x42000800
     a34:	42000c00 	.word	0x42000c00

00000a38 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     a38:	4770      	bx	lr
	...

00000a3c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     a3c:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     a3e:	4b09      	ldr	r3, [pc, #36]	; (a64 <_sercom_set_handler+0x28>)
     a40:	781b      	ldrb	r3, [r3, #0]
     a42:	2b00      	cmp	r3, #0
     a44:	d10a      	bne.n	a5c <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a46:	4c08      	ldr	r4, [pc, #32]	; (a68 <_sercom_set_handler+0x2c>)
     a48:	4d08      	ldr	r5, [pc, #32]	; (a6c <_sercom_set_handler+0x30>)
     a4a:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
     a4c:	4b08      	ldr	r3, [pc, #32]	; (a70 <_sercom_set_handler+0x34>)
     a4e:	2200      	movs	r2, #0
     a50:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a52:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
     a54:	605a      	str	r2, [r3, #4]
		}

		_handler_table_initialized = true;
     a56:	3201      	adds	r2, #1
     a58:	4b02      	ldr	r3, [pc, #8]	; (a64 <_sercom_set_handler+0x28>)
     a5a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     a5c:	0080      	lsls	r0, r0, #2
     a5e:	4b02      	ldr	r3, [pc, #8]	; (a68 <_sercom_set_handler+0x2c>)
     a60:	50c1      	str	r1, [r0, r3]
}
     a62:	bd30      	pop	{r4, r5, pc}
     a64:	200000a6 	.word	0x200000a6
     a68:	200000a8 	.word	0x200000a8
     a6c:	00000a39 	.word	0x00000a39
     a70:	20000174 	.word	0x20000174

00000a74 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     a74:	b510      	push	{r4, lr}
     a76:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     a78:	ac01      	add	r4, sp, #4
     a7a:	2309      	movs	r3, #9
     a7c:	7023      	strb	r3, [r4, #0]
     a7e:	3301      	adds	r3, #1
     a80:	7063      	strb	r3, [r4, #1]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     a82:	4b02      	ldr	r3, [pc, #8]	; (a8c <_sercom_get_interrupt_vector+0x18>)
     a84:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     a86:	5620      	ldrsb	r0, [r4, r0]
}
     a88:	b002      	add	sp, #8
     a8a:	bd10      	pop	{r4, pc}
     a8c:	00000a15 	.word	0x00000a15

00000a90 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     a90:	b510      	push	{r4, lr}
     a92:	4b02      	ldr	r3, [pc, #8]	; (a9c <SERCOM0_Handler+0xc>)
     a94:	681b      	ldr	r3, [r3, #0]
     a96:	2000      	movs	r0, #0
     a98:	4798      	blx	r3
     a9a:	bd10      	pop	{r4, pc}
     a9c:	200000a8 	.word	0x200000a8

00000aa0 <SERCOM1_Handler>:
     aa0:	b510      	push	{r4, lr}
     aa2:	4b02      	ldr	r3, [pc, #8]	; (aac <SERCOM1_Handler+0xc>)
     aa4:	685b      	ldr	r3, [r3, #4]
     aa6:	2001      	movs	r0, #1
     aa8:	4798      	blx	r3
     aaa:	bd10      	pop	{r4, pc}
     aac:	200000a8 	.word	0x200000a8

00000ab0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ab2:	b08b      	sub	sp, #44	; 0x2c
     ab4:	0005      	movs	r5, r0
     ab6:	000c      	movs	r4, r1
     ab8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     aba:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     abc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     abe:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     ac0:	079b      	lsls	r3, r3, #30
     ac2:	d501      	bpl.n	ac8 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     ac4:	b00b      	add	sp, #44	; 0x2c
     ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     ac8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     aca:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     acc:	07db      	lsls	r3, r3, #31
     ace:	d4f9      	bmi.n	ac4 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ad0:	0008      	movs	r0, r1
     ad2:	4b6f      	ldr	r3, [pc, #444]	; (c90 <spi_init+0x1e0>)
     ad4:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ad6:	4a6f      	ldr	r2, [pc, #444]	; (c94 <spi_init+0x1e4>)
     ad8:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     ada:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     adc:	2301      	movs	r3, #1
     ade:	40bb      	lsls	r3, r7
     ae0:	430b      	orrs	r3, r1
     ae2:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     ae4:	a909      	add	r1, sp, #36	; 0x24
     ae6:	2724      	movs	r7, #36	; 0x24
     ae8:	5df3      	ldrb	r3, [r6, r7]
     aea:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     aec:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     aee:	b2c3      	uxtb	r3, r0
     af0:	9301      	str	r3, [sp, #4]
     af2:	0018      	movs	r0, r3
     af4:	4b68      	ldr	r3, [pc, #416]	; (c98 <spi_init+0x1e8>)
     af6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     af8:	9801      	ldr	r0, [sp, #4]
     afa:	4b68      	ldr	r3, [pc, #416]	; (c9c <spi_init+0x1ec>)
     afc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     afe:	5df0      	ldrb	r0, [r6, r7]
     b00:	2100      	movs	r1, #0
     b02:	4b67      	ldr	r3, [pc, #412]	; (ca0 <spi_init+0x1f0>)
     b04:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     b06:	7833      	ldrb	r3, [r6, #0]
     b08:	2b01      	cmp	r3, #1
     b0a:	d03f      	beq.n	b8c <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
     b0c:	7833      	ldrb	r3, [r6, #0]
     b0e:	2b00      	cmp	r3, #0
     b10:	d103      	bne.n	b1a <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     b12:	6823      	ldr	r3, [r4, #0]
     b14:	2208      	movs	r2, #8
     b16:	4313      	orrs	r3, r2
     b18:	6023      	str	r3, [r4, #0]
     b1a:	002b      	movs	r3, r5
     b1c:	330c      	adds	r3, #12
     b1e:	0029      	movs	r1, r5
     b20:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
     b22:	2200      	movs	r2, #0
     b24:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     b26:	428b      	cmp	r3, r1
     b28:	d1fc      	bne.n	b24 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
     b2a:	2300      	movs	r3, #0
     b2c:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     b2e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     b30:	2400      	movs	r4, #0
     b32:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     b34:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     b36:	3336      	adds	r3, #54	; 0x36
     b38:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     b3a:	3301      	adds	r3, #1
     b3c:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     b3e:	3301      	adds	r3, #1
     b40:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     b42:	3b35      	subs	r3, #53	; 0x35
     b44:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     b46:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     b48:	6828      	ldr	r0, [r5, #0]
     b4a:	4b51      	ldr	r3, [pc, #324]	; (c90 <spi_init+0x1e0>)
     b4c:	4798      	blx	r3
     b4e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     b50:	4954      	ldr	r1, [pc, #336]	; (ca4 <spi_init+0x1f4>)
     b52:	4b55      	ldr	r3, [pc, #340]	; (ca8 <spi_init+0x1f8>)
     b54:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     b56:	00bf      	lsls	r7, r7, #2
     b58:	4b54      	ldr	r3, [pc, #336]	; (cac <spi_init+0x1fc>)
     b5a:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
     b5c:	682f      	ldr	r7, [r5, #0]
     b5e:	ab04      	add	r3, sp, #16
     b60:	2280      	movs	r2, #128	; 0x80
     b62:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b64:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     b66:	3a7f      	subs	r2, #127	; 0x7f
     b68:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     b6a:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     b6c:	7833      	ldrb	r3, [r6, #0]
     b6e:	2b00      	cmp	r3, #0
     b70:	d102      	bne.n	b78 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b72:	2200      	movs	r2, #0
     b74:	ab04      	add	r3, sp, #16
     b76:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     b78:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     b7a:	9305      	str	r3, [sp, #20]
     b7c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     b7e:	9306      	str	r3, [sp, #24]
     b80:	6b33      	ldr	r3, [r6, #48]	; 0x30
     b82:	9307      	str	r3, [sp, #28]
     b84:	6b73      	ldr	r3, [r6, #52]	; 0x34
     b86:	9308      	str	r3, [sp, #32]
     b88:	2400      	movs	r4, #0
     b8a:	e00b      	b.n	ba4 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     b8c:	6823      	ldr	r3, [r4, #0]
     b8e:	220c      	movs	r2, #12
     b90:	4313      	orrs	r3, r2
     b92:	6023      	str	r3, [r4, #0]
     b94:	e7ba      	b.n	b0c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b96:	0038      	movs	r0, r7
     b98:	4b45      	ldr	r3, [pc, #276]	; (cb0 <spi_init+0x200>)
     b9a:	4798      	blx	r3
     b9c:	e00a      	b.n	bb4 <spi_init+0x104>
     b9e:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     ba0:	2c04      	cmp	r4, #4
     ba2:	d010      	beq.n	bc6 <spi_init+0x116>
     ba4:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ba6:	00a3      	lsls	r3, r4, #2
     ba8:	aa02      	add	r2, sp, #8
     baa:	200c      	movs	r0, #12
     bac:	1812      	adds	r2, r2, r0
     bae:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
     bb0:	2800      	cmp	r0, #0
     bb2:	d0f0      	beq.n	b96 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
     bb4:	1c43      	adds	r3, r0, #1
     bb6:	d0f2      	beq.n	b9e <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     bb8:	a904      	add	r1, sp, #16
     bba:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     bbc:	0c00      	lsrs	r0, r0, #16
     bbe:	b2c0      	uxtb	r0, r0
     bc0:	4b3c      	ldr	r3, [pc, #240]	; (cb4 <spi_init+0x204>)
     bc2:	4798      	blx	r3
     bc4:	e7eb      	b.n	b9e <spi_init+0xee>
	module->mode             = config->mode;
     bc6:	7833      	ldrb	r3, [r6, #0]
     bc8:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     bca:	7c33      	ldrb	r3, [r6, #16]
     bcc:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     bce:	7cb3      	ldrb	r3, [r6, #18]
     bd0:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     bd2:	7d33      	ldrb	r3, [r6, #20]
     bd4:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
     bd6:	2200      	movs	r2, #0
     bd8:	ab02      	add	r3, sp, #8
     bda:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     bdc:	7833      	ldrb	r3, [r6, #0]
     bde:	2b01      	cmp	r3, #1
     be0:	d012      	beq.n	c08 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
     be2:	7833      	ldrb	r3, [r6, #0]
     be4:	2b00      	cmp	r3, #0
     be6:	d126      	bne.n	c36 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
     be8:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     bea:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
     bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     bee:	7ff1      	ldrb	r1, [r6, #31]
     bf0:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     bf2:	7fb4      	ldrb	r4, [r6, #30]
     bf4:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
     bf6:	4319      	orrs	r1, r3
     bf8:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     bfa:	2320      	movs	r3, #32
     bfc:	5cf3      	ldrb	r3, [r6, r3]
     bfe:	2b00      	cmp	r3, #0
     c00:	d01b      	beq.n	c3a <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     c02:	2340      	movs	r3, #64	; 0x40
     c04:	431a      	orrs	r2, r3
     c06:	e018      	b.n	c3a <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c08:	6828      	ldr	r0, [r5, #0]
     c0a:	4b21      	ldr	r3, [pc, #132]	; (c90 <spi_init+0x1e0>)
     c0c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c0e:	300e      	adds	r0, #14
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     c10:	b2c0      	uxtb	r0, r0
     c12:	4b29      	ldr	r3, [pc, #164]	; (cb8 <spi_init+0x208>)
     c14:	4798      	blx	r3
     c16:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     c18:	ab02      	add	r3, sp, #8
     c1a:	1d9a      	adds	r2, r3, #6
     c1c:	69b0      	ldr	r0, [r6, #24]
     c1e:	4b27      	ldr	r3, [pc, #156]	; (cbc <spi_init+0x20c>)
     c20:	4798      	blx	r3
     c22:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     c24:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     c26:	2b00      	cmp	r3, #0
     c28:	d000      	beq.n	c2c <spi_init+0x17c>
     c2a:	e74b      	b.n	ac4 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
     c2c:	ab02      	add	r3, sp, #8
     c2e:	3306      	adds	r3, #6
     c30:	781b      	ldrb	r3, [r3, #0]
     c32:	733b      	strb	r3, [r7, #12]
     c34:	e7d5      	b.n	be2 <spi_init+0x132>
	uint32_t ctrlb = 0;
     c36:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
     c38:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
     c3a:	6873      	ldr	r3, [r6, #4]
     c3c:	68b1      	ldr	r1, [r6, #8]
     c3e:	430b      	orrs	r3, r1
     c40:	68f1      	ldr	r1, [r6, #12]
     c42:	430b      	orrs	r3, r1
     c44:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
     c46:	7c31      	ldrb	r1, [r6, #16]
     c48:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     c4a:	7c71      	ldrb	r1, [r6, #17]
     c4c:	2900      	cmp	r1, #0
     c4e:	d103      	bne.n	c58 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c50:	491b      	ldr	r1, [pc, #108]	; (cc0 <spi_init+0x210>)
     c52:	7889      	ldrb	r1, [r1, #2]
     c54:	0789      	lsls	r1, r1, #30
     c56:	d501      	bpl.n	c5c <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     c58:	2180      	movs	r1, #128	; 0x80
     c5a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     c5c:	7cb1      	ldrb	r1, [r6, #18]
     c5e:	2900      	cmp	r1, #0
     c60:	d002      	beq.n	c68 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     c62:	2180      	movs	r1, #128	; 0x80
     c64:	0289      	lsls	r1, r1, #10
     c66:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     c68:	7cf1      	ldrb	r1, [r6, #19]
     c6a:	2900      	cmp	r1, #0
     c6c:	d002      	beq.n	c74 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     c6e:	2180      	movs	r1, #128	; 0x80
     c70:	0089      	lsls	r1, r1, #2
     c72:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     c74:	7d31      	ldrb	r1, [r6, #20]
     c76:	2900      	cmp	r1, #0
     c78:	d002      	beq.n	c80 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     c7a:	2180      	movs	r1, #128	; 0x80
     c7c:	0189      	lsls	r1, r1, #6
     c7e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
     c80:	6839      	ldr	r1, [r7, #0]
     c82:	430b      	orrs	r3, r1
     c84:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     c86:	687b      	ldr	r3, [r7, #4]
     c88:	431a      	orrs	r2, r3
     c8a:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
     c8c:	2000      	movs	r0, #0
     c8e:	e719      	b.n	ac4 <spi_init+0x14>
     c90:	00000a15 	.word	0x00000a15
     c94:	40000400 	.word	0x40000400
     c98:	00001c71 	.word	0x00001c71
     c9c:	00001be5 	.word	0x00001be5
     ca0:	00000949 	.word	0x00000949
     ca4:	00000e15 	.word	0x00000e15
     ca8:	00000a3d 	.word	0x00000a3d
     cac:	20000174 	.word	0x20000174
     cb0:	00000995 	.word	0x00000995
     cb4:	00001d69 	.word	0x00001d69
     cb8:	00001c8d 	.word	0x00001c8d
     cbc:	00000921 	.word	0x00000921
     cc0:	41002000 	.word	0x41002000

00000cc4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{ 
     cc4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     cc6:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     cc8:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
     cca:	2c01      	cmp	r4, #1
     ccc:	d001      	beq.n	cd2 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     cce:	0018      	movs	r0, r3
     cd0:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     cd2:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
     cd4:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
     cd6:	2c00      	cmp	r4, #0
     cd8:	d1f9      	bne.n	cce <spi_select_slave+0xa>
		if (select) {
     cda:	2a00      	cmp	r2, #0
     cdc:	d058      	beq.n	d90 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
     cde:	784b      	ldrb	r3, [r1, #1]
     ce0:	2b00      	cmp	r3, #0
     ce2:	d044      	beq.n	d6e <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ce4:	6803      	ldr	r3, [r0, #0]
     ce6:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     ce8:	07db      	lsls	r3, r3, #31
     cea:	d410      	bmi.n	d0e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
     cec:	780a      	ldrb	r2, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     cee:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     cf0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     cf2:	2900      	cmp	r1, #0
     cf4:	d104      	bne.n	d00 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
     cf6:	0953      	lsrs	r3, r2, #5
     cf8:	01db      	lsls	r3, r3, #7
     cfa:	492e      	ldr	r1, [pc, #184]	; (db4 <spi_select_slave+0xf0>)
     cfc:	468c      	mov	ip, r1
     cfe:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d00:	211f      	movs	r1, #31
     d02:	4011      	ands	r1, r2
     d04:	2201      	movs	r2, #1
     d06:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d08:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     d0a:	2305      	movs	r3, #5
     d0c:	e7df      	b.n	cce <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     d0e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     d10:	09d4      	lsrs	r4, r2, #7
		return NULL;
     d12:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     d14:	2c00      	cmp	r4, #0
     d16:	d104      	bne.n	d22 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
     d18:	0953      	lsrs	r3, r2, #5
     d1a:	01db      	lsls	r3, r3, #7
     d1c:	4c25      	ldr	r4, [pc, #148]	; (db4 <spi_select_slave+0xf0>)
     d1e:	46a4      	mov	ip, r4
     d20:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d22:	241f      	movs	r4, #31
     d24:	4014      	ands	r4, r2
     d26:	2201      	movs	r2, #1
     d28:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     d2a:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d2c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d2e:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     d30:	07d2      	lsls	r2, r2, #31
     d32:	d501      	bpl.n	d38 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     d34:	788a      	ldrb	r2, [r1, #2]
     d36:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     d38:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
     d3a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
     d3c:	2a00      	cmp	r2, #0
     d3e:	d1c6      	bne.n	cce <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
     d40:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
     d42:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d44:	7e13      	ldrb	r3, [r2, #24]
     d46:	420b      	tst	r3, r1
     d48:	d0fc      	beq.n	d44 <spi_select_slave+0x80>
     d4a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
     d4c:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     d4e:	0749      	lsls	r1, r1, #29
     d50:	d5bd      	bpl.n	cce <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d52:	8b53      	ldrh	r3, [r2, #26]
     d54:	075b      	lsls	r3, r3, #29
     d56:	d501      	bpl.n	d5c <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     d58:	2304      	movs	r3, #4
     d5a:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     d5c:	7983      	ldrb	r3, [r0, #6]
     d5e:	2b01      	cmp	r3, #1
     d60:	d002      	beq.n	d68 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d62:	6a93      	ldr	r3, [r2, #40]	; 0x28
     d64:	2300      	movs	r3, #0
     d66:	e7b2      	b.n	cce <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d68:	6a93      	ldr	r3, [r2, #40]	; 0x28
     d6a:	2300      	movs	r3, #0
     d6c:	e7af      	b.n	cce <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     d6e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     d70:	09d1      	lsrs	r1, r2, #7
		return NULL;
     d72:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     d74:	2900      	cmp	r1, #0
     d76:	d104      	bne.n	d82 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
     d78:	0953      	lsrs	r3, r2, #5
     d7a:	01db      	lsls	r3, r3, #7
     d7c:	490d      	ldr	r1, [pc, #52]	; (db4 <spi_select_slave+0xf0>)
     d7e:	468c      	mov	ip, r1
     d80:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d82:	211f      	movs	r1, #31
     d84:	4011      	ands	r1, r2
     d86:	2201      	movs	r2, #1
     d88:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     d8a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     d8c:	2300      	movs	r3, #0
     d8e:	e79e      	b.n	cce <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
     d90:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     d92:	09d1      	lsrs	r1, r2, #7
		return NULL;
     d94:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     d96:	2900      	cmp	r1, #0
     d98:	d104      	bne.n	da4 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
     d9a:	0953      	lsrs	r3, r2, #5
     d9c:	01db      	lsls	r3, r3, #7
     d9e:	4905      	ldr	r1, [pc, #20]	; (db4 <spi_select_slave+0xf0>)
     da0:	468c      	mov	ip, r1
     da2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     da4:	211f      	movs	r1, #31
     da6:	4011      	ands	r1, r2
     da8:	2201      	movs	r2, #1
     daa:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     dac:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     dae:	2300      	movs	r3, #0
     db0:	e78d      	b.n	cce <spi_select_slave+0xa>
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	41004400 	.word	0x41004400

00000db8 <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     db8:	1c93      	adds	r3, r2, #2
     dba:	009b      	lsls	r3, r3, #2
     dbc:	18c3      	adds	r3, r0, r3
     dbe:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
     dc0:	2136      	movs	r1, #54	; 0x36
     dc2:	2301      	movs	r3, #1
     dc4:	4093      	lsls	r3, r2
     dc6:	001a      	movs	r2, r3
     dc8:	5c43      	ldrb	r3, [r0, r1]
     dca:	4313      	orrs	r3, r2
     dcc:	5443      	strb	r3, [r0, r1]
}
     dce:	4770      	bx	lr

00000dd0 <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     dd0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     dd2:	2417      	movs	r4, #23
	if (length == 0) {
     dd4:	2b00      	cmp	r3, #0
     dd6:	d101      	bne.n	ddc <spi_transceive_buffer_job+0xc>

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);

	return STATUS_OK;
}
     dd8:	0020      	movs	r0, r4
     dda:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
     ddc:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
     dde:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
     de0:	2d00      	cmp	r5, #0
     de2:	d0f9      	beq.n	dd8 <spi_transceive_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
     de4:	341c      	adds	r4, #28
     de6:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
     de8:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
     dea:	2d05      	cmp	r5, #5
     dec:	d0f4      	beq.n	dd8 <spi_transceive_buffer_job+0x8>
	module->remaining_tx_buffer_length = length;
     dee:	8683      	strh	r3, [r0, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
     df0:	8603      	strh	r3, [r0, #48]	; 0x30
	module->rx_buffer_ptr = rx_data;
     df2:	6282      	str	r2, [r0, #40]	; 0x28
	module->tx_buffer_ptr = tx_data;
     df4:	62c1      	str	r1, [r0, #44]	; 0x2c
	module->status = STATUS_BUSY;
     df6:	2205      	movs	r2, #5
     df8:	2338      	movs	r3, #56	; 0x38
     dfa:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_BOTH;
     dfc:	3b36      	subs	r3, #54	; 0x36
     dfe:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
     e00:	6803      	ldr	r3, [r0, #0]
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
     e02:	759a      	strb	r2, [r3, #22]
	if (module->mode == SPI_MODE_SLAVE) {
     e04:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
     e06:	2400      	movs	r4, #0
	if (module->mode == SPI_MODE_SLAVE) {
     e08:	2a00      	cmp	r2, #0
     e0a:	d1e5      	bne.n	dd8 <spi_transceive_buffer_job+0x8>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     e0c:	3202      	adds	r2, #2
     e0e:	761a      	strb	r2, [r3, #24]
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     e10:	759a      	strb	r2, [r3, #22]
     e12:	e7e1      	b.n	dd8 <spi_transceive_buffer_job+0x8>

00000e14 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     e16:	0080      	lsls	r0, r0, #2
     e18:	4b85      	ldr	r3, [pc, #532]	; (1030 <_spi_interrupt_handler+0x21c>)
     e1a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     e1c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     e1e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
     e20:	5ce3      	ldrb	r3, [r4, r3]
     e22:	2236      	movs	r2, #54	; 0x36
     e24:	5ca7      	ldrb	r7, [r4, r2]
     e26:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     e28:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     e2a:	7db5      	ldrb	r5, [r6, #22]
     e2c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     e2e:	07eb      	lsls	r3, r5, #31
     e30:	d52e      	bpl.n	e90 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     e32:	7963      	ldrb	r3, [r4, #5]
     e34:	2b01      	cmp	r3, #1
     e36:	d025      	beq.n	e84 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     e38:	2b00      	cmp	r3, #0
     e3a:	d129      	bne.n	e90 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
     e3c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
     e3e:	2b00      	cmp	r3, #0
     e40:	d026      	beq.n	e90 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     e42:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     e44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     e46:	7813      	ldrb	r3, [r2, #0]
     e48:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
     e4a:	1c50      	adds	r0, r2, #1
     e4c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e4e:	79a0      	ldrb	r0, [r4, #6]
     e50:	2801      	cmp	r0, #1
     e52:	d100      	bne.n	e56 <_spi_interrupt_handler+0x42>
     e54:	e069      	b.n	f2a <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     e56:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     e58:	05db      	lsls	r3, r3, #23
     e5a:	0ddb      	lsrs	r3, r3, #23
     e5c:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
     e5e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     e60:	3b01      	subs	r3, #1
     e62:	b29b      	uxth	r3, r3
     e64:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     e66:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     e68:	b29b      	uxth	r3, r3
     e6a:	2b00      	cmp	r3, #0
     e6c:	d110      	bne.n	e90 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     e6e:	3301      	adds	r3, #1
     e70:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     e72:	7a63      	ldrb	r3, [r4, #9]
     e74:	2b01      	cmp	r3, #1
     e76:	d10b      	bne.n	e90 <_spi_interrupt_handler+0x7c>
     e78:	79e3      	ldrb	r3, [r4, #7]
     e7a:	2b00      	cmp	r3, #0
     e7c:	d108      	bne.n	e90 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     e7e:	3302      	adds	r3, #2
     e80:	75b3      	strb	r3, [r6, #22]
     e82:	e005      	b.n	e90 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
     e84:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     e86:	2b00      	cmp	r3, #0
     e88:	d03e      	beq.n	f08 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
     e8a:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
     e8c:	2b00      	cmp	r3, #0
     e8e:	d1d8      	bne.n	e42 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     e90:	076b      	lsls	r3, r5, #29
     e92:	d511      	bpl.n	eb8 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     e94:	8b73      	ldrh	r3, [r6, #26]
     e96:	075b      	lsls	r3, r3, #29
     e98:	d551      	bpl.n	f3e <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
     e9a:	7a63      	ldrb	r3, [r4, #9]
     e9c:	2b01      	cmp	r3, #1
     e9e:	d008      	beq.n	eb2 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     ea0:	221e      	movs	r2, #30
     ea2:	2338      	movs	r3, #56	; 0x38
     ea4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     ea6:	3b35      	subs	r3, #53	; 0x35
     ea8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     eaa:	3302      	adds	r3, #2
     eac:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     eae:	073b      	lsls	r3, r7, #28
     eb0:	d441      	bmi.n	f36 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     eb2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     eb4:	2304      	movs	r3, #4
     eb6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     eb8:	07ab      	lsls	r3, r5, #30
     eba:	d515      	bpl.n	ee8 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     ebc:	7963      	ldrb	r3, [r4, #5]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d10e      	bne.n	ee0 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     ec2:	3307      	adds	r3, #7
     ec4:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ec6:	3b05      	subs	r3, #5
     ec8:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     eca:	3301      	adds	r3, #1
     ecc:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
     ece:	2300      	movs	r3, #0
     ed0:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     ed2:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     ed4:	3338      	adds	r3, #56	; 0x38
     ed6:	2200      	movs	r2, #0
     ed8:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
     eda:	06fb      	lsls	r3, r7, #27
     edc:	d500      	bpl.n	ee0 <_spi_interrupt_handler+0xcc>
     ede:	e07f      	b.n	fe0 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     ee0:	7963      	ldrb	r3, [r4, #5]
     ee2:	2b01      	cmp	r3, #1
     ee4:	d100      	bne.n	ee8 <_spi_interrupt_handler+0xd4>
     ee6:	e07f      	b.n	fe8 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     ee8:	072b      	lsls	r3, r5, #28
     eea:	d508      	bpl.n	efe <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
     eec:	7963      	ldrb	r3, [r4, #5]
     eee:	2b00      	cmp	r3, #0
     ef0:	d105      	bne.n	efe <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     ef2:	3308      	adds	r3, #8
     ef4:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     ef6:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     ef8:	06bb      	lsls	r3, r7, #26
     efa:	d500      	bpl.n	efe <_spi_interrupt_handler+0xea>
     efc:	e08a      	b.n	1014 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     efe:	b26d      	sxtb	r5, r5
     f00:	2d00      	cmp	r5, #0
     f02:	da00      	bge.n	f06 <_spi_interrupt_handler+0xf2>
     f04:	e08a      	b.n	101c <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
     f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
     f08:	4b4a      	ldr	r3, [pc, #296]	; (1034 <_spi_interrupt_handler+0x220>)
     f0a:	881b      	ldrh	r3, [r3, #0]
     f0c:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     f0e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     f10:	3b01      	subs	r3, #1
     f12:	b29b      	uxth	r3, r3
     f14:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
     f16:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     f18:	b29b      	uxth	r3, r3
     f1a:	2b00      	cmp	r3, #0
     f1c:	d101      	bne.n	f22 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     f1e:	3301      	adds	r3, #1
     f20:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
     f22:	7963      	ldrb	r3, [r4, #5]
		if (0
     f24:	2b01      	cmp	r3, #1
     f26:	d0b0      	beq.n	e8a <_spi_interrupt_handler+0x76>
     f28:	e786      	b.n	e38 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     f2a:	7850      	ldrb	r0, [r2, #1]
     f2c:	0200      	lsls	r0, r0, #8
     f2e:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
     f30:	3202      	adds	r2, #2
     f32:	62e2      	str	r2, [r4, #44]	; 0x2c
     f34:	e790      	b.n	e58 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     f36:	0020      	movs	r0, r4
     f38:	69a3      	ldr	r3, [r4, #24]
     f3a:	4798      	blx	r3
     f3c:	e7b9      	b.n	eb2 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
     f3e:	7a63      	ldrb	r3, [r4, #9]
     f40:	2b01      	cmp	r3, #1
     f42:	d027      	beq.n	f94 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     f44:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f48:	05db      	lsls	r3, r3, #23
     f4a:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
     f4c:	b2da      	uxtb	r2, r3
     f4e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     f50:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
     f52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     f54:	1c51      	adds	r1, r2, #1
     f56:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f58:	79a1      	ldrb	r1, [r4, #6]
     f5a:	2901      	cmp	r1, #1
     f5c:	d033      	beq.n	fc6 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
     f5e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     f60:	3b01      	subs	r3, #1
     f62:	b29b      	uxth	r3, r3
     f64:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
     f66:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     f68:	b29b      	uxth	r3, r3
     f6a:	2b00      	cmp	r3, #0
     f6c:	d1a4      	bne.n	eb8 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
     f6e:	2200      	movs	r2, #0
     f70:	3338      	adds	r3, #56	; 0x38
     f72:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     f74:	3b34      	subs	r3, #52	; 0x34
     f76:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     f78:	7a63      	ldrb	r3, [r4, #9]
     f7a:	2b02      	cmp	r3, #2
     f7c:	d029      	beq.n	fd2 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
     f7e:	7a63      	ldrb	r3, [r4, #9]
     f80:	2b00      	cmp	r3, #0
     f82:	d000      	beq.n	f86 <_spi_interrupt_handler+0x172>
     f84:	e798      	b.n	eb8 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     f86:	07bb      	lsls	r3, r7, #30
     f88:	d400      	bmi.n	f8c <_spi_interrupt_handler+0x178>
     f8a:	e795      	b.n	eb8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     f8c:	0020      	movs	r0, r4
     f8e:	6923      	ldr	r3, [r4, #16]
     f90:	4798      	blx	r3
     f92:	e791      	b.n	eb8 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     f94:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
     f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     f98:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     f9a:	3b01      	subs	r3, #1
     f9c:	b29b      	uxth	r3, r3
     f9e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
     fa0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     fa2:	b29b      	uxth	r3, r3
     fa4:	2b00      	cmp	r3, #0
     fa6:	d000      	beq.n	faa <_spi_interrupt_handler+0x196>
     fa8:	e786      	b.n	eb8 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     faa:	3304      	adds	r3, #4
     fac:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
     fae:	2200      	movs	r2, #0
     fb0:	3334      	adds	r3, #52	; 0x34
     fb2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     fb4:	3b35      	subs	r3, #53	; 0x35
     fb6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
     fb8:	07fb      	lsls	r3, r7, #31
     fba:	d400      	bmi.n	fbe <_spi_interrupt_handler+0x1aa>
     fbc:	e77c      	b.n	eb8 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     fbe:	0020      	movs	r0, r4
     fc0:	68e3      	ldr	r3, [r4, #12]
     fc2:	4798      	blx	r3
     fc4:	e778      	b.n	eb8 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
     fc6:	0a1b      	lsrs	r3, r3, #8
     fc8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
     fca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     fcc:	3301      	adds	r3, #1
     fce:	62a3      	str	r3, [r4, #40]	; 0x28
     fd0:	e7c5      	b.n	f5e <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     fd2:	077b      	lsls	r3, r7, #29
     fd4:	d400      	bmi.n	fd8 <_spi_interrupt_handler+0x1c4>
     fd6:	e76f      	b.n	eb8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     fd8:	0020      	movs	r0, r4
     fda:	6963      	ldr	r3, [r4, #20]
     fdc:	4798      	blx	r3
     fde:	e76b      	b.n	eb8 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
     fe0:	0020      	movs	r0, r4
     fe2:	69e3      	ldr	r3, [r4, #28]
     fe4:	4798      	blx	r3
     fe6:	e77b      	b.n	ee0 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     fe8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     fea:	2b01      	cmp	r3, #1
     fec:	d000      	beq.n	ff0 <_spi_interrupt_handler+0x1dc>
     fee:	e786      	b.n	efe <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     ff0:	79e3      	ldrb	r3, [r4, #7]
     ff2:	2b00      	cmp	r3, #0
     ff4:	d000      	beq.n	ff8 <_spi_interrupt_handler+0x1e4>
     ff6:	e782      	b.n	efe <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     ff8:	3302      	adds	r3, #2
     ffa:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
     ffc:	3301      	adds	r3, #1
     ffe:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1000:	2200      	movs	r2, #0
    1002:	3335      	adds	r3, #53	; 0x35
    1004:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1006:	07fb      	lsls	r3, r7, #31
    1008:	d400      	bmi.n	100c <_spi_interrupt_handler+0x1f8>
    100a:	e76d      	b.n	ee8 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    100c:	0020      	movs	r0, r4
    100e:	68e3      	ldr	r3, [r4, #12]
    1010:	4798      	blx	r3
    1012:	e769      	b.n	ee8 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1014:	0020      	movs	r0, r4
    1016:	6a23      	ldr	r3, [r4, #32]
    1018:	4798      	blx	r3
    101a:	e770      	b.n	efe <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    101c:	2380      	movs	r3, #128	; 0x80
    101e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1020:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1022:	067b      	lsls	r3, r7, #25
    1024:	d400      	bmi.n	1028 <_spi_interrupt_handler+0x214>
    1026:	e76e      	b.n	f06 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1028:	6a63      	ldr	r3, [r4, #36]	; 0x24
    102a:	0020      	movs	r0, r4
    102c:	4798      	blx	r3
}
    102e:	e76a      	b.n	f06 <_spi_interrupt_handler+0xf2>
    1030:	20000174 	.word	0x20000174
    1034:	2000017c 	.word	0x2000017c

00001038 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1038:	b5f0      	push	{r4, r5, r6, r7, lr}
    103a:	46c6      	mov	lr, r8
    103c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    103e:	0080      	lsls	r0, r0, #2
    1040:	4b0e      	ldr	r3, [pc, #56]	; (107c <_tcc_interrupt_handler+0x44>)
    1042:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1044:	683b      	ldr	r3, [r7, #0]
    1046:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    104a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    104c:	4013      	ands	r3, r2
    104e:	401e      	ands	r6, r3
    1050:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1052:	4b0b      	ldr	r3, [pc, #44]	; (1080 <_tcc_interrupt_handler+0x48>)
    1054:	4698      	mov	r8, r3
    1056:	e002      	b.n	105e <_tcc_interrupt_handler+0x26>
    1058:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    105a:	2c30      	cmp	r4, #48	; 0x30
    105c:	d00a      	beq.n	1074 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    105e:	4643      	mov	r3, r8
    1060:	58e5      	ldr	r5, [r4, r3]
    1062:	4235      	tst	r5, r6
    1064:	d0f8      	beq.n	1058 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1066:	193b      	adds	r3, r7, r4
    1068:	685b      	ldr	r3, [r3, #4]
    106a:	0038      	movs	r0, r7
    106c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    106e:	683b      	ldr	r3, [r7, #0]
    1070:	62dd      	str	r5, [r3, #44]	; 0x2c
    1072:	e7f1      	b.n	1058 <_tcc_interrupt_handler+0x20>
		}
	}
}
    1074:	bc04      	pop	{r2}
    1076:	4690      	mov	r8, r2
    1078:	bdf0      	pop	{r4, r5, r6, r7, pc}
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	20000180 	.word	0x20000180
    1080:	00002048 	.word	0x00002048

00001084 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1084:	b510      	push	{r4, lr}
    1086:	2000      	movs	r0, #0
    1088:	4b01      	ldr	r3, [pc, #4]	; (1090 <TCC0_Handler+0xc>)
    108a:	4798      	blx	r3
    108c:	bd10      	pop	{r4, pc}
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	00001039 	.word	0x00001039

00001094 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1094:	1c93      	adds	r3, r2, #2
    1096:	009b      	lsls	r3, r3, #2
    1098:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    109a:	2a02      	cmp	r2, #2
    109c:	d009      	beq.n	10b2 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    109e:	2a03      	cmp	r2, #3
    10a0:	d00c      	beq.n	10bc <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    10a2:	2301      	movs	r3, #1
    10a4:	4093      	lsls	r3, r2
    10a6:	001a      	movs	r2, r3
    10a8:	7e03      	ldrb	r3, [r0, #24]
    10aa:	4313      	orrs	r3, r2
    10ac:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    10ae:	2000      	movs	r0, #0
    10b0:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    10b2:	7e03      	ldrb	r3, [r0, #24]
    10b4:	2210      	movs	r2, #16
    10b6:	4313      	orrs	r3, r2
    10b8:	7603      	strb	r3, [r0, #24]
    10ba:	e7f8      	b.n	10ae <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    10bc:	7e03      	ldrb	r3, [r0, #24]
    10be:	2220      	movs	r2, #32
    10c0:	4313      	orrs	r3, r2
    10c2:	7603      	strb	r3, [r0, #24]
    10c4:	e7f3      	b.n	10ae <tc_register_callback+0x1a>
	...

000010c8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    10c8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    10ca:	0080      	lsls	r0, r0, #2
    10cc:	4b16      	ldr	r3, [pc, #88]	; (1128 <_tc_interrupt_handler+0x60>)
    10ce:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    10d0:	6823      	ldr	r3, [r4, #0]
    10d2:	7b9d      	ldrb	r5, [r3, #14]
    10d4:	7e22      	ldrb	r2, [r4, #24]
    10d6:	7e63      	ldrb	r3, [r4, #25]
    10d8:	4013      	ands	r3, r2
    10da:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    10dc:	07eb      	lsls	r3, r5, #31
    10de:	d406      	bmi.n	10ee <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    10e0:	07ab      	lsls	r3, r5, #30
    10e2:	d40b      	bmi.n	10fc <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    10e4:	06eb      	lsls	r3, r5, #27
    10e6:	d410      	bmi.n	110a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    10e8:	06ab      	lsls	r3, r5, #26
    10ea:	d415      	bmi.n	1118 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    10ec:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    10ee:	0020      	movs	r0, r4
    10f0:	68a3      	ldr	r3, [r4, #8]
    10f2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    10f4:	2301      	movs	r3, #1
    10f6:	6822      	ldr	r2, [r4, #0]
    10f8:	7393      	strb	r3, [r2, #14]
    10fa:	e7f1      	b.n	10e0 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    10fc:	0020      	movs	r0, r4
    10fe:	68e3      	ldr	r3, [r4, #12]
    1100:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1102:	2302      	movs	r3, #2
    1104:	6822      	ldr	r2, [r4, #0]
    1106:	7393      	strb	r3, [r2, #14]
    1108:	e7ec      	b.n	10e4 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    110a:	0020      	movs	r0, r4
    110c:	6923      	ldr	r3, [r4, #16]
    110e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1110:	2310      	movs	r3, #16
    1112:	6822      	ldr	r2, [r4, #0]
    1114:	7393      	strb	r3, [r2, #14]
    1116:	e7e7      	b.n	10e8 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1118:	0020      	movs	r0, r4
    111a:	6963      	ldr	r3, [r4, #20]
    111c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    111e:	6823      	ldr	r3, [r4, #0]
    1120:	2220      	movs	r2, #32
    1122:	739a      	strb	r2, [r3, #14]
}
    1124:	e7e2      	b.n	10ec <_tc_interrupt_handler+0x24>
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	20000184 	.word	0x20000184

0000112c <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    112c:	b510      	push	{r4, lr}
    112e:	2000      	movs	r0, #0
    1130:	4b01      	ldr	r3, [pc, #4]	; (1138 <TC1_Handler+0xc>)
    1132:	4798      	blx	r3
    1134:	bd10      	pop	{r4, pc}
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	000010c9 	.word	0x000010c9

0000113c <TC2_Handler>:
    113c:	b510      	push	{r4, lr}
    113e:	2001      	movs	r0, #1
    1140:	4b01      	ldr	r3, [pc, #4]	; (1148 <TC2_Handler+0xc>)
    1142:	4798      	blx	r3
    1144:	bd10      	pop	{r4, pc}
    1146:	46c0      	nop			; (mov r8, r8)
    1148:	000010c9 	.word	0x000010c9

0000114c <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    114c:	4b06      	ldr	r3, [pc, #24]	; (1168 <_tc_get_inst_index+0x1c>)
    114e:	4298      	cmp	r0, r3
    1150:	d008      	beq.n	1164 <_tc_get_inst_index+0x18>
    1152:	4a06      	ldr	r2, [pc, #24]	; (116c <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1154:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1156:	4290      	cmp	r0, r2
    1158:	d001      	beq.n	115e <_tc_get_inst_index+0x12>
}
    115a:	0018      	movs	r0, r3
    115c:	4770      	bx	lr
    115e:	3301      	adds	r3, #1
			return i;
    1160:	b2db      	uxtb	r3, r3
    1162:	e7fa      	b.n	115a <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1164:	2300      	movs	r3, #0
    1166:	e7fb      	b.n	1160 <_tc_get_inst_index+0x14>
    1168:	42001800 	.word	0x42001800
    116c:	42001c00 	.word	0x42001c00

00001170 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1170:	b5f0      	push	{r4, r5, r6, r7, lr}
    1172:	b085      	sub	sp, #20
    1174:	0004      	movs	r4, r0
    1176:	000d      	movs	r5, r1
    1178:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    117a:	0008      	movs	r0, r1
    117c:	4b82      	ldr	r3, [pc, #520]	; (1388 <tc_init+0x218>)
    117e:	4798      	blx	r3
    1180:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1182:	ab03      	add	r3, sp, #12
    1184:	2212      	movs	r2, #18
    1186:	701a      	strb	r2, [r3, #0]
    1188:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    118a:	ab02      	add	r3, sp, #8
    118c:	322e      	adds	r2, #46	; 0x2e
    118e:	801a      	strh	r2, [r3, #0]
    1190:	3240      	adds	r2, #64	; 0x40
    1192:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1194:	2300      	movs	r3, #0
    1196:	60a3      	str	r3, [r4, #8]
    1198:	60e3      	str	r3, [r4, #12]
    119a:	6123      	str	r3, [r4, #16]
    119c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    119e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    11a0:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    11a2:	0082      	lsls	r2, r0, #2
    11a4:	4b79      	ldr	r3, [pc, #484]	; (138c <tc_init+0x21c>)
    11a6:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    11a8:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    11aa:	78b3      	ldrb	r3, [r6, #2]
    11ac:	2b08      	cmp	r3, #8
    11ae:	d006      	beq.n	11be <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    11b0:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    11b2:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    11b4:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    11b6:	07db      	lsls	r3, r3, #31
    11b8:	d505      	bpl.n	11c6 <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    11ba:	b005      	add	sp, #20
    11bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    11be:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    11c0:	07fa      	lsls	r2, r7, #31
    11c2:	d4fa      	bmi.n	11ba <tc_init+0x4a>
    11c4:	e7f4      	b.n	11b0 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    11c6:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    11c8:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    11ca:	06db      	lsls	r3, r3, #27
    11cc:	d4f5      	bmi.n	11ba <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    11ce:	882b      	ldrh	r3, [r5, #0]
    11d0:	079b      	lsls	r3, r3, #30
    11d2:	d4f2      	bmi.n	11ba <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
    11d4:	7c33      	ldrb	r3, [r6, #16]
    11d6:	2b00      	cmp	r3, #0
    11d8:	d000      	beq.n	11dc <tc_init+0x6c>
    11da:	e07a      	b.n	12d2 <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
    11dc:	7f33      	ldrb	r3, [r6, #28]
    11de:	2b00      	cmp	r3, #0
    11e0:	d000      	beq.n	11e4 <tc_init+0x74>
    11e2:	e082      	b.n	12ea <tc_init+0x17a>
    11e4:	496a      	ldr	r1, [pc, #424]	; (1390 <tc_init+0x220>)
    11e6:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    11e8:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    11ea:	ab02      	add	r3, sp, #8
    11ec:	5ad3      	ldrh	r3, [r2, r3]
    11ee:	4303      	orrs	r3, r0
    11f0:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    11f2:	78b3      	ldrb	r3, [r6, #2]
    11f4:	2b08      	cmp	r3, #8
    11f6:	d100      	bne.n	11fa <tc_init+0x8a>
    11f8:	e087      	b.n	130a <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
    11fa:	7833      	ldrb	r3, [r6, #0]
    11fc:	466a      	mov	r2, sp
    11fe:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1200:	ab03      	add	r3, sp, #12
    1202:	5ddf      	ldrb	r7, [r3, r7]
    1204:	4669      	mov	r1, sp
    1206:	0038      	movs	r0, r7
    1208:	4b62      	ldr	r3, [pc, #392]	; (1394 <tc_init+0x224>)
    120a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    120c:	0038      	movs	r0, r7
    120e:	4b62      	ldr	r3, [pc, #392]	; (1398 <tc_init+0x228>)
    1210:	4798      	blx	r3
	ctrla_tmp =
    1212:	8931      	ldrh	r1, [r6, #8]
    1214:	88b3      	ldrh	r3, [r6, #4]
    1216:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    1218:	78b1      	ldrb	r1, [r6, #2]
    121a:	79b2      	ldrb	r2, [r6, #6]
    121c:	4311      	orrs	r1, r2
	ctrla_tmp =
    121e:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    1220:	7873      	ldrb	r3, [r6, #1]
    1222:	2b00      	cmp	r3, #0
    1224:	d002      	beq.n	122c <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1226:	2380      	movs	r3, #128	; 0x80
    1228:	011b      	lsls	r3, r3, #4
    122a:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    122c:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    122e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1230:	b25b      	sxtb	r3, r3
    1232:	2b00      	cmp	r3, #0
    1234:	dbfb      	blt.n	122e <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1236:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1238:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    123a:	1e4b      	subs	r3, r1, #1
    123c:	4199      	sbcs	r1, r3
    123e:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1240:	7bb3      	ldrb	r3, [r6, #14]
    1242:	2b00      	cmp	r3, #0
    1244:	d001      	beq.n	124a <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1246:	2301      	movs	r3, #1
    1248:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    124a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    124c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    124e:	b25b      	sxtb	r3, r3
    1250:	2b00      	cmp	r3, #0
    1252:	dbfb      	blt.n	124c <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1254:	23ff      	movs	r3, #255	; 0xff
    1256:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1258:	2900      	cmp	r1, #0
    125a:	d005      	beq.n	1268 <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    125c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    125e:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1260:	b25b      	sxtb	r3, r3
    1262:	2b00      	cmp	r3, #0
    1264:	dbfb      	blt.n	125e <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1266:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1268:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    126a:	7af3      	ldrb	r3, [r6, #11]
    126c:	2b00      	cmp	r3, #0
    126e:	d001      	beq.n	1274 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1270:	2310      	movs	r3, #16
    1272:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1274:	7b33      	ldrb	r3, [r6, #12]
    1276:	2b00      	cmp	r3, #0
    1278:	d001      	beq.n	127e <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    127a:	2320      	movs	r3, #32
    127c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    127e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1280:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1282:	b25b      	sxtb	r3, r3
    1284:	2b00      	cmp	r3, #0
    1286:	dbfb      	blt.n	1280 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1288:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    128a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    128c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    128e:	b25b      	sxtb	r3, r3
    1290:	2b00      	cmp	r3, #0
    1292:	dbfb      	blt.n	128c <tc_init+0x11c>
	switch (module_inst->counter_size) {
    1294:	7923      	ldrb	r3, [r4, #4]
    1296:	2b04      	cmp	r3, #4
    1298:	d03f      	beq.n	131a <tc_init+0x1aa>
    129a:	2b08      	cmp	r3, #8
    129c:	d05e      	beq.n	135c <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
    129e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    12a0:	2b00      	cmp	r3, #0
    12a2:	d000      	beq.n	12a6 <tc_init+0x136>
    12a4:	e789      	b.n	11ba <tc_init+0x4a>
    12a6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    12a8:	b25b      	sxtb	r3, r3
    12aa:	2b00      	cmp	r3, #0
    12ac:	dbfb      	blt.n	12a6 <tc_init+0x136>
				= config->counter_16_bit.value;
    12ae:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    12b0:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    12b2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    12b4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    12b6:	b25b      	sxtb	r3, r3
    12b8:	2b00      	cmp	r3, #0
    12ba:	dbfb      	blt.n	12b4 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
    12bc:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    12be:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    12c0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    12c2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    12c4:	b25b      	sxtb	r3, r3
    12c6:	2b00      	cmp	r3, #0
    12c8:	dbfb      	blt.n	12c2 <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
    12ca:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    12cc:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    12ce:	2000      	movs	r0, #0
    12d0:	e773      	b.n	11ba <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12d2:	a901      	add	r1, sp, #4
    12d4:	2301      	movs	r3, #1
    12d6:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    12d8:	2200      	movs	r2, #0
    12da:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    12dc:	7e32      	ldrb	r2, [r6, #24]
    12de:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    12e0:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    12e2:	7d30      	ldrb	r0, [r6, #20]
    12e4:	4b2d      	ldr	r3, [pc, #180]	; (139c <tc_init+0x22c>)
    12e6:	4798      	blx	r3
    12e8:	e778      	b.n	11dc <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12ea:	a901      	add	r1, sp, #4
    12ec:	2301      	movs	r3, #1
    12ee:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    12f0:	2200      	movs	r2, #0
    12f2:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    12f4:	3224      	adds	r2, #36	; 0x24
    12f6:	18b2      	adds	r2, r6, r2
    12f8:	7812      	ldrb	r2, [r2, #0]
    12fa:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    12fc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    12fe:	331f      	adds	r3, #31
    1300:	18f3      	adds	r3, r6, r3
    1302:	7818      	ldrb	r0, [r3, #0]
    1304:	4b25      	ldr	r3, [pc, #148]	; (139c <tc_init+0x22c>)
    1306:	4798      	blx	r3
    1308:	e76c      	b.n	11e4 <tc_init+0x74>
    130a:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    130c:	1c7a      	adds	r2, r7, #1
    130e:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1310:	ab02      	add	r3, sp, #8
    1312:	5ad3      	ldrh	r3, [r2, r3]
    1314:	4303      	orrs	r3, r0
    1316:	620b      	str	r3, [r1, #32]
    1318:	e76f      	b.n	11fa <tc_init+0x8a>
    131a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    131c:	b25b      	sxtb	r3, r3
    131e:	2b00      	cmp	r3, #0
    1320:	dbfb      	blt.n	131a <tc_init+0x1aa>
					config->counter_8_bit.value;
    1322:	2328      	movs	r3, #40	; 0x28
    1324:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1326:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1328:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    132a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    132c:	b25b      	sxtb	r3, r3
    132e:	2b00      	cmp	r3, #0
    1330:	dbfb      	blt.n	132a <tc_init+0x1ba>
					config->counter_8_bit.period;
    1332:	2329      	movs	r3, #41	; 0x29
    1334:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1336:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1338:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    133a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    133c:	b25b      	sxtb	r3, r3
    133e:	2b00      	cmp	r3, #0
    1340:	dbfb      	blt.n	133a <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
    1342:	232a      	movs	r3, #42	; 0x2a
    1344:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1346:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1348:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    134a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    134c:	b25b      	sxtb	r3, r3
    134e:	2b00      	cmp	r3, #0
    1350:	dbfb      	blt.n	134a <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
    1352:	232b      	movs	r3, #43	; 0x2b
    1354:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1356:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1358:	2000      	movs	r0, #0
    135a:	e72e      	b.n	11ba <tc_init+0x4a>
    135c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    135e:	b25b      	sxtb	r3, r3
    1360:	2b00      	cmp	r3, #0
    1362:	dbfb      	blt.n	135c <tc_init+0x1ec>
				= config->counter_32_bit.value;
    1364:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1366:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1368:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    136a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    136c:	b25b      	sxtb	r3, r3
    136e:	2b00      	cmp	r3, #0
    1370:	dbfb      	blt.n	136a <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
    1372:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1374:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1376:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1378:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    137a:	b25b      	sxtb	r3, r3
    137c:	2b00      	cmp	r3, #0
    137e:	dbfb      	blt.n	1378 <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
    1380:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1382:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1384:	2000      	movs	r0, #0
    1386:	e718      	b.n	11ba <tc_init+0x4a>
    1388:	0000114d 	.word	0x0000114d
    138c:	20000184 	.word	0x20000184
    1390:	40000400 	.word	0x40000400
    1394:	00001c71 	.word	0x00001c71
    1398:	00001be5 	.word	0x00001be5
    139c:	00001d69 	.word	0x00001d69

000013a0 <tc_callback_track_led_control>:

//Track LED control
void tc_callback_track_led_control()
{
	
	if(counter_timer == TIMER_MULTIPLIER_10)
    13a0:	4b25      	ldr	r3, [pc, #148]	; (1438 <tc_callback_track_led_control+0x98>)
    13a2:	781a      	ldrb	r2, [r3, #0]
    13a4:	2a46      	cmp	r2, #70	; 0x46
    13a6:	d00c      	beq.n	13c2 <tc_callback_track_led_control+0x22>
	{
		counter_timer = 0;
	}
	
	switch (track_led_mode)
    13a8:	4b24      	ldr	r3, [pc, #144]	; (143c <tc_callback_track_led_control+0x9c>)
    13aa:	781b      	ldrb	r3, [r3, #0]
    13ac:	2b01      	cmp	r3, #1
    13ae:	d022      	beq.n	13f6 <tc_callback_track_led_control+0x56>
    13b0:	2b00      	cmp	r3, #0
    13b2:	d015      	beq.n	13e0 <tc_callback_track_led_control+0x40>
    13b4:	2b02      	cmp	r3, #2
    13b6:	d02b      	beq.n	1410 <tc_callback_track_led_control+0x70>
				{
					port_pin_toggle_output_level(TRACK_LED);
				}
				break;
		default :
				if((counter_timer == TIMER_MULTIPLIER_0) || (counter_timer == TIMER_MULTIPLIER_1))
    13b8:	2a00      	cmp	r2, #0
    13ba:	d00c      	beq.n	13d6 <tc_callback_track_led_control+0x36>
    13bc:	2a07      	cmp	r2, #7
    13be:	d133      	bne.n	1428 <tc_callback_track_led_control+0x88>
    13c0:	e009      	b.n	13d6 <tc_callback_track_led_control+0x36>
		counter_timer = 0;
    13c2:	2200      	movs	r2, #0
    13c4:	701a      	strb	r2, [r3, #0]
	switch (track_led_mode)
    13c6:	4b1d      	ldr	r3, [pc, #116]	; (143c <tc_callback_track_led_control+0x9c>)
    13c8:	781b      	ldrb	r3, [r3, #0]
    13ca:	2b01      	cmp	r3, #1
    13cc:	d013      	beq.n	13f6 <tc_callback_track_led_control+0x56>
    13ce:	2b00      	cmp	r3, #0
    13d0:	d006      	beq.n	13e0 <tc_callback_track_led_control+0x40>
    13d2:	2b02      	cmp	r3, #2
    13d4:	d01c      	beq.n	1410 <tc_callback_track_led_control+0x70>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    13d6:	2280      	movs	r2, #128	; 0x80
    13d8:	0092      	lsls	r2, r2, #2
    13da:	4b19      	ldr	r3, [pc, #100]	; (1440 <tc_callback_track_led_control+0xa0>)
    13dc:	61da      	str	r2, [r3, #28]
    13de:	e023      	b.n	1428 <tc_callback_track_led_control+0x88>
				if((counter_timer == TIMER_MULTIPLIER_0) || (counter_timer == TIMER_MULTIPLIER_1))
    13e0:	4b15      	ldr	r3, [pc, #84]	; (1438 <tc_callback_track_led_control+0x98>)
    13e2:	781b      	ldrb	r3, [r3, #0]
    13e4:	2b00      	cmp	r3, #0
    13e6:	d001      	beq.n	13ec <tc_callback_track_led_control+0x4c>
    13e8:	2b07      	cmp	r3, #7
    13ea:	d11d      	bne.n	1428 <tc_callback_track_led_control+0x88>
    13ec:	2280      	movs	r2, #128	; 0x80
    13ee:	0092      	lsls	r2, r2, #2
    13f0:	4b13      	ldr	r3, [pc, #76]	; (1440 <tc_callback_track_led_control+0xa0>)
    13f2:	61da      	str	r2, [r3, #28]
    13f4:	e018      	b.n	1428 <tc_callback_track_led_control+0x88>
				if((counter_timer == TIMER_MULTIPLIER_0) || (counter_timer == TIMER_MULTIPLIER_1)||(counter_timer == TIMER_MULTIPLIER_2) || (counter_timer == TIMER_MULTIPLIER_3))
    13f6:	4b10      	ldr	r3, [pc, #64]	; (1438 <tc_callback_track_led_control+0x98>)
    13f8:	781a      	ldrb	r2, [r3, #0]
    13fa:	2a15      	cmp	r2, #21
    13fc:	d814      	bhi.n	1428 <tc_callback_track_led_control+0x88>
    13fe:	4b11      	ldr	r3, [pc, #68]	; (1444 <tc_callback_track_led_control+0xa4>)
    1400:	40d3      	lsrs	r3, r2
    1402:	07db      	lsls	r3, r3, #31
    1404:	d510      	bpl.n	1428 <tc_callback_track_led_control+0x88>
    1406:	2280      	movs	r2, #128	; 0x80
    1408:	0092      	lsls	r2, r2, #2
    140a:	4b0d      	ldr	r3, [pc, #52]	; (1440 <tc_callback_track_led_control+0xa0>)
    140c:	61da      	str	r2, [r3, #28]
    140e:	e00b      	b.n	1428 <tc_callback_track_led_control+0x88>
				if((counter_timer == TIMER_MULTIPLIER_0) || (counter_timer == TIMER_MULTIPLIER_1)||(counter_timer == TIMER_MULTIPLIER_2) || (counter_timer == TIMER_MULTIPLIER_3) ||(counter_timer == TIMER_MULTIPLIER_4) || (counter_timer == TIMER_MULTIPLIER_5))
    1410:	4b09      	ldr	r3, [pc, #36]	; (1438 <tc_callback_track_led_control+0x98>)
    1412:	781a      	ldrb	r2, [r3, #0]
    1414:	2a1c      	cmp	r2, #28
    1416:	d80c      	bhi.n	1432 <tc_callback_track_led_control+0x92>
    1418:	4b0b      	ldr	r3, [pc, #44]	; (1448 <tc_callback_track_led_control+0xa8>)
    141a:	40d3      	lsrs	r3, r2
    141c:	07db      	lsls	r3, r3, #31
    141e:	d508      	bpl.n	1432 <tc_callback_track_led_control+0x92>
    1420:	2280      	movs	r2, #128	; 0x80
    1422:	0092      	lsls	r2, r2, #2
    1424:	4b06      	ldr	r3, [pc, #24]	; (1440 <tc_callback_track_led_control+0xa0>)
    1426:	61da      	str	r2, [r3, #28]
				{
					port_pin_toggle_output_level(TRACK_LED);
				}
				break;
	 }
	counter_timer++;
    1428:	4a03      	ldr	r2, [pc, #12]	; (1438 <tc_callback_track_led_control+0x98>)
    142a:	7813      	ldrb	r3, [r2, #0]
    142c:	3301      	adds	r3, #1
    142e:	7013      	strb	r3, [r2, #0]
	
	
}
    1430:	4770      	bx	lr
				if((counter_timer == TIMER_MULTIPLIER_0) || (counter_timer == TIMER_MULTIPLIER_1)||(counter_timer == TIMER_MULTIPLIER_2) || (counter_timer == TIMER_MULTIPLIER_3) ||(counter_timer == TIMER_MULTIPLIER_4) || (counter_timer == TIMER_MULTIPLIER_5))
    1432:	2a23      	cmp	r2, #35	; 0x23
    1434:	d1f8      	bne.n	1428 <tc_callback_track_led_control+0x88>
    1436:	e7f3      	b.n	1420 <tc_callback_track_led_control+0x80>
    1438:	200000b0 	.word	0x200000b0
    143c:	200000b1 	.word	0x200000b1
    1440:	41004400 	.word	0x41004400
    1444:	00204081 	.word	0x00204081
    1448:	10204081 	.word	0x10204081

0000144c <init_track_led_timer>:
{
    144c:	b510      	push	{r4, lr}
    144e:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1450:	aa01      	add	r2, sp, #4
    1452:	2300      	movs	r3, #0
    1454:	2100      	movs	r1, #0
    1456:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1458:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    145a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    145c:	2000      	movs	r0, #0
    145e:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1460:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1462:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1464:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1466:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    1468:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    146a:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    146c:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    146e:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1470:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1472:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1474:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1476:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1478:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    147a:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT; //8
    147c:	3304      	adds	r3, #4
    147e:	7093      	strb	r3, [r2, #2]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024; //64
    1480:	23e0      	movs	r3, #224	; 0xe0
    1482:	00db      	lsls	r3, r3, #3
    1484:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = 0xFF;
    1486:	21ff      	movs	r1, #255	; 0xff
    1488:	2329      	movs	r3, #41	; 0x29
    148a:	54d1      	strb	r1, [r2, r3]
	tc_init(&tc_instance1, TC1, &config_tc);
    148c:	4c07      	ldr	r4, [pc, #28]	; (14ac <init_track_led_timer+0x60>)
    148e:	4908      	ldr	r1, [pc, #32]	; (14b0 <init_track_led_timer+0x64>)
    1490:	0020      	movs	r0, r4
    1492:	4b08      	ldr	r3, [pc, #32]	; (14b4 <init_track_led_timer+0x68>)
    1494:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1496:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1498:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    149a:	b25b      	sxtb	r3, r3
    149c:	2b00      	cmp	r3, #0
    149e:	dbfb      	blt.n	1498 <init_track_led_timer+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    14a0:	8813      	ldrh	r3, [r2, #0]
    14a2:	2102      	movs	r1, #2
    14a4:	430b      	orrs	r3, r1
    14a6:	8013      	strh	r3, [r2, #0]
}
    14a8:	b00e      	add	sp, #56	; 0x38
    14aa:	bd10      	pop	{r4, pc}
    14ac:	20000118 	.word	0x20000118
    14b0:	42001800 	.word	0x42001800
    14b4:	00001171 	.word	0x00001171

000014b8 <config_callbacks_tc1>:



//Callbacks
void config_callbacks_tc1()
{
    14b8:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance1, tc_callback_track_led_control ,TC_CALLBACK_OVERFLOW);
    14ba:	4c0c      	ldr	r4, [pc, #48]	; (14ec <config_callbacks_tc1+0x34>)
    14bc:	2200      	movs	r2, #0
    14be:	490c      	ldr	r1, [pc, #48]	; (14f0 <config_callbacks_tc1+0x38>)
    14c0:	0020      	movs	r0, r4
    14c2:	4b0c      	ldr	r3, [pc, #48]	; (14f4 <config_callbacks_tc1+0x3c>)
    14c4:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    14c6:	6820      	ldr	r0, [r4, #0]
    14c8:	4b0b      	ldr	r3, [pc, #44]	; (14f8 <config_callbacks_tc1+0x40>)
    14ca:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    14cc:	4b0b      	ldr	r3, [pc, #44]	; (14fc <config_callbacks_tc1+0x44>)
    14ce:	5c1a      	ldrb	r2, [r3, r0]
    14d0:	231f      	movs	r3, #31
    14d2:	4013      	ands	r3, r2
    14d4:	2201      	movs	r2, #1
    14d6:	0011      	movs	r1, r2
    14d8:	4099      	lsls	r1, r3
    14da:	4b09      	ldr	r3, [pc, #36]	; (1500 <config_callbacks_tc1+0x48>)
    14dc:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    14de:	7e63      	ldrb	r3, [r4, #25]
    14e0:	2101      	movs	r1, #1
    14e2:	430b      	orrs	r3, r1
    14e4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    14e6:	6823      	ldr	r3, [r4, #0]
    14e8:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_instance1, TC_CALLBACK_OVERFLOW);
}
    14ea:	bd10      	pop	{r4, pc}
    14ec:	20000118 	.word	0x20000118
    14f0:	000013a1 	.word	0x000013a1
    14f4:	00001095 	.word	0x00001095
    14f8:	0000114d 	.word	0x0000114d
    14fc:	00002078 	.word	0x00002078
    1500:	e000e100 	.word	0xe000e100

00001504 <init_led_buttons>:


//Initialize all the buttons and LEDS
void init_led_buttons()
{
    1504:	b570      	push	{r4, r5, r6, lr}
    1506:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    1508:	ac01      	add	r4, sp, #4
    150a:	2301      	movs	r3, #1
    150c:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    150e:	2600      	movs	r6, #0
    1510:	70a6      	strb	r6, [r4, #2]
	//LED_init
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1512:	7023      	strb	r3, [r4, #0]
	//Record LED init
	port_pin_set_config(RECORD_LED, &config_port_pin);
    1514:	0021      	movs	r1, r4
    1516:	2005      	movs	r0, #5
    1518:	4d0e      	ldr	r5, [pc, #56]	; (1554 <init_led_buttons+0x50>)
    151a:	47a8      	blx	r5
	//Play LED init
	port_pin_set_config(PLAY_LED, &config_port_pin);
    151c:	0021      	movs	r1, r4
    151e:	2008      	movs	r0, #8
    1520:	47a8      	blx	r5
	//Track LED init
	port_pin_set_config(TRACK_LED, &config_port_pin);
    1522:	0021      	movs	r1, r4
    1524:	2009      	movs	r0, #9
    1526:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    1528:	4b0b      	ldr	r3, [pc, #44]	; (1558 <init_led_buttons+0x54>)
    152a:	2220      	movs	r2, #32
    152c:	615a      	str	r2, [r3, #20]
    152e:	32e0      	adds	r2, #224	; 0xe0
    1530:	615a      	str	r2, [r3, #20]
    1532:	3201      	adds	r2, #1
    1534:	32ff      	adds	r2, #255	; 0xff
    1536:	615a      	str	r2, [r3, #20]
	config->direction  = PORT_PIN_DIR_INPUT;
    1538:	7026      	strb	r6, [r4, #0]
	config->powersave  = false;
    153a:	70a6      	strb	r6, [r4, #2]
	
	
	
	//Switches_init
	port_get_config_defaults(&config_port_pin);
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    153c:	2302      	movs	r3, #2
    153e:	7063      	strb	r3, [r4, #1]
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
	
	//Record button init
	port_pin_set_config(RECORD_BUTTON, &config_port_pin);
    1540:	0021      	movs	r1, r4
    1542:	200e      	movs	r0, #14
    1544:	47a8      	blx	r5
	port_pin_set_config(PLAY_BUTTON, &config_port_pin);
	//Next button init
	port_pin_set_config(NEXT_BUTTON, &config_port_pin);
	*/
	
	init_track_led_timer();
    1546:	4b05      	ldr	r3, [pc, #20]	; (155c <init_led_buttons+0x58>)
    1548:	4798      	blx	r3
	config_callbacks_tc1();
    154a:	4b05      	ldr	r3, [pc, #20]	; (1560 <init_led_buttons+0x5c>)
    154c:	4798      	blx	r3
	
	
}
    154e:	b002      	add	sp, #8
    1550:	bd70      	pop	{r4, r5, r6, pc}
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	000008fd 	.word	0x000008fd
    1558:	41004400 	.word	0x41004400
    155c:	0000144d 	.word	0x0000144d
    1560:	000014b9 	.word	0x000014b9

00001564 <LED_on>:
	if (port_index < PORT_INST_NUM) {
    1564:	09c2      	lsrs	r2, r0, #7
		return NULL;
    1566:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1568:	2a00      	cmp	r2, #0
    156a:	d104      	bne.n	1576 <LED_on+0x12>
		return &(ports[port_index]->Group[group_index]);
    156c:	0943      	lsrs	r3, r0, #5
    156e:	01db      	lsls	r3, r3, #7
    1570:	4a04      	ldr	r2, [pc, #16]	; (1584 <LED_on+0x20>)
    1572:	4694      	mov	ip, r2
    1574:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1576:	221f      	movs	r2, #31
    1578:	4010      	ands	r0, r2
    157a:	3a1e      	subs	r2, #30
    157c:	4082      	lsls	r2, r0
		port_base->OUTSET.reg = pin_mask;
    157e:	619a      	str	r2, [r3, #24]
//Switch on LED
void LED_on(uint8_t LED_pin_no)
{
	//LED on 
	port_pin_set_output_level(LED_pin_no,true);
}
    1580:	4770      	bx	lr
    1582:	46c0      	nop			; (mov r8, r8)
    1584:	41004400 	.word	0x41004400

00001588 <LED_off>:
	if (port_index < PORT_INST_NUM) {
    1588:	09c2      	lsrs	r2, r0, #7
		return NULL;
    158a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    158c:	2a00      	cmp	r2, #0
    158e:	d104      	bne.n	159a <LED_off+0x12>
		return &(ports[port_index]->Group[group_index]);
    1590:	0943      	lsrs	r3, r0, #5
    1592:	01db      	lsls	r3, r3, #7
    1594:	4a04      	ldr	r2, [pc, #16]	; (15a8 <LED_off+0x20>)
    1596:	4694      	mov	ip, r2
    1598:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    159a:	221f      	movs	r2, #31
    159c:	4010      	ands	r0, r2
    159e:	3a1e      	subs	r2, #30
    15a0:	4082      	lsls	r2, r0
		port_base->OUTCLR.reg = pin_mask;
    15a2:	615a      	str	r2, [r3, #20]
//Switch off the LED
void LED_off(uint8_t LED_pin_no)
{
	//LED off
	port_pin_set_output_level(LED_pin_no,false);
}
    15a4:	4770      	bx	lr
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	41004400 	.word	0x41004400

000015ac <LED_track>:
	port_pin_toggle_output_level(LED_pin_no);
}

//Track LED 
void LED_track(uint8_t track_no)
{
    15ac:	b510      	push	{r4, lr}
	//Lock the resource 
	track_led_mode = track_no; // Should make this atomic , never seen these problems , slow operation so should not be a problem
    15ae:	4b06      	ldr	r3, [pc, #24]	; (15c8 <LED_track+0x1c>)
    15b0:	7018      	strb	r0, [r3, #0]
	counter_timer = 0;
    15b2:	2200      	movs	r2, #0
    15b4:	4b05      	ldr	r3, [pc, #20]	; (15cc <LED_track+0x20>)
    15b6:	701a      	strb	r2, [r3, #0]
    15b8:	2280      	movs	r2, #128	; 0x80
    15ba:	0092      	lsls	r2, r2, #2
    15bc:	4b04      	ldr	r3, [pc, #16]	; (15d0 <LED_track+0x24>)
    15be:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(TRACK_LED,false);
	delay_cycles_ms(100);
    15c0:	2064      	movs	r0, #100	; 0x64
    15c2:	4b04      	ldr	r3, [pc, #16]	; (15d4 <LED_track+0x28>)
    15c4:	4798      	blx	r3
	
	//Unlock the resource
	
}
    15c6:	bd10      	pop	{r4, pc}
    15c8:	200000b1 	.word	0x200000b1
    15cc:	200000b0 	.word	0x200000b0
    15d0:	41004400 	.word	0x41004400
    15d4:	000008d1 	.word	0x000008d1

000015d8 <check_input_buttons>:

uint8_t check_input_buttons(void)
{
    15d8:	b500      	push	{lr}
    15da:	b083      	sub	sp, #12
	enum buttons_state buttons_pressed ;
	volatile uint32_t in_reg = 0;
    15dc:	2300      	movs	r3, #0
    15de:	9301      	str	r3, [sp, #4]
	buttons_pressed = NO_BUTTONS_PRESSED;
	//Software debounce
	PortGroup *const port_base = port_get_group_from_gpio_pin(RECORD_LED);
	
	in_reg = port_base->IN.reg & MASK_BUTTONS;
    15e0:	4b13      	ldr	r3, [pc, #76]	; (1630 <check_input_buttons+0x58>)
    15e2:	6a1b      	ldr	r3, [r3, #32]
    15e4:	4a13      	ldr	r2, [pc, #76]	; (1634 <check_input_buttons+0x5c>)
    15e6:	4013      	ands	r3, r2
    15e8:	9301      	str	r3, [sp, #4]
	if( in_reg == NO_BUTTONS_PRESSED)
    15ea:	9b01      	ldr	r3, [sp, #4]
	{
		return buttons_pressed;
    15ec:	2000      	movs	r0, #0
	if( in_reg == NO_BUTTONS_PRESSED)
    15ee:	2b00      	cmp	r3, #0
    15f0:	d101      	bne.n	15f6 <check_input_buttons+0x1e>
			return buttons_pressed;
		}
		
		
	}
}
    15f2:	b003      	add	sp, #12
    15f4:	bd00      	pop	{pc}
		delay_cycles_ms(125);
    15f6:	307d      	adds	r0, #125	; 0x7d
    15f8:	4b0f      	ldr	r3, [pc, #60]	; (1638 <check_input_buttons+0x60>)
    15fa:	4798      	blx	r3
		in_reg = port_base->IN.reg & MASK_BUTTONS;
    15fc:	4b0c      	ldr	r3, [pc, #48]	; (1630 <check_input_buttons+0x58>)
    15fe:	6a1b      	ldr	r3, [r3, #32]
    1600:	4a0c      	ldr	r2, [pc, #48]	; (1634 <check_input_buttons+0x5c>)
    1602:	4013      	ands	r3, r2
    1604:	9301      	str	r3, [sp, #4]
		if( in_reg == NO_BUTTONS_PRESSED)
    1606:	9b01      	ldr	r3, [sp, #4]
			return buttons_pressed;
    1608:	2000      	movs	r0, #0
		if( in_reg == NO_BUTTONS_PRESSED)
    160a:	2b00      	cmp	r3, #0
    160c:	d0f1      	beq.n	15f2 <check_input_buttons+0x1a>
			switch(in_reg)
    160e:	9a01      	ldr	r2, [sp, #4]
    1610:	2380      	movs	r3, #128	; 0x80
    1612:	01db      	lsls	r3, r3, #7
    1614:	429a      	cmp	r2, r3
    1616:	d108      	bne.n	162a <check_input_buttons+0x52>
					in_reg  = 0;
    1618:	2300      	movs	r3, #0
    161a:	9301      	str	r3, [sp, #4]
					buttons_pressed = R_PRESS;
    161c:	3002      	adds	r0, #2
			in_reg = port_base->IN.reg & MASK_BUTTONS;
    161e:	4b04      	ldr	r3, [pc, #16]	; (1630 <check_input_buttons+0x58>)
    1620:	6a1b      	ldr	r3, [r3, #32]
    1622:	4a04      	ldr	r2, [pc, #16]	; (1634 <check_input_buttons+0x5c>)
    1624:	4013      	ands	r3, r2
    1626:	9301      	str	r3, [sp, #4]
			return buttons_pressed;
    1628:	e7e3      	b.n	15f2 <check_input_buttons+0x1a>
	buttons_pressed = NO_BUTTONS_PRESSED;
    162a:	2000      	movs	r0, #0
    162c:	e7f7      	b.n	161e <check_input_buttons+0x46>
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	41004400 	.word	0x41004400
    1634:	0000c010 	.word	0x0000c010
    1638:	000008d1 	.word	0x000008d1

0000163c <callback_spi_master>:
}

static void callback_spi_master( struct spi_module *const module)
{
	//! [callback_var]
	transrev_complete_spi_master = true;
    163c:	2201      	movs	r2, #1
    163e:	4b01      	ldr	r3, [pc, #4]	; (1644 <callback_spi_master+0x8>)
    1640:	701a      	strb	r2, [r3, #0]
	//! [callback_var]
}
    1642:	4770      	bx	lr
    1644:	200000b2 	.word	0x200000b2

00001648 <init_spi>:
{
    1648:	b5f0      	push	{r4, r5, r6, r7, lr}
    164a:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    164c:	4c2b      	ldr	r4, [pc, #172]	; (16fc <init_spi+0xb4>)
    164e:	2318      	movs	r3, #24
    1650:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1652:	2300      	movs	r3, #0
    1654:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1656:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1658:	a901      	add	r1, sp, #4
    165a:	2201      	movs	r2, #1
    165c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    165e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1660:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1662:	2018      	movs	r0, #24
    1664:	4b26      	ldr	r3, [pc, #152]	; (1700 <init_spi+0xb8>)
    1666:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1668:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    166a:	09d9      	lsrs	r1, r3, #7
		return NULL;
    166c:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    166e:	2900      	cmp	r1, #0
    1670:	d104      	bne.n	167c <init_spi+0x34>
		return &(ports[port_index]->Group[group_index]);
    1672:	095a      	lsrs	r2, r3, #5
    1674:	01d2      	lsls	r2, r2, #7
    1676:	4923      	ldr	r1, [pc, #140]	; (1704 <init_spi+0xbc>)
    1678:	468c      	mov	ip, r1
    167a:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    167c:	261f      	movs	r6, #31
    167e:	4033      	ands	r3, r6
    1680:	2501      	movs	r5, #1
    1682:	0029      	movs	r1, r5
    1684:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    1686:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    1688:	ac02      	add	r4, sp, #8
    168a:	7025      	strb	r5, [r4, #0]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    168c:	2300      	movs	r3, #0
    168e:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1690:	22c0      	movs	r2, #192	; 0xc0
    1692:	0392      	lsls	r2, r2, #14
    1694:	9205      	str	r2, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1696:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    1698:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    169a:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    169c:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    169e:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    16a0:	2224      	movs	r2, #36	; 0x24
    16a2:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    16a4:	3a18      	subs	r2, #24
    16a6:	2100      	movs	r1, #0
    16a8:	a808      	add	r0, sp, #32
    16aa:	4b17      	ldr	r3, [pc, #92]	; (1708 <init_spi+0xc0>)
    16ac:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    16ae:	4b17      	ldr	r3, [pc, #92]	; (170c <init_spi+0xc4>)
    16b0:	61a3      	str	r3, [r4, #24]
	config_spi_master.data_order  = SPI_DATA_ORDER_LSB;
    16b2:	2380      	movs	r3, #128	; 0x80
    16b4:	05db      	lsls	r3, r3, #23
    16b6:	6063      	str	r3, [r4, #4]
	config_spi_master.pinmux_pad0 = SPI_MOSI_PIN;
    16b8:	4b15      	ldr	r3, [pc, #84]	; (1710 <init_spi+0xc8>)
    16ba:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = SPI_SCK_PIN;
    16bc:	4b15      	ldr	r3, [pc, #84]	; (1714 <init_spi+0xcc>)
    16be:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = PINMUX_UNUSED;
    16c0:	2301      	movs	r3, #1
    16c2:	425b      	negs	r3, r3
    16c4:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SPI_MISO_PIN;
    16c6:	4b14      	ldr	r3, [pc, #80]	; (1718 <init_spi+0xd0>)
    16c8:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&spi_master_instance, SPI_MODULE, &config_spi_master);
    16ca:	4f14      	ldr	r7, [pc, #80]	; (171c <init_spi+0xd4>)
    16cc:	0022      	movs	r2, r4
    16ce:	4914      	ldr	r1, [pc, #80]	; (1720 <init_spi+0xd8>)
    16d0:	0038      	movs	r0, r7
    16d2:	4b14      	ldr	r3, [pc, #80]	; (1724 <init_spi+0xdc>)
    16d4:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    16d6:	683c      	ldr	r4, [r7, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    16d8:	0020      	movs	r0, r4
    16da:	4b13      	ldr	r3, [pc, #76]	; (1728 <init_spi+0xe0>)
    16dc:	4798      	blx	r3
    16de:	4006      	ands	r6, r0
    16e0:	40b5      	lsls	r5, r6
    16e2:	4b12      	ldr	r3, [pc, #72]	; (172c <init_spi+0xe4>)
    16e4:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    16e6:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    16e8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    16ea:	2b00      	cmp	r3, #0
    16ec:	d1fc      	bne.n	16e8 <init_spi+0xa0>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    16ee:	6823      	ldr	r3, [r4, #0]
    16f0:	2202      	movs	r2, #2
    16f2:	4313      	orrs	r3, r2
    16f4:	6023      	str	r3, [r4, #0]
}
    16f6:	b011      	add	sp, #68	; 0x44
    16f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	20000170 	.word	0x20000170
    1700:	000008fd 	.word	0x000008fd
    1704:	41004400 	.word	0x41004400
    1708:	00002039 	.word	0x00002039
    170c:	000186a0 	.word	0x000186a0
    1710:	001e0002 	.word	0x001e0002
    1714:	001f0002 	.word	0x001f0002
    1718:	00190002 	.word	0x00190002
    171c:	20000134 	.word	0x20000134
    1720:	42000c00 	.word	0x42000c00
    1724:	00000ab1 	.word	0x00000ab1
    1728:	00000a75 	.word	0x00000a75
    172c:	e000e100 	.word	0xe000e100

00001730 <configure_spi_master_callbacks>:

void configure_spi_master_callbacks(void)
{
    1730:	b510      	push	{r4, lr}
	//! [reg_callback]
	spi_register_callback(&spi_master_instance, callback_spi_master,SPI_CALLBACK_BUFFER_TRANSCEIVED);
    1732:	4c06      	ldr	r4, [pc, #24]	; (174c <configure_spi_master_callbacks+0x1c>)
    1734:	2202      	movs	r2, #2
    1736:	4906      	ldr	r1, [pc, #24]	; (1750 <configure_spi_master_callbacks+0x20>)
    1738:	0020      	movs	r0, r4
    173a:	4b06      	ldr	r3, [pc, #24]	; (1754 <configure_spi_master_callbacks+0x24>)
    173c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    173e:	2237      	movs	r2, #55	; 0x37
    1740:	5ca3      	ldrb	r3, [r4, r2]
    1742:	2104      	movs	r1, #4
    1744:	430b      	orrs	r3, r1
    1746:	54a3      	strb	r3, [r4, r2]
	spi_enable_callback(&spi_master_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
	//! [en_callback]
}
    1748:	bd10      	pop	{r4, pc}
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	20000134 	.word	0x20000134
    1750:	0000163d 	.word	0x0000163d
    1754:	00000db9 	.word	0x00000db9

00001758 <configure_spi>:

//! [configure_spi]
void configure_spi(void)
{
    1758:	b510      	push	{r4, lr}
	init_spi();
    175a:	4b02      	ldr	r3, [pc, #8]	; (1764 <configure_spi+0xc>)
    175c:	4798      	blx	r3
	configure_spi_master_callbacks();
    175e:	4b02      	ldr	r3, [pc, #8]	; (1768 <configure_spi+0x10>)
    1760:	4798      	blx	r3

}
    1762:	bd10      	pop	{r4, pc}
    1764:	00001649 	.word	0x00001649
    1768:	00001731 	.word	0x00001731

0000176c <spi_transceive>:

void spi_transceive (uint8_t* wr_buffer , uint8_t* rd_buffer ,uint8_t buff_length)
{
    176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    176e:	0006      	movs	r6, r0
    1770:	000f      	movs	r7, r1
    1772:	0014      	movs	r4, r2
	spi_select_slave(&spi_master_instance, &slave, true);
    1774:	4d0b      	ldr	r5, [pc, #44]	; (17a4 <spi_transceive+0x38>)
    1776:	2201      	movs	r2, #1
    1778:	490b      	ldr	r1, [pc, #44]	; (17a8 <spi_transceive+0x3c>)
    177a:	0028      	movs	r0, r5
    177c:	4b0b      	ldr	r3, [pc, #44]	; (17ac <spi_transceive+0x40>)
    177e:	4798      	blx	r3
	spi_transceive_buffer_job(&spi_master_instance, wr_buffer ,rd_buffer , buff_length);
    1780:	b2a3      	uxth	r3, r4
    1782:	003a      	movs	r2, r7
    1784:	0031      	movs	r1, r6
    1786:	0028      	movs	r0, r5
    1788:	4c09      	ldr	r4, [pc, #36]	; (17b0 <spi_transceive+0x44>)
    178a:	47a0      	blx	r4
	while (!transrev_complete_spi_master)
    178c:	4a09      	ldr	r2, [pc, #36]	; (17b4 <spi_transceive+0x48>)
    178e:	7813      	ldrb	r3, [r2, #0]
    1790:	2b00      	cmp	r3, #0
    1792:	d0fc      	beq.n	178e <spi_transceive+0x22>
	{
	}
	transrev_complete_spi_master = false;
    1794:	2200      	movs	r2, #0
    1796:	4b07      	ldr	r3, [pc, #28]	; (17b4 <spi_transceive+0x48>)
    1798:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&spi_master_instance, &slave, false);
    179a:	4903      	ldr	r1, [pc, #12]	; (17a8 <spi_transceive+0x3c>)
    179c:	4801      	ldr	r0, [pc, #4]	; (17a4 <spi_transceive+0x38>)
    179e:	4b03      	ldr	r3, [pc, #12]	; (17ac <spi_transceive+0x40>)
    17a0:	4798      	blx	r3
}
    17a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17a4:	20000134 	.word	0x20000134
    17a8:	20000170 	.word	0x20000170
    17ac:	00000cc5 	.word	0x00000cc5
    17b0:	00000dd1 	.word	0x00000dd1
    17b4:	200000b2 	.word	0x200000b2

000017b8 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    17b8:	4770      	bx	lr
	...

000017bc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    17bc:	4b0c      	ldr	r3, [pc, #48]	; (17f0 <cpu_irq_enter_critical+0x34>)
    17be:	681b      	ldr	r3, [r3, #0]
    17c0:	2b00      	cmp	r3, #0
    17c2:	d106      	bne.n	17d2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    17c4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    17c8:	2b00      	cmp	r3, #0
    17ca:	d007      	beq.n	17dc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    17cc:	2200      	movs	r2, #0
    17ce:	4b09      	ldr	r3, [pc, #36]	; (17f4 <cpu_irq_enter_critical+0x38>)
    17d0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    17d2:	4a07      	ldr	r2, [pc, #28]	; (17f0 <cpu_irq_enter_critical+0x34>)
    17d4:	6813      	ldr	r3, [r2, #0]
    17d6:	3301      	adds	r3, #1
    17d8:	6013      	str	r3, [r2, #0]
}
    17da:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    17dc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    17de:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    17e2:	2200      	movs	r2, #0
    17e4:	4b04      	ldr	r3, [pc, #16]	; (17f8 <cpu_irq_enter_critical+0x3c>)
    17e6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    17e8:	3201      	adds	r2, #1
    17ea:	4b02      	ldr	r3, [pc, #8]	; (17f4 <cpu_irq_enter_critical+0x38>)
    17ec:	701a      	strb	r2, [r3, #0]
    17ee:	e7f0      	b.n	17d2 <cpu_irq_enter_critical+0x16>
    17f0:	200000b4 	.word	0x200000b4
    17f4:	200000b8 	.word	0x200000b8
    17f8:	20000074 	.word	0x20000074

000017fc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    17fc:	4b08      	ldr	r3, [pc, #32]	; (1820 <cpu_irq_leave_critical+0x24>)
    17fe:	681a      	ldr	r2, [r3, #0]
    1800:	3a01      	subs	r2, #1
    1802:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1804:	681b      	ldr	r3, [r3, #0]
    1806:	2b00      	cmp	r3, #0
    1808:	d109      	bne.n	181e <cpu_irq_leave_critical+0x22>
    180a:	4b06      	ldr	r3, [pc, #24]	; (1824 <cpu_irq_leave_critical+0x28>)
    180c:	781b      	ldrb	r3, [r3, #0]
    180e:	2b00      	cmp	r3, #0
    1810:	d005      	beq.n	181e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1812:	2201      	movs	r2, #1
    1814:	4b04      	ldr	r3, [pc, #16]	; (1828 <cpu_irq_leave_critical+0x2c>)
    1816:	701a      	strb	r2, [r3, #0]
    1818:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    181c:	b662      	cpsie	i
	}
}
    181e:	4770      	bx	lr
    1820:	200000b4 	.word	0x200000b4
    1824:	200000b8 	.word	0x200000b8
    1828:	20000074 	.word	0x20000074

0000182c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    182c:	b510      	push	{r4, lr}
	switch (clock_source) {
    182e:	2808      	cmp	r0, #8
    1830:	d803      	bhi.n	183a <system_clock_source_get_hz+0xe>
    1832:	0080      	lsls	r0, r0, #2
    1834:	4b1b      	ldr	r3, [pc, #108]	; (18a4 <system_clock_source_get_hz+0x78>)
    1836:	581b      	ldr	r3, [r3, r0]
    1838:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    183a:	2000      	movs	r0, #0
    183c:	e030      	b.n	18a0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    183e:	4b1a      	ldr	r3, [pc, #104]	; (18a8 <system_clock_source_get_hz+0x7c>)
    1840:	6918      	ldr	r0, [r3, #16]
    1842:	e02d      	b.n	18a0 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1844:	4b19      	ldr	r3, [pc, #100]	; (18ac <system_clock_source_get_hz+0x80>)
    1846:	6a1b      	ldr	r3, [r3, #32]
    1848:	059b      	lsls	r3, r3, #22
    184a:	0f9b      	lsrs	r3, r3, #30
    184c:	4818      	ldr	r0, [pc, #96]	; (18b0 <system_clock_source_get_hz+0x84>)
    184e:	40d8      	lsrs	r0, r3
    1850:	e026      	b.n	18a0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1852:	4b15      	ldr	r3, [pc, #84]	; (18a8 <system_clock_source_get_hz+0x7c>)
    1854:	6958      	ldr	r0, [r3, #20]
    1856:	e023      	b.n	18a0 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1858:	4b13      	ldr	r3, [pc, #76]	; (18a8 <system_clock_source_get_hz+0x7c>)
    185a:	681b      	ldr	r3, [r3, #0]
			return 0;
    185c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    185e:	079b      	lsls	r3, r3, #30
    1860:	d51e      	bpl.n	18a0 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1862:	4912      	ldr	r1, [pc, #72]	; (18ac <system_clock_source_get_hz+0x80>)
    1864:	2210      	movs	r2, #16
    1866:	68cb      	ldr	r3, [r1, #12]
    1868:	421a      	tst	r2, r3
    186a:	d0fc      	beq.n	1866 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    186c:	4b0e      	ldr	r3, [pc, #56]	; (18a8 <system_clock_source_get_hz+0x7c>)
    186e:	681b      	ldr	r3, [r3, #0]
    1870:	075b      	lsls	r3, r3, #29
    1872:	d401      	bmi.n	1878 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1874:	480f      	ldr	r0, [pc, #60]	; (18b4 <system_clock_source_get_hz+0x88>)
    1876:	e013      	b.n	18a0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1878:	2000      	movs	r0, #0
    187a:	4b0f      	ldr	r3, [pc, #60]	; (18b8 <system_clock_source_get_hz+0x8c>)
    187c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    187e:	4b0a      	ldr	r3, [pc, #40]	; (18a8 <system_clock_source_get_hz+0x7c>)
    1880:	689b      	ldr	r3, [r3, #8]
    1882:	041b      	lsls	r3, r3, #16
    1884:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1886:	4358      	muls	r0, r3
    1888:	e00a      	b.n	18a0 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    188a:	2350      	movs	r3, #80	; 0x50
    188c:	4a07      	ldr	r2, [pc, #28]	; (18ac <system_clock_source_get_hz+0x80>)
    188e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1890:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1892:	075b      	lsls	r3, r3, #29
    1894:	d504      	bpl.n	18a0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1896:	4b04      	ldr	r3, [pc, #16]	; (18a8 <system_clock_source_get_hz+0x7c>)
    1898:	68d8      	ldr	r0, [r3, #12]
    189a:	e001      	b.n	18a0 <system_clock_source_get_hz+0x74>
		return 32768UL;
    189c:	2080      	movs	r0, #128	; 0x80
    189e:	0200      	lsls	r0, r0, #8
	}
}
    18a0:	bd10      	pop	{r4, pc}
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	0000207c 	.word	0x0000207c
    18a8:	200000bc 	.word	0x200000bc
    18ac:	40000800 	.word	0x40000800
    18b0:	007a1200 	.word	0x007a1200
    18b4:	02dc6c00 	.word	0x02dc6c00
    18b8:	00001c8d 	.word	0x00001c8d

000018bc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    18bc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    18be:	490c      	ldr	r1, [pc, #48]	; (18f0 <system_clock_source_osc8m_set_config+0x34>)
    18c0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    18c2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    18c4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    18c6:	7840      	ldrb	r0, [r0, #1]
    18c8:	2201      	movs	r2, #1
    18ca:	4010      	ands	r0, r2
    18cc:	0180      	lsls	r0, r0, #6
    18ce:	2640      	movs	r6, #64	; 0x40
    18d0:	43b3      	bics	r3, r6
    18d2:	4303      	orrs	r3, r0
    18d4:	402a      	ands	r2, r5
    18d6:	01d2      	lsls	r2, r2, #7
    18d8:	2080      	movs	r0, #128	; 0x80
    18da:	4383      	bics	r3, r0
    18dc:	4313      	orrs	r3, r2
    18de:	2203      	movs	r2, #3
    18e0:	4022      	ands	r2, r4
    18e2:	0212      	lsls	r2, r2, #8
    18e4:	4803      	ldr	r0, [pc, #12]	; (18f4 <system_clock_source_osc8m_set_config+0x38>)
    18e6:	4003      	ands	r3, r0
    18e8:	4313      	orrs	r3, r2
    18ea:	620b      	str	r3, [r1, #32]
}
    18ec:	bd70      	pop	{r4, r5, r6, pc}
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	40000800 	.word	0x40000800
    18f4:	fffffcff 	.word	0xfffffcff

000018f8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    18f8:	2808      	cmp	r0, #8
    18fa:	d803      	bhi.n	1904 <system_clock_source_enable+0xc>
    18fc:	0080      	lsls	r0, r0, #2
    18fe:	4b25      	ldr	r3, [pc, #148]	; (1994 <system_clock_source_enable+0x9c>)
    1900:	581b      	ldr	r3, [r3, r0]
    1902:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1904:	2017      	movs	r0, #23
    1906:	e044      	b.n	1992 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1908:	4a23      	ldr	r2, [pc, #140]	; (1998 <system_clock_source_enable+0xa0>)
    190a:	6a13      	ldr	r3, [r2, #32]
    190c:	2102      	movs	r1, #2
    190e:	430b      	orrs	r3, r1
    1910:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1912:	2000      	movs	r0, #0
    1914:	e03d      	b.n	1992 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1916:	4a20      	ldr	r2, [pc, #128]	; (1998 <system_clock_source_enable+0xa0>)
    1918:	6993      	ldr	r3, [r2, #24]
    191a:	2102      	movs	r1, #2
    191c:	430b      	orrs	r3, r1
    191e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1920:	2000      	movs	r0, #0
		break;
    1922:	e036      	b.n	1992 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1924:	4a1c      	ldr	r2, [pc, #112]	; (1998 <system_clock_source_enable+0xa0>)
    1926:	8a13      	ldrh	r3, [r2, #16]
    1928:	2102      	movs	r1, #2
    192a:	430b      	orrs	r3, r1
    192c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    192e:	2000      	movs	r0, #0
		break;
    1930:	e02f      	b.n	1992 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1932:	4a19      	ldr	r2, [pc, #100]	; (1998 <system_clock_source_enable+0xa0>)
    1934:	8a93      	ldrh	r3, [r2, #20]
    1936:	2102      	movs	r1, #2
    1938:	430b      	orrs	r3, r1
    193a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    193c:	2000      	movs	r0, #0
		break;
    193e:	e028      	b.n	1992 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1940:	4916      	ldr	r1, [pc, #88]	; (199c <system_clock_source_enable+0xa4>)
    1942:	680b      	ldr	r3, [r1, #0]
    1944:	2202      	movs	r2, #2
    1946:	4313      	orrs	r3, r2
    1948:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    194a:	4b13      	ldr	r3, [pc, #76]	; (1998 <system_clock_source_enable+0xa0>)
    194c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    194e:	0019      	movs	r1, r3
    1950:	320e      	adds	r2, #14
    1952:	68cb      	ldr	r3, [r1, #12]
    1954:	421a      	tst	r2, r3
    1956:	d0fc      	beq.n	1952 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1958:	4a10      	ldr	r2, [pc, #64]	; (199c <system_clock_source_enable+0xa4>)
    195a:	6891      	ldr	r1, [r2, #8]
    195c:	4b0e      	ldr	r3, [pc, #56]	; (1998 <system_clock_source_enable+0xa0>)
    195e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1960:	6852      	ldr	r2, [r2, #4]
    1962:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1964:	2200      	movs	r2, #0
    1966:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1968:	0019      	movs	r1, r3
    196a:	3210      	adds	r2, #16
    196c:	68cb      	ldr	r3, [r1, #12]
    196e:	421a      	tst	r2, r3
    1970:	d0fc      	beq.n	196c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1972:	4b0a      	ldr	r3, [pc, #40]	; (199c <system_clock_source_enable+0xa4>)
    1974:	681b      	ldr	r3, [r3, #0]
    1976:	b29b      	uxth	r3, r3
    1978:	4a07      	ldr	r2, [pc, #28]	; (1998 <system_clock_source_enable+0xa0>)
    197a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    197c:	2000      	movs	r0, #0
    197e:	e008      	b.n	1992 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1980:	4905      	ldr	r1, [pc, #20]	; (1998 <system_clock_source_enable+0xa0>)
    1982:	2244      	movs	r2, #68	; 0x44
    1984:	5c8b      	ldrb	r3, [r1, r2]
    1986:	2002      	movs	r0, #2
    1988:	4303      	orrs	r3, r0
    198a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    198c:	2000      	movs	r0, #0
		break;
    198e:	e000      	b.n	1992 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1990:	2000      	movs	r0, #0
}
    1992:	4770      	bx	lr
    1994:	000020a0 	.word	0x000020a0
    1998:	40000800 	.word	0x40000800
    199c:	200000bc 	.word	0x200000bc

000019a0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    19a0:	b530      	push	{r4, r5, lr}
    19a2:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    19a4:	22c2      	movs	r2, #194	; 0xc2
    19a6:	00d2      	lsls	r2, r2, #3
    19a8:	4b1a      	ldr	r3, [pc, #104]	; (1a14 <system_clock_init+0x74>)
    19aa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    19ac:	4a1a      	ldr	r2, [pc, #104]	; (1a18 <system_clock_init+0x78>)
    19ae:	6853      	ldr	r3, [r2, #4]
    19b0:	211e      	movs	r1, #30
    19b2:	438b      	bics	r3, r1
    19b4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    19b6:	2301      	movs	r3, #1
    19b8:	466a      	mov	r2, sp
    19ba:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    19bc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    19be:	4d17      	ldr	r5, [pc, #92]	; (1a1c <system_clock_init+0x7c>)
    19c0:	b2e0      	uxtb	r0, r4
    19c2:	4669      	mov	r1, sp
    19c4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    19c6:	3401      	adds	r4, #1
    19c8:	2c18      	cmp	r4, #24
    19ca:	d1f9      	bne.n	19c0 <system_clock_init+0x20>
	config->run_in_standby  = false;
    19cc:	a803      	add	r0, sp, #12
    19ce:	2400      	movs	r4, #0
    19d0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    19d2:	2501      	movs	r5, #1
    19d4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    19d6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    19d8:	4b11      	ldr	r3, [pc, #68]	; (1a20 <system_clock_init+0x80>)
    19da:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    19dc:	2006      	movs	r0, #6
    19de:	4b11      	ldr	r3, [pc, #68]	; (1a24 <system_clock_init+0x84>)
    19e0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    19e2:	4b11      	ldr	r3, [pc, #68]	; (1a28 <system_clock_init+0x88>)
    19e4:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    19e6:	4b11      	ldr	r3, [pc, #68]	; (1a2c <system_clock_init+0x8c>)
    19e8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    19ea:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    19ec:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    19ee:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    19f0:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    19f2:	466b      	mov	r3, sp
    19f4:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    19f6:	2306      	movs	r3, #6
    19f8:	466a      	mov	r2, sp
    19fa:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    19fc:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    19fe:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1a00:	4669      	mov	r1, sp
    1a02:	2000      	movs	r0, #0
    1a04:	4b0a      	ldr	r3, [pc, #40]	; (1a30 <system_clock_init+0x90>)
    1a06:	4798      	blx	r3
    1a08:	2000      	movs	r0, #0
    1a0a:	4b0a      	ldr	r3, [pc, #40]	; (1a34 <system_clock_init+0x94>)
    1a0c:	4798      	blx	r3
#endif
}
    1a0e:	b005      	add	sp, #20
    1a10:	bd30      	pop	{r4, r5, pc}
    1a12:	46c0      	nop			; (mov r8, r8)
    1a14:	40000800 	.word	0x40000800
    1a18:	41004000 	.word	0x41004000
    1a1c:	00001c71 	.word	0x00001c71
    1a20:	000018bd 	.word	0x000018bd
    1a24:	000018f9 	.word	0x000018f9
    1a28:	00001a39 	.word	0x00001a39
    1a2c:	40000400 	.word	0x40000400
    1a30:	00001a5d 	.word	0x00001a5d
    1a34:	00001b15 	.word	0x00001b15

00001a38 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1a38:	4a06      	ldr	r2, [pc, #24]	; (1a54 <system_gclk_init+0x1c>)
    1a3a:	6993      	ldr	r3, [r2, #24]
    1a3c:	2108      	movs	r1, #8
    1a3e:	430b      	orrs	r3, r1
    1a40:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1a42:	2201      	movs	r2, #1
    1a44:	4b04      	ldr	r3, [pc, #16]	; (1a58 <system_gclk_init+0x20>)
    1a46:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1a48:	0019      	movs	r1, r3
    1a4a:	780b      	ldrb	r3, [r1, #0]
    1a4c:	4213      	tst	r3, r2
    1a4e:	d1fc      	bne.n	1a4a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1a50:	4770      	bx	lr
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	40000400 	.word	0x40000400
    1a58:	40000c00 	.word	0x40000c00

00001a5c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a5c:	b570      	push	{r4, r5, r6, lr}
    1a5e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a60:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a62:	780d      	ldrb	r5, [r1, #0]
    1a64:	022d      	lsls	r5, r5, #8
    1a66:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a68:	784b      	ldrb	r3, [r1, #1]
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d002      	beq.n	1a74 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a6e:	2380      	movs	r3, #128	; 0x80
    1a70:	02db      	lsls	r3, r3, #11
    1a72:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a74:	7a4b      	ldrb	r3, [r1, #9]
    1a76:	2b00      	cmp	r3, #0
    1a78:	d002      	beq.n	1a80 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a7a:	2380      	movs	r3, #128	; 0x80
    1a7c:	031b      	lsls	r3, r3, #12
    1a7e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a80:	6848      	ldr	r0, [r1, #4]
    1a82:	2801      	cmp	r0, #1
    1a84:	d910      	bls.n	1aa8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a86:	1e43      	subs	r3, r0, #1
    1a88:	4218      	tst	r0, r3
    1a8a:	d134      	bne.n	1af6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a8c:	2802      	cmp	r0, #2
    1a8e:	d930      	bls.n	1af2 <system_gclk_gen_set_config+0x96>
    1a90:	2302      	movs	r3, #2
    1a92:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1a94:	3201      	adds	r2, #1
						mask <<= 1) {
    1a96:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1a98:	4298      	cmp	r0, r3
    1a9a:	d8fb      	bhi.n	1a94 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1a9c:	0212      	lsls	r2, r2, #8
    1a9e:	4332      	orrs	r2, r6
    1aa0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1aa2:	2380      	movs	r3, #128	; 0x80
    1aa4:	035b      	lsls	r3, r3, #13
    1aa6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1aa8:	7a0b      	ldrb	r3, [r1, #8]
    1aaa:	2b00      	cmp	r3, #0
    1aac:	d002      	beq.n	1ab4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1aae:	2380      	movs	r3, #128	; 0x80
    1ab0:	039b      	lsls	r3, r3, #14
    1ab2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ab4:	4a13      	ldr	r2, [pc, #76]	; (1b04 <system_gclk_gen_set_config+0xa8>)
    1ab6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1ab8:	b25b      	sxtb	r3, r3
    1aba:	2b00      	cmp	r3, #0
    1abc:	dbfb      	blt.n	1ab6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1abe:	4b12      	ldr	r3, [pc, #72]	; (1b08 <system_gclk_gen_set_config+0xac>)
    1ac0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ac2:	4b12      	ldr	r3, [pc, #72]	; (1b0c <system_gclk_gen_set_config+0xb0>)
    1ac4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ac6:	4a0f      	ldr	r2, [pc, #60]	; (1b04 <system_gclk_gen_set_config+0xa8>)
    1ac8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1aca:	b25b      	sxtb	r3, r3
    1acc:	2b00      	cmp	r3, #0
    1ace:	dbfb      	blt.n	1ac8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1ad0:	4b0c      	ldr	r3, [pc, #48]	; (1b04 <system_gclk_gen_set_config+0xa8>)
    1ad2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ad4:	001a      	movs	r2, r3
    1ad6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1ad8:	b25b      	sxtb	r3, r3
    1ada:	2b00      	cmp	r3, #0
    1adc:	dbfb      	blt.n	1ad6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1ade:	4a09      	ldr	r2, [pc, #36]	; (1b04 <system_gclk_gen_set_config+0xa8>)
    1ae0:	6853      	ldr	r3, [r2, #4]
    1ae2:	2180      	movs	r1, #128	; 0x80
    1ae4:	0249      	lsls	r1, r1, #9
    1ae6:	400b      	ands	r3, r1
    1ae8:	431d      	orrs	r5, r3
    1aea:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1aec:	4b08      	ldr	r3, [pc, #32]	; (1b10 <system_gclk_gen_set_config+0xb4>)
    1aee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1af0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1af2:	2200      	movs	r2, #0
    1af4:	e7d2      	b.n	1a9c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1af6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1af8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1afa:	2380      	movs	r3, #128	; 0x80
    1afc:	029b      	lsls	r3, r3, #10
    1afe:	431d      	orrs	r5, r3
    1b00:	e7d2      	b.n	1aa8 <system_gclk_gen_set_config+0x4c>
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	40000c00 	.word	0x40000c00
    1b08:	000017bd 	.word	0x000017bd
    1b0c:	40000c08 	.word	0x40000c08
    1b10:	000017fd 	.word	0x000017fd

00001b14 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1b14:	b510      	push	{r4, lr}
    1b16:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b18:	4a0b      	ldr	r2, [pc, #44]	; (1b48 <system_gclk_gen_enable+0x34>)
    1b1a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b1c:	b25b      	sxtb	r3, r3
    1b1e:	2b00      	cmp	r3, #0
    1b20:	dbfb      	blt.n	1b1a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1b22:	4b0a      	ldr	r3, [pc, #40]	; (1b4c <system_gclk_gen_enable+0x38>)
    1b24:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b26:	4b0a      	ldr	r3, [pc, #40]	; (1b50 <system_gclk_gen_enable+0x3c>)
    1b28:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b2a:	4a07      	ldr	r2, [pc, #28]	; (1b48 <system_gclk_gen_enable+0x34>)
    1b2c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b2e:	b25b      	sxtb	r3, r3
    1b30:	2b00      	cmp	r3, #0
    1b32:	dbfb      	blt.n	1b2c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1b34:	4a04      	ldr	r2, [pc, #16]	; (1b48 <system_gclk_gen_enable+0x34>)
    1b36:	6851      	ldr	r1, [r2, #4]
    1b38:	2380      	movs	r3, #128	; 0x80
    1b3a:	025b      	lsls	r3, r3, #9
    1b3c:	430b      	orrs	r3, r1
    1b3e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1b40:	4b04      	ldr	r3, [pc, #16]	; (1b54 <system_gclk_gen_enable+0x40>)
    1b42:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b44:	bd10      	pop	{r4, pc}
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	40000c00 	.word	0x40000c00
    1b4c:	000017bd 	.word	0x000017bd
    1b50:	40000c04 	.word	0x40000c04
    1b54:	000017fd 	.word	0x000017fd

00001b58 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1b58:	b570      	push	{r4, r5, r6, lr}
    1b5a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b5c:	4a1a      	ldr	r2, [pc, #104]	; (1bc8 <system_gclk_gen_get_hz+0x70>)
    1b5e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b60:	b25b      	sxtb	r3, r3
    1b62:	2b00      	cmp	r3, #0
    1b64:	dbfb      	blt.n	1b5e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1b66:	4b19      	ldr	r3, [pc, #100]	; (1bcc <system_gclk_gen_get_hz+0x74>)
    1b68:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b6a:	4b19      	ldr	r3, [pc, #100]	; (1bd0 <system_gclk_gen_get_hz+0x78>)
    1b6c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b6e:	4a16      	ldr	r2, [pc, #88]	; (1bc8 <system_gclk_gen_get_hz+0x70>)
    1b70:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b72:	b25b      	sxtb	r3, r3
    1b74:	2b00      	cmp	r3, #0
    1b76:	dbfb      	blt.n	1b70 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1b78:	4e13      	ldr	r6, [pc, #76]	; (1bc8 <system_gclk_gen_get_hz+0x70>)
    1b7a:	6870      	ldr	r0, [r6, #4]
    1b7c:	04c0      	lsls	r0, r0, #19
    1b7e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b80:	4b14      	ldr	r3, [pc, #80]	; (1bd4 <system_gclk_gen_get_hz+0x7c>)
    1b82:	4798      	blx	r3
    1b84:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b86:	4b12      	ldr	r3, [pc, #72]	; (1bd0 <system_gclk_gen_get_hz+0x78>)
    1b88:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1b8a:	6876      	ldr	r6, [r6, #4]
    1b8c:	02f6      	lsls	r6, r6, #11
    1b8e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b90:	4b11      	ldr	r3, [pc, #68]	; (1bd8 <system_gclk_gen_get_hz+0x80>)
    1b92:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b94:	4a0c      	ldr	r2, [pc, #48]	; (1bc8 <system_gclk_gen_get_hz+0x70>)
    1b96:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b98:	b25b      	sxtb	r3, r3
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	dbfb      	blt.n	1b96 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1b9e:	4b0a      	ldr	r3, [pc, #40]	; (1bc8 <system_gclk_gen_get_hz+0x70>)
    1ba0:	689c      	ldr	r4, [r3, #8]
    1ba2:	0224      	lsls	r4, r4, #8
    1ba4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1ba6:	4b0d      	ldr	r3, [pc, #52]	; (1bdc <system_gclk_gen_get_hz+0x84>)
    1ba8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1baa:	2e00      	cmp	r6, #0
    1bac:	d107      	bne.n	1bbe <system_gclk_gen_get_hz+0x66>
    1bae:	2c01      	cmp	r4, #1
    1bb0:	d907      	bls.n	1bc2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1bb2:	0021      	movs	r1, r4
    1bb4:	0028      	movs	r0, r5
    1bb6:	4b0a      	ldr	r3, [pc, #40]	; (1be0 <system_gclk_gen_get_hz+0x88>)
    1bb8:	4798      	blx	r3
    1bba:	0005      	movs	r5, r0
    1bbc:	e001      	b.n	1bc2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1bbe:	3401      	adds	r4, #1
    1bc0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1bc2:	0028      	movs	r0, r5
    1bc4:	bd70      	pop	{r4, r5, r6, pc}
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	40000c00 	.word	0x40000c00
    1bcc:	000017bd 	.word	0x000017bd
    1bd0:	40000c04 	.word	0x40000c04
    1bd4:	0000182d 	.word	0x0000182d
    1bd8:	40000c08 	.word	0x40000c08
    1bdc:	000017fd 	.word	0x000017fd
    1be0:	00001ed9 	.word	0x00001ed9

00001be4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1be4:	b510      	push	{r4, lr}
    1be6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1be8:	4b06      	ldr	r3, [pc, #24]	; (1c04 <system_gclk_chan_enable+0x20>)
    1bea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bec:	4b06      	ldr	r3, [pc, #24]	; (1c08 <system_gclk_chan_enable+0x24>)
    1bee:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1bf0:	4a06      	ldr	r2, [pc, #24]	; (1c0c <system_gclk_chan_enable+0x28>)
    1bf2:	8853      	ldrh	r3, [r2, #2]
    1bf4:	2180      	movs	r1, #128	; 0x80
    1bf6:	01c9      	lsls	r1, r1, #7
    1bf8:	430b      	orrs	r3, r1
    1bfa:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1bfc:	4b04      	ldr	r3, [pc, #16]	; (1c10 <system_gclk_chan_enable+0x2c>)
    1bfe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c00:	bd10      	pop	{r4, pc}
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	000017bd 	.word	0x000017bd
    1c08:	40000c02 	.word	0x40000c02
    1c0c:	40000c00 	.word	0x40000c00
    1c10:	000017fd 	.word	0x000017fd

00001c14 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1c14:	b510      	push	{r4, lr}
    1c16:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c18:	4b0f      	ldr	r3, [pc, #60]	; (1c58 <system_gclk_chan_disable+0x44>)
    1c1a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c1c:	4b0f      	ldr	r3, [pc, #60]	; (1c5c <system_gclk_chan_disable+0x48>)
    1c1e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c20:	4a0f      	ldr	r2, [pc, #60]	; (1c60 <system_gclk_chan_disable+0x4c>)
    1c22:	8853      	ldrh	r3, [r2, #2]
    1c24:	051b      	lsls	r3, r3, #20
    1c26:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1c28:	8853      	ldrh	r3, [r2, #2]
    1c2a:	490e      	ldr	r1, [pc, #56]	; (1c64 <system_gclk_chan_disable+0x50>)
    1c2c:	400b      	ands	r3, r1
    1c2e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c30:	8853      	ldrh	r3, [r2, #2]
    1c32:	490d      	ldr	r1, [pc, #52]	; (1c68 <system_gclk_chan_disable+0x54>)
    1c34:	400b      	ands	r3, r1
    1c36:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1c38:	0011      	movs	r1, r2
    1c3a:	2280      	movs	r2, #128	; 0x80
    1c3c:	01d2      	lsls	r2, r2, #7
    1c3e:	884b      	ldrh	r3, [r1, #2]
    1c40:	4213      	tst	r3, r2
    1c42:	d1fc      	bne.n	1c3e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1c44:	4906      	ldr	r1, [pc, #24]	; (1c60 <system_gclk_chan_disable+0x4c>)
    1c46:	884a      	ldrh	r2, [r1, #2]
    1c48:	0203      	lsls	r3, r0, #8
    1c4a:	4806      	ldr	r0, [pc, #24]	; (1c64 <system_gclk_chan_disable+0x50>)
    1c4c:	4002      	ands	r2, r0
    1c4e:	4313      	orrs	r3, r2
    1c50:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1c52:	4b06      	ldr	r3, [pc, #24]	; (1c6c <system_gclk_chan_disable+0x58>)
    1c54:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c56:	bd10      	pop	{r4, pc}
    1c58:	000017bd 	.word	0x000017bd
    1c5c:	40000c02 	.word	0x40000c02
    1c60:	40000c00 	.word	0x40000c00
    1c64:	fffff0ff 	.word	0xfffff0ff
    1c68:	ffffbfff 	.word	0xffffbfff
    1c6c:	000017fd 	.word	0x000017fd

00001c70 <system_gclk_chan_set_config>:
{
    1c70:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1c72:	780c      	ldrb	r4, [r1, #0]
    1c74:	0224      	lsls	r4, r4, #8
    1c76:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1c78:	4b02      	ldr	r3, [pc, #8]	; (1c84 <system_gclk_chan_set_config+0x14>)
    1c7a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1c7c:	b2a4      	uxth	r4, r4
    1c7e:	4b02      	ldr	r3, [pc, #8]	; (1c88 <system_gclk_chan_set_config+0x18>)
    1c80:	805c      	strh	r4, [r3, #2]
}
    1c82:	bd10      	pop	{r4, pc}
    1c84:	00001c15 	.word	0x00001c15
    1c88:	40000c00 	.word	0x40000c00

00001c8c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1c8c:	b510      	push	{r4, lr}
    1c8e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c90:	4b06      	ldr	r3, [pc, #24]	; (1cac <system_gclk_chan_get_hz+0x20>)
    1c92:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c94:	4b06      	ldr	r3, [pc, #24]	; (1cb0 <system_gclk_chan_get_hz+0x24>)
    1c96:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1c98:	4b06      	ldr	r3, [pc, #24]	; (1cb4 <system_gclk_chan_get_hz+0x28>)
    1c9a:	885c      	ldrh	r4, [r3, #2]
    1c9c:	0524      	lsls	r4, r4, #20
    1c9e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1ca0:	4b05      	ldr	r3, [pc, #20]	; (1cb8 <system_gclk_chan_get_hz+0x2c>)
    1ca2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1ca4:	0020      	movs	r0, r4
    1ca6:	4b05      	ldr	r3, [pc, #20]	; (1cbc <system_gclk_chan_get_hz+0x30>)
    1ca8:	4798      	blx	r3
}
    1caa:	bd10      	pop	{r4, pc}
    1cac:	000017bd 	.word	0x000017bd
    1cb0:	40000c02 	.word	0x40000c02
    1cb4:	40000c00 	.word	0x40000c00
    1cb8:	000017fd 	.word	0x000017fd
    1cbc:	00001b59 	.word	0x00001b59

00001cc0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1cc0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1cc2:	78d3      	ldrb	r3, [r2, #3]
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d135      	bne.n	1d34 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1cc8:	7813      	ldrb	r3, [r2, #0]
    1cca:	2b80      	cmp	r3, #128	; 0x80
    1ccc:	d029      	beq.n	1d22 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1cce:	061b      	lsls	r3, r3, #24
    1cd0:	2480      	movs	r4, #128	; 0x80
    1cd2:	0264      	lsls	r4, r4, #9
    1cd4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1cd6:	7854      	ldrb	r4, [r2, #1]
    1cd8:	2502      	movs	r5, #2
    1cda:	43ac      	bics	r4, r5
    1cdc:	d106      	bne.n	1cec <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1cde:	7894      	ldrb	r4, [r2, #2]
    1ce0:	2c00      	cmp	r4, #0
    1ce2:	d120      	bne.n	1d26 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1ce4:	2480      	movs	r4, #128	; 0x80
    1ce6:	02a4      	lsls	r4, r4, #10
    1ce8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1cea:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1cec:	7854      	ldrb	r4, [r2, #1]
    1cee:	3c01      	subs	r4, #1
    1cf0:	2c01      	cmp	r4, #1
    1cf2:	d91c      	bls.n	1d2e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1cf4:	040d      	lsls	r5, r1, #16
    1cf6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1cf8:	24a0      	movs	r4, #160	; 0xa0
    1cfa:	05e4      	lsls	r4, r4, #23
    1cfc:	432c      	orrs	r4, r5
    1cfe:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d00:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d02:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d04:	24d0      	movs	r4, #208	; 0xd0
    1d06:	0624      	lsls	r4, r4, #24
    1d08:	432c      	orrs	r4, r5
    1d0a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d0c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1d0e:	78d4      	ldrb	r4, [r2, #3]
    1d10:	2c00      	cmp	r4, #0
    1d12:	d122      	bne.n	1d5a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1d14:	035b      	lsls	r3, r3, #13
    1d16:	d51c      	bpl.n	1d52 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1d18:	7893      	ldrb	r3, [r2, #2]
    1d1a:	2b01      	cmp	r3, #1
    1d1c:	d01e      	beq.n	1d5c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1d1e:	6141      	str	r1, [r0, #20]
    1d20:	e017      	b.n	1d52 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1d22:	2300      	movs	r3, #0
    1d24:	e7d7      	b.n	1cd6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1d26:	24c0      	movs	r4, #192	; 0xc0
    1d28:	02e4      	lsls	r4, r4, #11
    1d2a:	4323      	orrs	r3, r4
    1d2c:	e7dd      	b.n	1cea <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1d2e:	4c0d      	ldr	r4, [pc, #52]	; (1d64 <_system_pinmux_config+0xa4>)
    1d30:	4023      	ands	r3, r4
    1d32:	e7df      	b.n	1cf4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1d34:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d36:	040c      	lsls	r4, r1, #16
    1d38:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d3a:	23a0      	movs	r3, #160	; 0xa0
    1d3c:	05db      	lsls	r3, r3, #23
    1d3e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d40:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d42:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d44:	23d0      	movs	r3, #208	; 0xd0
    1d46:	061b      	lsls	r3, r3, #24
    1d48:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d4a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1d4c:	78d3      	ldrb	r3, [r2, #3]
    1d4e:	2b00      	cmp	r3, #0
    1d50:	d103      	bne.n	1d5a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d52:	7853      	ldrb	r3, [r2, #1]
    1d54:	3b01      	subs	r3, #1
    1d56:	2b01      	cmp	r3, #1
    1d58:	d902      	bls.n	1d60 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1d5a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1d5c:	6181      	str	r1, [r0, #24]
    1d5e:	e7f8      	b.n	1d52 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1d60:	6081      	str	r1, [r0, #8]
}
    1d62:	e7fa      	b.n	1d5a <_system_pinmux_config+0x9a>
    1d64:	fffbffff 	.word	0xfffbffff

00001d68 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1d68:	b510      	push	{r4, lr}
    1d6a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1d6c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1d6e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d70:	2900      	cmp	r1, #0
    1d72:	d104      	bne.n	1d7e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1d74:	0943      	lsrs	r3, r0, #5
    1d76:	01db      	lsls	r3, r3, #7
    1d78:	4905      	ldr	r1, [pc, #20]	; (1d90 <system_pinmux_pin_set_config+0x28>)
    1d7a:	468c      	mov	ip, r1
    1d7c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1d7e:	241f      	movs	r4, #31
    1d80:	4020      	ands	r0, r4
    1d82:	2101      	movs	r1, #1
    1d84:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1d86:	0018      	movs	r0, r3
    1d88:	4b02      	ldr	r3, [pc, #8]	; (1d94 <system_pinmux_pin_set_config+0x2c>)
    1d8a:	4798      	blx	r3
}
    1d8c:	bd10      	pop	{r4, pc}
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	41004400 	.word	0x41004400
    1d94:	00001cc1 	.word	0x00001cc1

00001d98 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1d98:	4770      	bx	lr
	...

00001d9c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1d9c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1d9e:	4b05      	ldr	r3, [pc, #20]	; (1db4 <system_init+0x18>)
    1da0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1da2:	4b05      	ldr	r3, [pc, #20]	; (1db8 <system_init+0x1c>)
    1da4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1da6:	4b05      	ldr	r3, [pc, #20]	; (1dbc <system_init+0x20>)
    1da8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1daa:	4b05      	ldr	r3, [pc, #20]	; (1dc0 <system_init+0x24>)
    1dac:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1dae:	4b05      	ldr	r3, [pc, #20]	; (1dc4 <system_init+0x28>)
    1db0:	4798      	blx	r3
}
    1db2:	bd10      	pop	{r4, pc}
    1db4:	000019a1 	.word	0x000019a1
    1db8:	000017b9 	.word	0x000017b9
    1dbc:	00001d99 	.word	0x00001d99
    1dc0:	000001a5 	.word	0x000001a5
    1dc4:	00001d99 	.word	0x00001d99

00001dc8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1dc8:	e7fe      	b.n	1dc8 <Dummy_Handler>
	...

00001dcc <Reset_Handler>:
{
    1dcc:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1dce:	4a26      	ldr	r2, [pc, #152]	; (1e68 <Reset_Handler+0x9c>)
    1dd0:	4b26      	ldr	r3, [pc, #152]	; (1e6c <Reset_Handler+0xa0>)
    1dd2:	429a      	cmp	r2, r3
    1dd4:	d011      	beq.n	1dfa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1dd6:	001a      	movs	r2, r3
    1dd8:	4b25      	ldr	r3, [pc, #148]	; (1e70 <Reset_Handler+0xa4>)
    1dda:	429a      	cmp	r2, r3
    1ddc:	d20d      	bcs.n	1dfa <Reset_Handler+0x2e>
    1dde:	4a25      	ldr	r2, [pc, #148]	; (1e74 <Reset_Handler+0xa8>)
    1de0:	3303      	adds	r3, #3
    1de2:	1a9b      	subs	r3, r3, r2
    1de4:	089b      	lsrs	r3, r3, #2
    1de6:	3301      	adds	r3, #1
    1de8:	009b      	lsls	r3, r3, #2
    1dea:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1dec:	481f      	ldr	r0, [pc, #124]	; (1e6c <Reset_Handler+0xa0>)
    1dee:	491e      	ldr	r1, [pc, #120]	; (1e68 <Reset_Handler+0x9c>)
    1df0:	588c      	ldr	r4, [r1, r2]
    1df2:	5084      	str	r4, [r0, r2]
    1df4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1df6:	429a      	cmp	r2, r3
    1df8:	d1fa      	bne.n	1df0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1dfa:	4a1f      	ldr	r2, [pc, #124]	; (1e78 <Reset_Handler+0xac>)
    1dfc:	4b1f      	ldr	r3, [pc, #124]	; (1e7c <Reset_Handler+0xb0>)
    1dfe:	429a      	cmp	r2, r3
    1e00:	d20a      	bcs.n	1e18 <Reset_Handler+0x4c>
    1e02:	43d3      	mvns	r3, r2
    1e04:	491d      	ldr	r1, [pc, #116]	; (1e7c <Reset_Handler+0xb0>)
    1e06:	185b      	adds	r3, r3, r1
    1e08:	2103      	movs	r1, #3
    1e0a:	438b      	bics	r3, r1
    1e0c:	3304      	adds	r3, #4
    1e0e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1e10:	2100      	movs	r1, #0
    1e12:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1e14:	4293      	cmp	r3, r2
    1e16:	d1fc      	bne.n	1e12 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1e18:	4a19      	ldr	r2, [pc, #100]	; (1e80 <Reset_Handler+0xb4>)
    1e1a:	21ff      	movs	r1, #255	; 0xff
    1e1c:	4b19      	ldr	r3, [pc, #100]	; (1e84 <Reset_Handler+0xb8>)
    1e1e:	438b      	bics	r3, r1
    1e20:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1e22:	39fd      	subs	r1, #253	; 0xfd
    1e24:	2390      	movs	r3, #144	; 0x90
    1e26:	005b      	lsls	r3, r3, #1
    1e28:	4a17      	ldr	r2, [pc, #92]	; (1e88 <Reset_Handler+0xbc>)
    1e2a:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e2c:	4b17      	ldr	r3, [pc, #92]	; (1e8c <Reset_Handler+0xc0>)
    1e2e:	7b9a      	ldrb	r2, [r3, #14]
    1e30:	312e      	adds	r1, #46	; 0x2e
    1e32:	438a      	bics	r2, r1
    1e34:	2120      	movs	r1, #32
    1e36:	430a      	orrs	r2, r1
    1e38:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e3a:	7b9a      	ldrb	r2, [r3, #14]
    1e3c:	210c      	movs	r1, #12
    1e3e:	438a      	bics	r2, r1
    1e40:	2108      	movs	r1, #8
    1e42:	430a      	orrs	r2, r1
    1e44:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e46:	7b9a      	ldrb	r2, [r3, #14]
    1e48:	2103      	movs	r1, #3
    1e4a:	438a      	bics	r2, r1
    1e4c:	2102      	movs	r1, #2
    1e4e:	430a      	orrs	r2, r1
    1e50:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e52:	4a0f      	ldr	r2, [pc, #60]	; (1e90 <Reset_Handler+0xc4>)
    1e54:	6853      	ldr	r3, [r2, #4]
    1e56:	2180      	movs	r1, #128	; 0x80
    1e58:	430b      	orrs	r3, r1
    1e5a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1e5c:	4b0d      	ldr	r3, [pc, #52]	; (1e94 <Reset_Handler+0xc8>)
    1e5e:	4798      	blx	r3
        main();
    1e60:	4b0d      	ldr	r3, [pc, #52]	; (1e98 <Reset_Handler+0xcc>)
    1e62:	4798      	blx	r3
    1e64:	e7fe      	b.n	1e64 <Reset_Handler+0x98>
    1e66:	46c0      	nop			; (mov r8, r8)
    1e68:	000020e4 	.word	0x000020e4
    1e6c:	20000000 	.word	0x20000000
    1e70:	20000078 	.word	0x20000078
    1e74:	20000004 	.word	0x20000004
    1e78:	20000078 	.word	0x20000078
    1e7c:	2000018c 	.word	0x2000018c
    1e80:	e000ed00 	.word	0xe000ed00
    1e84:	00000000 	.word	0x00000000
    1e88:	41007000 	.word	0x41007000
    1e8c:	41004800 	.word	0x41004800
    1e90:	41004000 	.word	0x41004000
    1e94:	00001ff1 	.word	0x00001ff1
    1e98:	00001e9d 	.word	0x00001e9d

00001e9c <main>:
volatile uint8_t track_pointer = 0;
volatile uint8_t input_buttons = 0;
volatile bool interrupt_occured = false;

int main (void)
{
    1e9c:	b510      	push	{r4, lr}
	system_init();
    1e9e:	4b07      	ldr	r3, [pc, #28]	; (1ebc <main+0x20>)
    1ea0:	4798      	blx	r3
	
	//Initailise the timer for the delay
	delay_init();
    1ea2:	4b07      	ldr	r3, [pc, #28]	; (1ec0 <main+0x24>)
    1ea4:	4798      	blx	r3
	
	//Leds and buttons initialization
	init_led_buttons();
    1ea6:	4b07      	ldr	r3, [pc, #28]	; (1ec4 <main+0x28>)
    1ea8:	4798      	blx	r3
	
	//SPI initialization
	configure_spi();
    1eaa:	4b07      	ldr	r3, [pc, #28]	; (1ec8 <main+0x2c>)
    1eac:	4798      	blx	r3
	
	//Init buttons
	init_buttons();
    1eae:	4b07      	ldr	r3, [pc, #28]	; (1ecc <main+0x30>)
    1eb0:	4798      	blx	r3
	
	//Init_burp_box
	init_burp_box();
    1eb2:	4b07      	ldr	r3, [pc, #28]	; (1ed0 <main+0x34>)
    1eb4:	4798      	blx	r3
		//LED_off(PLAY_LED);
		//delay_cycles_ms(1000);
		//test_led_on_off_toggle();
		//test_buttons();
		//test_track_led();
		main_control_loop_1();
    1eb6:	4c07      	ldr	r4, [pc, #28]	; (1ed4 <main+0x38>)
    1eb8:	47a0      	blx	r4
    1eba:	e7fd      	b.n	1eb8 <main+0x1c>
    1ebc:	00001d9d 	.word	0x00001d9d
    1ec0:	00000865 	.word	0x00000865
    1ec4:	00001505 	.word	0x00001505
    1ec8:	00001759 	.word	0x00001759
    1ecc:	000003d5 	.word	0x000003d5
    1ed0:	000004c9 	.word	0x000004c9
    1ed4:	000003f1 	.word	0x000003f1

00001ed8 <__udivsi3>:
    1ed8:	2200      	movs	r2, #0
    1eda:	0843      	lsrs	r3, r0, #1
    1edc:	428b      	cmp	r3, r1
    1ede:	d374      	bcc.n	1fca <__udivsi3+0xf2>
    1ee0:	0903      	lsrs	r3, r0, #4
    1ee2:	428b      	cmp	r3, r1
    1ee4:	d35f      	bcc.n	1fa6 <__udivsi3+0xce>
    1ee6:	0a03      	lsrs	r3, r0, #8
    1ee8:	428b      	cmp	r3, r1
    1eea:	d344      	bcc.n	1f76 <__udivsi3+0x9e>
    1eec:	0b03      	lsrs	r3, r0, #12
    1eee:	428b      	cmp	r3, r1
    1ef0:	d328      	bcc.n	1f44 <__udivsi3+0x6c>
    1ef2:	0c03      	lsrs	r3, r0, #16
    1ef4:	428b      	cmp	r3, r1
    1ef6:	d30d      	bcc.n	1f14 <__udivsi3+0x3c>
    1ef8:	22ff      	movs	r2, #255	; 0xff
    1efa:	0209      	lsls	r1, r1, #8
    1efc:	ba12      	rev	r2, r2
    1efe:	0c03      	lsrs	r3, r0, #16
    1f00:	428b      	cmp	r3, r1
    1f02:	d302      	bcc.n	1f0a <__udivsi3+0x32>
    1f04:	1212      	asrs	r2, r2, #8
    1f06:	0209      	lsls	r1, r1, #8
    1f08:	d065      	beq.n	1fd6 <__udivsi3+0xfe>
    1f0a:	0b03      	lsrs	r3, r0, #12
    1f0c:	428b      	cmp	r3, r1
    1f0e:	d319      	bcc.n	1f44 <__udivsi3+0x6c>
    1f10:	e000      	b.n	1f14 <__udivsi3+0x3c>
    1f12:	0a09      	lsrs	r1, r1, #8
    1f14:	0bc3      	lsrs	r3, r0, #15
    1f16:	428b      	cmp	r3, r1
    1f18:	d301      	bcc.n	1f1e <__udivsi3+0x46>
    1f1a:	03cb      	lsls	r3, r1, #15
    1f1c:	1ac0      	subs	r0, r0, r3
    1f1e:	4152      	adcs	r2, r2
    1f20:	0b83      	lsrs	r3, r0, #14
    1f22:	428b      	cmp	r3, r1
    1f24:	d301      	bcc.n	1f2a <__udivsi3+0x52>
    1f26:	038b      	lsls	r3, r1, #14
    1f28:	1ac0      	subs	r0, r0, r3
    1f2a:	4152      	adcs	r2, r2
    1f2c:	0b43      	lsrs	r3, r0, #13
    1f2e:	428b      	cmp	r3, r1
    1f30:	d301      	bcc.n	1f36 <__udivsi3+0x5e>
    1f32:	034b      	lsls	r3, r1, #13
    1f34:	1ac0      	subs	r0, r0, r3
    1f36:	4152      	adcs	r2, r2
    1f38:	0b03      	lsrs	r3, r0, #12
    1f3a:	428b      	cmp	r3, r1
    1f3c:	d301      	bcc.n	1f42 <__udivsi3+0x6a>
    1f3e:	030b      	lsls	r3, r1, #12
    1f40:	1ac0      	subs	r0, r0, r3
    1f42:	4152      	adcs	r2, r2
    1f44:	0ac3      	lsrs	r3, r0, #11
    1f46:	428b      	cmp	r3, r1
    1f48:	d301      	bcc.n	1f4e <__udivsi3+0x76>
    1f4a:	02cb      	lsls	r3, r1, #11
    1f4c:	1ac0      	subs	r0, r0, r3
    1f4e:	4152      	adcs	r2, r2
    1f50:	0a83      	lsrs	r3, r0, #10
    1f52:	428b      	cmp	r3, r1
    1f54:	d301      	bcc.n	1f5a <__udivsi3+0x82>
    1f56:	028b      	lsls	r3, r1, #10
    1f58:	1ac0      	subs	r0, r0, r3
    1f5a:	4152      	adcs	r2, r2
    1f5c:	0a43      	lsrs	r3, r0, #9
    1f5e:	428b      	cmp	r3, r1
    1f60:	d301      	bcc.n	1f66 <__udivsi3+0x8e>
    1f62:	024b      	lsls	r3, r1, #9
    1f64:	1ac0      	subs	r0, r0, r3
    1f66:	4152      	adcs	r2, r2
    1f68:	0a03      	lsrs	r3, r0, #8
    1f6a:	428b      	cmp	r3, r1
    1f6c:	d301      	bcc.n	1f72 <__udivsi3+0x9a>
    1f6e:	020b      	lsls	r3, r1, #8
    1f70:	1ac0      	subs	r0, r0, r3
    1f72:	4152      	adcs	r2, r2
    1f74:	d2cd      	bcs.n	1f12 <__udivsi3+0x3a>
    1f76:	09c3      	lsrs	r3, r0, #7
    1f78:	428b      	cmp	r3, r1
    1f7a:	d301      	bcc.n	1f80 <__udivsi3+0xa8>
    1f7c:	01cb      	lsls	r3, r1, #7
    1f7e:	1ac0      	subs	r0, r0, r3
    1f80:	4152      	adcs	r2, r2
    1f82:	0983      	lsrs	r3, r0, #6
    1f84:	428b      	cmp	r3, r1
    1f86:	d301      	bcc.n	1f8c <__udivsi3+0xb4>
    1f88:	018b      	lsls	r3, r1, #6
    1f8a:	1ac0      	subs	r0, r0, r3
    1f8c:	4152      	adcs	r2, r2
    1f8e:	0943      	lsrs	r3, r0, #5
    1f90:	428b      	cmp	r3, r1
    1f92:	d301      	bcc.n	1f98 <__udivsi3+0xc0>
    1f94:	014b      	lsls	r3, r1, #5
    1f96:	1ac0      	subs	r0, r0, r3
    1f98:	4152      	adcs	r2, r2
    1f9a:	0903      	lsrs	r3, r0, #4
    1f9c:	428b      	cmp	r3, r1
    1f9e:	d301      	bcc.n	1fa4 <__udivsi3+0xcc>
    1fa0:	010b      	lsls	r3, r1, #4
    1fa2:	1ac0      	subs	r0, r0, r3
    1fa4:	4152      	adcs	r2, r2
    1fa6:	08c3      	lsrs	r3, r0, #3
    1fa8:	428b      	cmp	r3, r1
    1faa:	d301      	bcc.n	1fb0 <__udivsi3+0xd8>
    1fac:	00cb      	lsls	r3, r1, #3
    1fae:	1ac0      	subs	r0, r0, r3
    1fb0:	4152      	adcs	r2, r2
    1fb2:	0883      	lsrs	r3, r0, #2
    1fb4:	428b      	cmp	r3, r1
    1fb6:	d301      	bcc.n	1fbc <__udivsi3+0xe4>
    1fb8:	008b      	lsls	r3, r1, #2
    1fba:	1ac0      	subs	r0, r0, r3
    1fbc:	4152      	adcs	r2, r2
    1fbe:	0843      	lsrs	r3, r0, #1
    1fc0:	428b      	cmp	r3, r1
    1fc2:	d301      	bcc.n	1fc8 <__udivsi3+0xf0>
    1fc4:	004b      	lsls	r3, r1, #1
    1fc6:	1ac0      	subs	r0, r0, r3
    1fc8:	4152      	adcs	r2, r2
    1fca:	1a41      	subs	r1, r0, r1
    1fcc:	d200      	bcs.n	1fd0 <__udivsi3+0xf8>
    1fce:	4601      	mov	r1, r0
    1fd0:	4152      	adcs	r2, r2
    1fd2:	4610      	mov	r0, r2
    1fd4:	4770      	bx	lr
    1fd6:	e7ff      	b.n	1fd8 <__udivsi3+0x100>
    1fd8:	b501      	push	{r0, lr}
    1fda:	2000      	movs	r0, #0
    1fdc:	f000 f806 	bl	1fec <__aeabi_idiv0>
    1fe0:	bd02      	pop	{r1, pc}
    1fe2:	46c0      	nop			; (mov r8, r8)

00001fe4 <__aeabi_uidivmod>:
    1fe4:	2900      	cmp	r1, #0
    1fe6:	d0f7      	beq.n	1fd8 <__udivsi3+0x100>
    1fe8:	e776      	b.n	1ed8 <__udivsi3>
    1fea:	4770      	bx	lr

00001fec <__aeabi_idiv0>:
    1fec:	4770      	bx	lr
    1fee:	46c0      	nop			; (mov r8, r8)

00001ff0 <__libc_init_array>:
    1ff0:	b570      	push	{r4, r5, r6, lr}
    1ff2:	2600      	movs	r6, #0
    1ff4:	4d0c      	ldr	r5, [pc, #48]	; (2028 <__libc_init_array+0x38>)
    1ff6:	4c0d      	ldr	r4, [pc, #52]	; (202c <__libc_init_array+0x3c>)
    1ff8:	1b64      	subs	r4, r4, r5
    1ffa:	10a4      	asrs	r4, r4, #2
    1ffc:	42a6      	cmp	r6, r4
    1ffe:	d109      	bne.n	2014 <__libc_init_array+0x24>
    2000:	2600      	movs	r6, #0
    2002:	f000 f85f 	bl	20c4 <_init>
    2006:	4d0a      	ldr	r5, [pc, #40]	; (2030 <__libc_init_array+0x40>)
    2008:	4c0a      	ldr	r4, [pc, #40]	; (2034 <__libc_init_array+0x44>)
    200a:	1b64      	subs	r4, r4, r5
    200c:	10a4      	asrs	r4, r4, #2
    200e:	42a6      	cmp	r6, r4
    2010:	d105      	bne.n	201e <__libc_init_array+0x2e>
    2012:	bd70      	pop	{r4, r5, r6, pc}
    2014:	00b3      	lsls	r3, r6, #2
    2016:	58eb      	ldr	r3, [r5, r3]
    2018:	4798      	blx	r3
    201a:	3601      	adds	r6, #1
    201c:	e7ee      	b.n	1ffc <__libc_init_array+0xc>
    201e:	00b3      	lsls	r3, r6, #2
    2020:	58eb      	ldr	r3, [r5, r3]
    2022:	4798      	blx	r3
    2024:	3601      	adds	r6, #1
    2026:	e7f2      	b.n	200e <__libc_init_array+0x1e>
    2028:	000020d0 	.word	0x000020d0
    202c:	000020d0 	.word	0x000020d0
    2030:	000020d0 	.word	0x000020d0
    2034:	000020d4 	.word	0x000020d4

00002038 <memset>:
    2038:	0003      	movs	r3, r0
    203a:	1882      	adds	r2, r0, r2
    203c:	4293      	cmp	r3, r2
    203e:	d100      	bne.n	2042 <memset+0xa>
    2040:	4770      	bx	lr
    2042:	7019      	strb	r1, [r3, #0]
    2044:	3301      	adds	r3, #1
    2046:	e7f9      	b.n	203c <memset+0x4>

00002048 <_tcc_intflag>:
    2048:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    2058:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    2068:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00002078 <tc_interrupt_vectors.11801>:
    2078:	0e0d 0000 183e 0000 183a 0000 183a 0000     ....>...:...:...
    2088:	189c 0000 189c 0000 1852 0000 1844 0000     ........R...D...
    2098:	1858 0000 188a 0000 1924 0000 1904 0000     X.......$.......
    20a8:	1904 0000 1990 0000 1916 0000 1932 0000     ............2...
    20b8:	1908 0000 1940 0000 1980 0000               ....@.......

000020c4 <_init>:
    20c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20c6:	46c0      	nop			; (mov r8, r8)
    20c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    20ca:	bc08      	pop	{r3}
    20cc:	469e      	mov	lr, r3
    20ce:	4770      	bx	lr

000020d0 <__init_array_start>:
    20d0:	000000b5 	.word	0x000000b5

000020d4 <_fini>:
    20d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20d6:	46c0      	nop			; (mov r8, r8)
    20d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    20da:	bc08      	pop	{r3}
    20dc:	469e      	mov	lr, r3
    20de:	4770      	bx	lr

000020e0 <__fini_array_start>:
    20e0:	0000008d 	.word	0x0000008d
